
Hethong0301.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002c548  08009040  08009040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035588  08035588  00050080  2**0
                  CONTENTS
  4 .ARM          00000008  08035588  08035588  00045588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035590  08035590  00050080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035590  08035590  00045590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035594  08035594  00045594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08035598  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000080  08035618  00050080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08035618  000508a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017808  00000000  00000000  000500b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031d8  00000000  00000000  000678b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001490  00000000  00000000  0006aa90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001328  00000000  00000000  0006bf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f43  00000000  00000000  0006d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ffcc  00000000  00000000  0008618b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092ac3  00000000  00000000  00096157  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa8  00000000  00000000  00128c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009028 	.word	0x08009028

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08009028 	.word	0x08009028

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f957 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f006 fbfa 	bl	8007184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f96f 	bl	8000c9e <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 f937 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000018 	.word	0x20000018
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000000 	.word	0x20000000

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	2000015c 	.word	0x2000015c

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000015c 	.word	0x2000015c

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_Delay+0x40>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetHalVersion+0x10>)
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	01070600 	.word	0x01070600

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d004      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e00c      	b.n	8000cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2205      	movs	r2, #5
 8000cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0201 	bic.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e159      	b.n	8000fcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8148 	bne.w	8000fc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x4a>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b12      	cmp	r3, #18
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	69b9      	ldr	r1, [r7, #24]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0203 	and.w	r2, r3, #3
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00b      	beq.n	8000de2 <HAL_GPIO_Init+0xe6>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd6:	2b11      	cmp	r3, #17
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b12      	cmp	r3, #18
 8000de0:	d130      	bne.n	8000e44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	091b      	lsrs	r3, r3, #4
 8000e2e:	f003 0201 	and.w	r2, r3, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80a2 	beq.w	8000fc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <HAL_GPIO_Init+0x2e4>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a51      	ldr	r2, [pc, #324]	; (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d019      	beq.n	8000efe <HAL_GPIO_Init+0x202>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a47      	ldr	r2, [pc, #284]	; (8000fec <HAL_GPIO_Init+0x2f0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a46      	ldr	r2, [pc, #280]	; (8000ff0 <HAL_GPIO_Init+0x2f4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00d      	beq.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <HAL_GPIO_Init+0x2f8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d007      	beq.n	8000ef2 <HAL_GPIO_Init+0x1f6>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_GPIO_Init+0x1f2>
 8000eea:	2304      	movs	r3, #4
 8000eec:	e008      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000efe:	2300      	movs	r3, #0
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f10:	4934      	ldr	r1, [pc, #208]	; (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f42:	4a2e      	ldr	r2, [pc, #184]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6c:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f96:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_GPIO_Init+0x300>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f aea2 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	3724      	adds	r7, #36	; 0x24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e10f      	b.n	8001266 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f006 f8ba 	bl	80071d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2224      	movs	r2, #36	; 0x24
 8001064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0201 	bic.w	r2, r2, #1
 8001076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001078:	f001 fb14 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800107c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <HAL_I2C_Init+0x23c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d807      	bhi.n	8001098 <HAL_I2C_Init+0x64>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a7a      	ldr	r2, [pc, #488]	; (8001274 <HAL_I2C_Init+0x240>)
 800108c:	4293      	cmp	r3, r2
 800108e:	bf94      	ite	ls
 8001090:	2301      	movls	r3, #1
 8001092:	2300      	movhi	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	e006      	b.n	80010a6 <HAL_I2C_Init+0x72>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4a77      	ldr	r2, [pc, #476]	; (8001278 <HAL_I2C_Init+0x244>)
 800109c:	4293      	cmp	r3, r2
 800109e:	bf94      	ite	ls
 80010a0:	2301      	movls	r3, #1
 80010a2:	2300      	movhi	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0db      	b.n	8001266 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4a72      	ldr	r2, [pc, #456]	; (800127c <HAL_I2C_Init+0x248>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	0c9b      	lsrs	r3, r3, #18
 80010b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a64      	ldr	r2, [pc, #400]	; (8001270 <HAL_I2C_Init+0x23c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d802      	bhi.n	80010e8 <HAL_I2C_Init+0xb4>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	e009      	b.n	80010fc <HAL_I2C_Init+0xc8>
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	4a63      	ldr	r2, [pc, #396]	; (8001280 <HAL_I2C_Init+0x24c>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	3301      	adds	r3, #1
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	430b      	orrs	r3, r1
 8001102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800110e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4956      	ldr	r1, [pc, #344]	; (8001270 <HAL_I2C_Init+0x23c>)
 8001118:	428b      	cmp	r3, r1
 800111a:	d80d      	bhi.n	8001138 <HAL_I2C_Init+0x104>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1e59      	subs	r1, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fbb1 f3f3 	udiv	r3, r1, r3
 800112a:	3301      	adds	r3, #1
 800112c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001130:	2b04      	cmp	r3, #4
 8001132:	bf38      	it	cc
 8001134:	2304      	movcc	r3, #4
 8001136:	e04f      	b.n	80011d8 <HAL_I2C_Init+0x1a4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d111      	bne.n	8001164 <HAL_I2C_Init+0x130>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001152:	3301      	adds	r3, #1
 8001154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e012      	b.n	800118a <HAL_I2C_Init+0x156>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1e58      	subs	r0, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	0099      	lsls	r1, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	fbb0 f3f3 	udiv	r3, r0, r3
 800117a:	3301      	adds	r3, #1
 800117c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001180:	2b00      	cmp	r3, #0
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_I2C_Init+0x15e>
 800118e:	2301      	movs	r3, #1
 8001190:	e022      	b.n	80011d8 <HAL_I2C_Init+0x1a4>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10e      	bne.n	80011b8 <HAL_I2C_Init+0x184>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1e58      	subs	r0, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	440b      	add	r3, r1
 80011a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b6:	e00f      	b.n	80011d8 <HAL_I2C_Init+0x1a4>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	0099      	lsls	r1, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ce:	3301      	adds	r3, #1
 80011d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	6809      	ldr	r1, [r1, #0]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6911      	ldr	r1, [r2, #16]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68d2      	ldr	r2, [r2, #12]
 8001212:	4311      	orrs	r1, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	430b      	orrs	r3, r1
 800121a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	000186a0 	.word	0x000186a0
 8001274:	001e847f 	.word	0x001e847f
 8001278:	003d08ff 	.word	0x003d08ff
 800127c:	431bde83 	.word	0x431bde83
 8001280:	10624dd3 	.word	0x10624dd3

08001284 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	461a      	mov	r2, r3
 8001290:	460b      	mov	r3, r1
 8001292:	817b      	strh	r3, [r7, #10]
 8001294:	4613      	mov	r3, r2
 8001296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fbc4 	bl	8000a24 <HAL_GetTick>
 800129c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b20      	cmp	r3, #32
 80012a8:	f040 80e0 	bne.w	800146c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2319      	movs	r3, #25
 80012b2:	2201      	movs	r2, #1
 80012b4:	4970      	ldr	r1, [pc, #448]	; (8001478 <HAL_I2C_Master_Transmit+0x1f4>)
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fc34 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012c2:	2302      	movs	r3, #2
 80012c4:	e0d3      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_I2C_Master_Transmit+0x50>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0cc      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d007      	beq.n	80012fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2221      	movs	r2, #33	; 0x21
 800130e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2210      	movs	r2, #16
 8001316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	893a      	ldrh	r2, [r7, #8]
 800132a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4a50      	ldr	r2, [pc, #320]	; (800147c <HAL_I2C_Master_Transmit+0x1f8>)
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fac2 	bl	80018cc <I2C_MasterRequestWrite>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e08d      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001368:	e066      	b.n	8001438 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	6a39      	ldr	r1, [r7, #32]
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 fcae 	bl	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00d      	beq.n	8001396 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	2b04      	cmp	r3, #4
 8001380:	d107      	bne.n	8001392 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001390:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e06b      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d11b      	bne.n	800140c <HAL_I2C_Master_Transmit+0x188>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	3b01      	subs	r3, #1
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	6a39      	ldr	r1, [r7, #32]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 fc9e 	bl	8001d52 <I2C_WaitOnBTFFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00d      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	2b04      	cmp	r3, #4
 8001422:	d107      	bne.n	8001434 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001432:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e01a      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d194      	bne.n	800136a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800144e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2220      	movs	r2, #32
 8001454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800146c:	2302      	movs	r3, #2
  }
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	00100002 	.word	0x00100002
 800147c:	ffff0000 	.word	0xffff0000

08001480 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	461a      	mov	r2, r3
 800148c:	460b      	mov	r3, r1
 800148e:	817b      	strh	r3, [r7, #10]
 8001490:	4613      	mov	r3, r2
 8001492:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff fac6 	bl	8000a24 <HAL_GetTick>
 8001498:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	f040 820b 	bne.w	80018be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2319      	movs	r3, #25
 80014ae:	2201      	movs	r2, #1
 80014b0:	497c      	ldr	r1, [pc, #496]	; (80016a4 <HAL_I2C_Master_Receive+0x224>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fb36 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
 80014c0:	e1fe      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_I2C_Master_Receive+0x50>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e1f7      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d007      	beq.n	80014f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001504:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2222      	movs	r2, #34	; 0x22
 800150a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2210      	movs	r2, #16
 8001512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4a5c      	ldr	r2, [pc, #368]	; (80016a8 <HAL_I2C_Master_Receive+0x228>)
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001538:	8979      	ldrh	r1, [r7, #10]
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa3a 	bl	80019b8 <I2C_MasterRequestRead>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1b8      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	2b00      	cmp	r3, #0
 8001554:	d113      	bne.n	800157e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	623b      	str	r3, [r7, #32]
 800156a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e18c      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11b      	bne.n	80015be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e16c      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d11b      	bne.n	80015fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	e14c      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800160c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001624:	e138      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162a:	2b03      	cmp	r3, #3
 800162c:	f200 80f1 	bhi.w	8001812 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	2b01      	cmp	r3, #1
 8001636:	d123      	bne.n	8001680 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f000 fbc9 	bl	8001dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e139      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691a      	ldr	r2, [r3, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	3b01      	subs	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800167e:	e10b      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	2b02      	cmp	r3, #2
 8001686:	d14e      	bne.n	8001726 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800168e:	2200      	movs	r2, #0
 8001690:	4906      	ldr	r1, [pc, #24]	; (80016ac <HAL_I2C_Master_Receive+0x22c>)
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa46 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e10e      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
 80016a2:	bf00      	nop
 80016a4:	00100002 	.word	0x00100002
 80016a8:	ffff0000 	.word	0xffff0000
 80016ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001724:	e0b8      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	2200      	movs	r2, #0
 800172e:	4966      	ldr	r1, [pc, #408]	; (80018c8 <HAL_I2C_Master_Receive+0x448>)
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f9f7 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0bf      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800174e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001788:	2200      	movs	r2, #0
 800178a:	494f      	ldr	r1, [pc, #316]	; (80018c8 <HAL_I2C_Master_Receive+0x448>)
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f9c9 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e091      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001810:	e042      	b.n	8001898 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fadc 	bl	8001dd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e04c      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	2b04      	cmp	r3, #4
 8001864:	d118      	bne.n	8001898 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f aec2 	bne.w	8001626 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80018be:	2302      	movs	r3, #2
  }
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	00010004 	.word	0x00010004

080018cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	460b      	mov	r3, r1
 80018da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d006      	beq.n	80018f6 <I2C_MasterRequestWrite+0x2a>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d003      	beq.n	80018f6 <I2C_MasterRequestWrite+0x2a>
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018f4:	d108      	bne.n	8001908 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e00b      	b.n	8001920 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	2b12      	cmp	r3, #18
 800190e:	d107      	bne.n	8001920 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800191e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f8f9 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e035      	b.n	80019a8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001944:	d108      	bne.n	8001958 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	e01b      	b.n	8001990 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	11db      	asrs	r3, r3, #7
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f003 0306 	and.w	r3, r3, #6
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f063 030f 	orn	r3, r3, #15
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <I2C_MasterRequestWrite+0xe4>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f92b 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e010      	b.n	80019a8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4907      	ldr	r1, [pc, #28]	; (80019b4 <I2C_MasterRequestWrite+0xe8>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f91b 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	00010008 	.word	0x00010008
 80019b4:	00010002 	.word	0x00010002

080019b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d006      	beq.n	80019f2 <I2C_MasterRequestRead+0x3a>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d003      	beq.n	80019f2 <I2C_MasterRequestRead+0x3a>
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019f0:	d108      	bne.n	8001a04 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e00b      	b.n	8001a1c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2b11      	cmp	r3, #17
 8001a0a:	d107      	bne.n	8001a1c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f87b 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e06d      	b.n	8001b14 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a40:	d108      	bne.n	8001a54 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e053      	b.n	8001afc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a54:	897b      	ldrh	r3, [r7, #10]
 8001a56:	11db      	asrs	r3, r3, #7
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 0306 	and.w	r3, r3, #6
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f063 030f 	orn	r3, r3, #15
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	492a      	ldr	r1, [pc, #168]	; (8001b1c <I2C_MasterRequestRead+0x164>)
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f8ad 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e048      	b.n	8001b14 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a82:	897b      	ldrh	r3, [r7, #10]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4923      	ldr	r1, [pc, #140]	; (8001b20 <I2C_MasterRequestRead+0x168>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f89d 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e038      	b.n	8001b14 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f825 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e017      	b.n	8001b14 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ae4:	897b      	ldrh	r3, [r7, #10]
 8001ae6:	11db      	asrs	r3, r3, #7
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f003 0306 	and.w	r3, r3, #6
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f063 030e 	orn	r3, r3, #14
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <I2C_MasterRequestRead+0x168>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f865 	bl	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	00010008 	.word	0x00010008
 8001b20:	00010002 	.word	0x00010002

08001b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b34:	e025      	b.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d021      	beq.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7fe ff71 	bl	8000a24 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d116      	bne.n	8001b82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0220 	orr.w	r2, r3, #32
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e023      	b.n	8001bca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10d      	bne.n	8001ba8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4013      	ands	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf0c      	ite	eq
 8001b9e:	2301      	moveq	r3, #1
 8001ba0:	2300      	movne	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	e00c      	b.n	8001bc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d0b6      	beq.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be0:	e051      	b.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d123      	bne.n	8001c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e046      	b.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d021      	beq.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7fe feef 	bl	8000a24 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d116      	bne.n	8001c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e020      	b.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10c      	bne.n	8001caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	e00b      	b.n	8001cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d18d      	bne.n	8001be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cdc:	e02d      	b.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f8ce 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e02d      	b.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d021      	beq.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7fe fe95 	bl	8000a24 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d116      	bne.n	8001d3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e007      	b.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d44:	2b80      	cmp	r3, #128	; 0x80
 8001d46:	d1ca      	bne.n	8001cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d5e:	e02d      	b.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f88d 	bl	8001e80 <I2C_IsAcknowledgeFailed>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e02d      	b.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d021      	beq.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7fe fe54 	bl	8000a24 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f043 0220 	orr.w	r2, r3, #32
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e007      	b.n	8001dcc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d1ca      	bne.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001de0:	e042      	b.n	8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d119      	bne.n	8001e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0210 	mvn.w	r2, #16
 8001df8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e029      	b.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e24:	f7fe fdfe 	bl	8000a24 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d302      	bcc.n	8001e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e007      	b.n	8001e78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d1b5      	bne.n	8001de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d11b      	bne.n	8001ed0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ea0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e22d      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d075      	beq.n	8001fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001efe:	4ba3      	ldr	r3, [pc, #652]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d00c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0a:	4ba0      	ldr	r3, [pc, #640]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d112      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f16:	4b9d      	ldr	r3, [pc, #628]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	4b99      	ldr	r3, [pc, #612]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d05b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x108>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d157      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e208      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x74>
 8001f46:	4b91      	ldr	r3, [pc, #580]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a90      	ldr	r2, [pc, #576]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xb0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x98>
 8001f5e:	4b8b      	ldr	r3, [pc, #556]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a8a      	ldr	r2, [pc, #552]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b88      	ldr	r3, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a87      	ldr	r2, [pc, #540]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xb0>
 8001f78:	4b84      	ldr	r3, [pc, #528]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a83      	ldr	r2, [pc, #524]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b81      	ldr	r3, [pc, #516]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a80      	ldr	r2, [pc, #512]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe fd44 	bl	8000a24 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fd40 	bl	8000a24 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1cd      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xc0>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fd30 	bl	8000a24 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7fe fd2c 	bl	8000a24 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1b9      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b6c      	ldr	r3, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xe8>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d063      	beq.n	80020be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11c      	bne.n	8002048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d116      	bne.n	8002048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x152>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e18d      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b56      	ldr	r3, [pc, #344]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4952      	ldr	r1, [pc, #328]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	e03a      	b.n	80020be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_RCC_OscConfig+0x2b0>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe fce5 	bl	8000a24 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205e:	f7fe fce1 	bl	8000a24 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e16e      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	4b46      	ldr	r3, [pc, #280]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4940      	ldr	r1, [pc, #256]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_OscConfig+0x2b0>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fcc4 	bl	8000a24 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a0:	f7fe fcc0 	bl	8000a24 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e14d      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d030      	beq.n	800212c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d016      	beq.n	8002100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_OscConfig+0x2b4>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7fe fca4 	bl	8000a24 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e0:	f7fe fca0 	bl	8000a24 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e12d      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x200>
 80020fe:	e015      	b.n	800212c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_OscConfig+0x2b4>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002106:	f7fe fc8d 	bl	8000a24 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210e:	f7fe fc89 	bl	8000a24 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e116      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a0 	beq.w	800227a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10f      	bne.n	800216a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_RCC_OscConfig+0x2ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x2b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d121      	bne.n	80021ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCC_OscConfig+0x2b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a07      	ldr	r2, [pc, #28]	; (8002198 <HAL_RCC_OscConfig+0x2b8>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe fc4f 	bl	8000a24 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e011      	b.n	80021ae <HAL_RCC_OscConfig+0x2ce>
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	42470000 	.word	0x42470000
 8002194:	42470e80 	.word	0x42470e80
 8002198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219c:	f7fe fc42 	bl	8000a24 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0cf      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x478>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
 80021c2:	4b66      	ldr	r3, [pc, #408]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a65      	ldr	r2, [pc, #404]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	e01c      	b.n	800220a <HAL_RCC_OscConfig+0x32a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x312>
 80021d8:	4b60      	ldr	r3, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a5f      	ldr	r2, [pc, #380]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
 80021e4:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a5c      	ldr	r2, [pc, #368]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0x32a>
 80021f2:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a59      	ldr	r2, [pc, #356]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	4b57      	ldr	r3, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d015      	beq.n	800223e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7fe fc07 	bl	8000a24 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fc03 	bl	8000a24 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e08e      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b4a      	ldr	r3, [pc, #296]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCC_OscConfig+0x33a>
 800223c:	e014      	b.n	8002268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7fe fbf1 	bl	8000a24 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	e00a      	b.n	800225c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002246:	f7fe fbed 	bl	8000a24 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e078      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1ee      	bne.n	8002246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d105      	bne.n	800227a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	4a3a      	ldr	r2, [pc, #232]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 8002274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d064      	beq.n	800234c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d05c      	beq.n	8002348 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d141      	bne.n	800231a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_RCC_OscConfig+0x480>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fbc2 	bl	8000a24 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fbbe 	bl	8000a24 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04b      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	491d      	ldr	r1, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x480>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fb97 	bl	8000a24 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe fb93 	bl	8000a24 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e020      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x41a>
 8002318:	e018      	b.n	800234c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_RCC_OscConfig+0x480>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7fe fb80 	bl	8000a24 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fb7c 	bl	8000a24 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e009      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RCC_OscConfig+0x47c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x448>
 8002346:	e001      	b.n	800234c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40007000 	.word	0x40007000
 800235c:	40023800 	.word	0x40023800
 8002360:	42470060 	.word	0x42470060

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0ca      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b62      	ldr	r3, [pc, #392]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b6      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494c      	ldr	r1, [pc, #304]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07d      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06d      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e065      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4933      	ldr	r1, [pc, #204]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe fae6 	bl	8000a24 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe fae2 	bl	8000a24 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04d      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <HAL_RCC_ClockConfig+0x1b4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e030      	b.n	800250e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4915      	ldr	r1, [pc, #84]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490d      	ldr	r1, [pc, #52]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f81d 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024ee:	4601      	mov	r1, r0
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002506:	2000      	movs	r0, #0
 8002508:	f7fe fa48 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	0802e9e8 	.word	0x0802e9e8
 8002524:	20000018 	.word	0x20000018

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d007      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x32>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d008      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x38>
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 808d 	bne.w	800266e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002556:	60bb      	str	r3, [r7, #8]
       break;
 8002558:	e08c      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 800255c:	60bb      	str	r3, [r7, #8]
      break;
 800255e:	e089      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b42      	ldr	r3, [pc, #264]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	ea03 0501 	and.w	r5, r3, r1
 800258c:	ea04 0602 	and.w	r6, r4, r2
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 8002592:	fb02 f106 	mul.w	r1, r2, r6
 8002596:	2200      	movs	r2, #0
 8002598:	fb02 f205 	mul.w	r2, r2, r5
 800259c:	440a      	add	r2, r1
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 80025a0:	fba5 0101 	umull	r0, r1, r5, r1
 80025a4:	1853      	adds	r3, r2, r1
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f04f 0400 	mov.w	r4, #0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	f7fe f851 	bl	8000658 <__aeabi_uldivmod>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e049      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	f04f 0400 	mov.w	r4, #0
 80025c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	ea03 0501 	and.w	r5, r3, r1
 80025d4:	ea04 0602 	and.w	r6, r4, r2
 80025d8:	4629      	mov	r1, r5
 80025da:	4632      	mov	r2, r6
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	0154      	lsls	r4, r2, #5
 80025e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ea:	014b      	lsls	r3, r1, #5
 80025ec:	4619      	mov	r1, r3
 80025ee:	4622      	mov	r2, r4
 80025f0:	1b49      	subs	r1, r1, r5
 80025f2:	eb62 0206 	sbc.w	r2, r2, r6
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	0194      	lsls	r4, r2, #6
 8002600:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002604:	018b      	lsls	r3, r1, #6
 8002606:	1a5b      	subs	r3, r3, r1
 8002608:	eb64 0402 	sbc.w	r4, r4, r2
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800261a:	00d9      	lsls	r1, r3, #3
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	195b      	adds	r3, r3, r5
 8002622:	eb44 0406 	adc.w	r4, r4, r6
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	02a2      	lsls	r2, r4, #10
 8002630:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002634:	0299      	lsls	r1, r3, #10
 8002636:	460b      	mov	r3, r1
 8002638:	4614      	mov	r4, r2
 800263a:	4618      	mov	r0, r3
 800263c:	4621      	mov	r1, r4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f04f 0400 	mov.w	r4, #0
 8002644:	461a      	mov	r2, r3
 8002646:	4623      	mov	r3, r4
 8002648:	f7fe f806 	bl	8000658 <__aeabi_uldivmod>
 800264c:	4603      	mov	r3, r0
 800264e:	460c      	mov	r4, r1
 8002650:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	60bb      	str	r3, [r7, #8]
      break;
 800266c:	e002      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002670:	60bb      	str	r3, [r7, #8]
      break;
 8002672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000018 	.word	0x20000018

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	0802e9f8 	.word	0x0802e9f8

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffdc 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d4:	4601      	mov	r1, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0b5b      	lsrs	r3, r3, #13
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	0802e9f8 	.word	0x0802e9f8

080026f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e056      	b.n	80027b4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f004 fd9f 	bl	8007264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	ea42 0103 	orr.w	r1, r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 0104 	and.w	r1, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_SPI_Transmit+0x22>
 80027da:	2302      	movs	r3, #2
 80027dc:	e11e      	b.n	8002a1c <HAL_SPI_Transmit+0x260>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e6:	f7fe f91d 	bl	8000a24 <HAL_GetTick>
 80027ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d002      	beq.n	8002802 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002800:	e103      	b.n	8002a0a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_SPI_Transmit+0x52>
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002812:	e0fa      	b.n	8002a0a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2203      	movs	r2, #3
 8002818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285a:	d107      	bne.n	800286c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d007      	beq.n	800288a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002892:	d14b      	bne.n	800292c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_SPI_Transmit+0xe6>
 800289c:	8afb      	ldrh	r3, [r7, #22]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d13e      	bne.n	8002920 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	881a      	ldrh	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	1c9a      	adds	r2, r3, #2
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028c6:	e02b      	b.n	8002920 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d112      	bne.n	80028fc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	1c9a      	adds	r2, r3, #2
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80028fa:	e011      	b.n	8002920 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028fc:	f7fe f892 	bl	8000a24 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d803      	bhi.n	8002914 <HAL_SPI_Transmit+0x158>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d102      	bne.n	800291a <HAL_SPI_Transmit+0x15e>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800291e:	e074      	b.n	8002a0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1ce      	bne.n	80028c8 <HAL_SPI_Transmit+0x10c>
 800292a:	e04c      	b.n	80029c6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_Transmit+0x17e>
 8002934:	8afb      	ldrh	r3, [r7, #22]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d140      	bne.n	80029bc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	7812      	ldrb	r2, [r2, #0]
 8002946:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002960:	e02c      	b.n	80029bc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d113      	bne.n	8002998 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	86da      	strh	r2, [r3, #54]	; 0x36
 8002996:	e011      	b.n	80029bc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002998:	f7fe f844 	bl	8000a24 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d803      	bhi.n	80029b0 <HAL_SPI_Transmit+0x1f4>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_Transmit+0x1fa>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029ba:	e026      	b.n	8002a0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1cd      	bne.n	8002962 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	6839      	ldr	r1, [r7, #0]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f9b2 	bl	8002d34 <SPI_EndRxTxTransaction>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e000      	b.n	8002a0a <HAL_SPI_Transmit+0x24e>
  }

error:
 8002a08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
    return;
 8002a66:	e0d8      	b.n	8002c1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_SPI_IRQHandler+0x66>
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	09db      	lsrs	r3, r3, #7
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
    return;
 8002a88:	e0c7      	b.n	8002c1a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_SPI_IRQHandler+0x8c>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_SPI_IRQHandler+0x8c>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80b5 	beq.w	8002c1a <HAL_SPI_IRQHandler+0x1f6>
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80ae 	beq.w	8002c1a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d023      	beq.n	8002b12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d011      	beq.n	8002afa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	e00b      	b.n	8002b12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
        return;
 8002b10:	e083      	b.n	8002c1a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d014      	beq.n	8002b48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00c      	beq.n	8002b6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0208 	orr.w	r2, r3, #8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d050      	beq.n	8002c18 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_SPI_IRQHandler+0x17e>
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d034      	beq.n	8002c0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0203 	bic.w	r2, r2, #3
 8002bb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d011      	beq.n	8002bde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <HAL_SPI_IRQHandler+0x1fc>)
 8002bc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f875 	bl	8000cb6 <HAL_DMA_Abort_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bea:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_SPI_IRQHandler+0x1fc>)
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe f85f 	bl	8000cb6 <HAL_DMA_Abort_IT>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002c0a:	e003      	b.n	8002c14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f809 	bl	8002c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c12:	e000      	b.n	8002c16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002c14:	bf00      	nop
    return;
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
  }
}
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	08002c39 	.word	0x08002c39

08002c24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ffe6 	bl	8002c24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c70:	e04c      	b.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d048      	beq.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002c7a:	f7fd fed3 	bl	8000a24 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d902      	bls.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d13d      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca8:	d111      	bne.n	8002cce <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb2:	d004      	beq.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d107      	bne.n	8002cce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ccc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd6:	d10f      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e00f      	b.n	8002d2c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4013      	ands	r3, r2
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d1a3      	bne.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <SPI_EndRxTxTransaction+0x7c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <SPI_EndRxTxTransaction+0x80>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	0d5b      	lsrs	r3, r3, #21
 8002d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5e:	d112      	bne.n	8002d86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff78 	bl	8002c60 <SPI_WaitFlagStateUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e00f      	b.n	8002da6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d0f2      	beq.n	8002d86 <SPI_EndRxTxTransaction+0x52>
 8002da0:	e000      	b.n	8002da4 <SPI_EndRxTxTransaction+0x70>
        break;
 8002da2:	bf00      	nop
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000018 	.word	0x20000018
 8002db4:	165e9f81 	.word	0x165e9f81

08002db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01d      	b.n	8002e06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f004 faee 	bl	80073c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 fb38 	bl	800346c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d007      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e01d      	b.n	8002ea4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f004 fa61 	bl	8007344 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f000 fae9 	bl	800346c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	6839      	ldr	r1, [r7, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fd7a 	bl	80039b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_TIM_PWM_Start+0x60>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d107      	bne.n	8002ede <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d007      	beq.n	8002f00 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40010000 	.word	0x40010000

08002f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0202 	mvn.w	r2, #2
 8002f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa6b 	bl	800342e <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa5d 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fa6e 	bl	8003442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0204 	mvn.w	r2, #4
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa41 	bl	800342e <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fa33 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fa44 	bl	8003442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0208 	mvn.w	r2, #8
 8002fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa17 	bl	800342e <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa09 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa1a 	bl	8003442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b10      	cmp	r3, #16
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0210 	mvn.w	r2, #16
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2208      	movs	r2, #8
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f9ed 	bl	800342e <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9df 	bl	800341a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f9f0 	bl	8003442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d10e      	bne.n	8003094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0201 	mvn.w	r2, #1
 800308c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f002 fe8c 	bl	8005dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d107      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fd42 	bl	8003b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d107      	bne.n	80030ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f9b5 	bl	8003456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d10e      	bne.n	8003118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b20      	cmp	r3, #32
 8003106:	d107      	bne.n	8003118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0220 	mvn.w	r2, #32
 8003110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fd0c 	bl	8003b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003136:	2302      	movs	r3, #2
 8003138:	e0b4      	b.n	80032a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	f200 809f 	bhi.w	8003290 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800318d 	.word	0x0800318d
 800315c:	08003291 	.word	0x08003291
 8003160:	08003291 	.word	0x08003291
 8003164:	08003291 	.word	0x08003291
 8003168:	080031cd 	.word	0x080031cd
 800316c:	08003291 	.word	0x08003291
 8003170:	08003291 	.word	0x08003291
 8003174:	08003291 	.word	0x08003291
 8003178:	0800320f 	.word	0x0800320f
 800317c:	08003291 	.word	0x08003291
 8003180:	08003291 	.word	0x08003291
 8003184:	08003291 	.word	0x08003291
 8003188:	0800324f 	.word	0x0800324f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f9ea 	bl	800356c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0208 	orr.w	r2, r2, #8
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0204 	bic.w	r2, r2, #4
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	619a      	str	r2, [r3, #24]
      break;
 80031ca:	e062      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fa30 	bl	8003638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6999      	ldr	r1, [r3, #24]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	619a      	str	r2, [r3, #24]
      break;
 800320c:	e041      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fa7b 	bl	8003710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0208 	orr.w	r2, r2, #8
 8003228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0204 	bic.w	r2, r2, #4
 8003238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69d9      	ldr	r1, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
      break;
 800324c:	e021      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fac5 	bl	80037e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	021a      	lsls	r2, r3, #8
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	61da      	str	r2, [r3, #28]
      break;
 800328e:	e000      	b.n	8003292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003290:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_TIM_ConfigClockSource+0x18>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e0a6      	b.n	8003412 <HAL_TIM_ConfigClockSource+0x166>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d067      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x120>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d80b      	bhi.n	8003318 <HAL_TIM_ConfigClockSource+0x6c>
 8003300:	2b10      	cmp	r3, #16
 8003302:	d073      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0x140>
 8003304:	2b10      	cmp	r3, #16
 8003306:	d802      	bhi.n	800330e <HAL_TIM_ConfigClockSource+0x62>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d06f      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800330c:	e078      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800330e:	2b20      	cmp	r3, #32
 8003310:	d06c      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0x140>
 8003312:	2b30      	cmp	r3, #48	; 0x30
 8003314:	d06a      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003316:	e073      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003318:	2b70      	cmp	r3, #112	; 0x70
 800331a:	d00d      	beq.n	8003338 <HAL_TIM_ConfigClockSource+0x8c>
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d804      	bhi.n	800332a <HAL_TIM_ConfigClockSource+0x7e>
 8003320:	2b50      	cmp	r3, #80	; 0x50
 8003322:	d033      	beq.n	800338c <HAL_TIM_ConfigClockSource+0xe0>
 8003324:	2b60      	cmp	r3, #96	; 0x60
 8003326:	d041      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003328:	e06a      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800332a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332e:	d066      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0x152>
 8003330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003334:	d017      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003336:	e063      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f000 fb16 	bl	8003978 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800335a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]
      break;
 8003364:	e04c      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f000 faff 	bl	8003978 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003388:	609a      	str	r2, [r3, #8]
      break;
 800338a:	e039      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	461a      	mov	r2, r3
 800339a:	f000 fa73 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2150      	movs	r1, #80	; 0x50
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 facc 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 80033aa:	e029      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f000 fa92 	bl	80038e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2160      	movs	r1, #96	; 0x60
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fabc 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 80033ca:	e019      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	461a      	mov	r2, r3
 80033da:	f000 fa53 	bl	8003884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2140      	movs	r1, #64	; 0x40
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 faac 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 80033ea:	e009      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 faa3 	bl	8003942 <TIM_ITRx_SetConfig>
      break;
 80033fc:	e000      	b.n	8003400 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80033fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a34      	ldr	r2, [pc, #208]	; (8003550 <TIM_Base_SetConfig+0xe4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d00f      	beq.n	80034a4 <TIM_Base_SetConfig+0x38>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d00b      	beq.n	80034a4 <TIM_Base_SetConfig+0x38>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a31      	ldr	r2, [pc, #196]	; (8003554 <TIM_Base_SetConfig+0xe8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d007      	beq.n	80034a4 <TIM_Base_SetConfig+0x38>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a30      	ldr	r2, [pc, #192]	; (8003558 <TIM_Base_SetConfig+0xec>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d003      	beq.n	80034a4 <TIM_Base_SetConfig+0x38>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a2f      	ldr	r2, [pc, #188]	; (800355c <TIM_Base_SetConfig+0xf0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d108      	bne.n	80034b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a25      	ldr	r2, [pc, #148]	; (8003550 <TIM_Base_SetConfig+0xe4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01b      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c4:	d017      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a22      	ldr	r2, [pc, #136]	; (8003554 <TIM_Base_SetConfig+0xe8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <TIM_Base_SetConfig+0xec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00f      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <TIM_Base_SetConfig+0xf0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <TIM_Base_SetConfig+0xf4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <TIM_Base_SetConfig+0xf8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <TIM_Base_SetConfig+0xfc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <TIM_Base_SetConfig+0xe4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40014000 	.word	0x40014000
 8003564:	40014400 	.word	0x40014400
 8003568:	40014800 	.word	0x40014800

0800356c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <TIM_OC1_SetConfig+0xc8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d10c      	bne.n	80035e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 0308 	bic.w	r3, r3, #8
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a13      	ldr	r2, [pc, #76]	; (8003634 <TIM_OC1_SetConfig+0xc8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d111      	bne.n	800360e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	621a      	str	r2, [r3, #32]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40010000 	.word	0x40010000

08003638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f023 0210 	bic.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0320 	bic.w	r3, r3, #32
 8003682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <TIM_OC2_SetConfig+0xd4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10d      	bne.n	80036b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <TIM_OC2_SetConfig+0xd4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d113      	bne.n	80036e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000

08003710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <TIM_OC3_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10d      	bne.n	800378a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC3_SetConfig+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d113      	bne.n	80037ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40010000 	.word	0x40010000

080037e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a10      	ldr	r2, [pc, #64]	; (8003880 <TIM_OC4_SetConfig+0x9c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d109      	bne.n	8003858 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000

08003884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f023 030a 	bic.w	r3, r3, #10
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f023 0210 	bic.w	r2, r3, #16
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800390c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800391e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	f043 0307 	orr.w	r3, r3, #7
 8003964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	431a      	orrs	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	609a      	str	r2, [r3, #8]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	43db      	mvns	r3, r3
 80039da:	401a      	ands	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e032      	b.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a52:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e03d      	b.n	8003b24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e03f      	b.n	8003bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f003 fcc8 	bl	8007514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	; 0x24
 8003b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fb93 	bl	80042c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b088      	sub	sp, #32
 8003bf6:	af02      	add	r7, sp, #8
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	f040 8083 	bne.w	8003d1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_UART_Transmit+0x2e>
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e07b      	b.n	8003d1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Transmit+0x40>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e074      	b.n	8003d1c <HAL_UART_Transmit+0x12a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2221      	movs	r2, #33	; 0x21
 8003c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c48:	f7fc feec 	bl	8000a24 <HAL_GetTick>
 8003c4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	88fa      	ldrh	r2, [r7, #6]
 8003c58:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c5a:	e042      	b.n	8003ce2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c72:	d122      	bne.n	8003cba <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f9b6 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e046      	b.n	8003d1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	3302      	adds	r3, #2
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	e017      	b.n	8003ce2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	e013      	b.n	8003ce2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f993 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e023      	b.n	8003d1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	60ba      	str	r2, [r7, #8]
 8003cda:	781a      	ldrb	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1b7      	bne.n	8003c5c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f97a 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00a      	b.n	8003d1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d140      	bne.n	8003dc0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_UART_Receive_IT+0x26>
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e039      	b.n	8003dc2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Receive_IT+0x38>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e032      	b.n	8003dc2 <HAL_UART_Receive_IT+0x9e>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	88fa      	ldrh	r2, [r7, #6]
 8003d74:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2222      	movs	r2, #34	; 0x22
 8003d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0220 	orr.w	r2, r2, #32
 8003dba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
  }
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_UART_IRQHandler+0x52>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9d2 	bl	80041c4 <UART_Receive_IT>
      return;
 8003e20:	e0cc      	b.n	8003fbc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80ab 	beq.w	8003f80 <HAL_UART_IRQHandler+0x1b0>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <HAL_UART_IRQHandler+0x70>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80a0 	beq.w	8003f80 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_UART_IRQHandler+0x90>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_UART_IRQHandler+0xb0>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	f043 0202 	orr.w	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_UART_IRQHandler+0xd0>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	f043 0204 	orr.w	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xf0>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	f043 0208 	orr.w	r2, r3, #8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d078      	beq.n	8003fba <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x112>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f971 	bl	80041c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_UART_IRQHandler+0x13a>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d031      	beq.n	8003f6e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8ba 	bl	8004084 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d123      	bne.n	8003f66 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <HAL_UART_IRQHandler+0x1f4>)
 8003f3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc feb7 	bl	8000cb6 <HAL_DMA_Abort_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00e      	b.n	8003f7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f83c 	bl	8003fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e00a      	b.n	8003f7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f838 	bl	8003fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f834 	bl	8003fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f7a:	e01e      	b.n	8003fba <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	bf00      	nop
    return;
 8003f7e:	e01c      	b.n	8003fba <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_UART_IRQHandler+0x1cc>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8a7 	bl	80040e8 <UART_Transmit_IT>
    return;
 8003f9a:	e00f      	b.n	8003fbc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_UART_IRQHandler+0x1ec>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8ef 	bl	8004194 <UART_EndTransmit_IT>
    return;
 8003fb6:	bf00      	nop
 8003fb8:	e000      	b.n	8003fbc <HAL_UART_IRQHandler+0x1ec>
    return;
 8003fba:	bf00      	nop
  }
}
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	080040c1 	.word	0x080040c1

08003fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	e02c      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d028      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <UART_WaitOnFlagUntilTimeout+0x30>
 8004010:	f7fc fd08 	bl	8000a24 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	429a      	cmp	r2, r3
 800401e:	d21d      	bcs.n	800405c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800402e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e00f      	b.n	800407c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	d0c3      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800409a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff ff7e 	bl	8003fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b21      	cmp	r3, #33	; 0x21
 80040fa:	d144      	bne.n	8004186 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004104:	d11a      	bne.n	800413c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d105      	bne.n	8004130 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	621a      	str	r2, [r3, #32]
 800412e:	e00e      	b.n	800414e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]
 800413a:	e008      	b.n	800414e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	1c59      	adds	r1, r3, #1
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6211      	str	r1, [r2, #32]
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29b      	uxth	r3, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4619      	mov	r1, r3
 800415c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10f      	bne.n	8004182 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004170:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004180:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004186:	2302      	movs	r3, #2
  }
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff07 	bl	8003fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b22      	cmp	r3, #34	; 0x22
 80041d6:	d171      	bne.n	80042bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d123      	bne.n	800422a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10e      	bne.n	800420e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
 800420c:	e029      	b.n	8004262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b29b      	uxth	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
 8004228:	e01b      	b.n	8004262 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6858      	ldr	r0, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	1c59      	adds	r1, r3, #1
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6291      	str	r1, [r2, #40]	; 0x28
 8004242:	b2c2      	uxtb	r2, r0
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e00c      	b.n	8004262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	1c58      	adds	r0, r3, #1
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	6288      	str	r0, [r1, #40]	; 0x28
 800425a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29b      	uxth	r3, r3
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4619      	mov	r1, r3
 8004270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004272:	2b00      	cmp	r3, #0
 8004274:	d120      	bne.n	80042b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0220 	bic.w	r2, r2, #32
 8004284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fcb0 	bl	8004c14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e002      	b.n	80042be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c8:	b5b0      	push	{r4, r5, r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004308:	f023 030c 	bic.w	r3, r3, #12
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	68f9      	ldr	r1, [r7, #12]
 8004312:	430b      	orrs	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004334:	f040 80e4 	bne.w	8004500 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4aab      	ldr	r2, [pc, #684]	; (80045ec <UART_SetConfig+0x324>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <UART_SetConfig+0x84>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4aaa      	ldr	r2, [pc, #680]	; (80045f0 <UART_SetConfig+0x328>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d16c      	bne.n	8004426 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800434c:	f7fe f9be 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8004350:	4602      	mov	r2, r0
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009a      	lsls	r2, r3, #2
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fbb2 f3f3 	udiv	r3, r2, r3
 8004366:	4aa3      	ldr	r2, [pc, #652]	; (80045f4 <UART_SetConfig+0x32c>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	011c      	lsls	r4, r3, #4
 8004370:	f7fe f9ac 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8004374:	4602      	mov	r2, r0
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009a      	lsls	r2, r3, #2
 800437e:	441a      	add	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	fbb2 f5f3 	udiv	r5, r2, r3
 800438a:	f7fe f99f 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 800438e:	4602      	mov	r2, r0
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009a      	lsls	r2, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	4a93      	ldr	r2, [pc, #588]	; (80045f4 <UART_SetConfig+0x32c>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2264      	movs	r2, #100	; 0x64
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	1aeb      	subs	r3, r5, r3
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	3332      	adds	r3, #50	; 0x32
 80043b8:	4a8e      	ldr	r2, [pc, #568]	; (80045f4 <UART_SetConfig+0x32c>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043c6:	441c      	add	r4, r3
 80043c8:	f7fe f980 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009a      	lsls	r2, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fbb2 f5f3 	udiv	r5, r2, r3
 80043e2:	f7fe f973 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	009a      	lsls	r2, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	4a7d      	ldr	r2, [pc, #500]	; (80045f4 <UART_SetConfig+0x32c>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2264      	movs	r2, #100	; 0x64
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	1aeb      	subs	r3, r5, r3
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a78      	ldr	r2, [pc, #480]	; (80045f4 <UART_SetConfig+0x32c>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 0207 	and.w	r2, r3, #7
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4422      	add	r2, r4
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	e154      	b.n	80046d0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004426:	f7fe f93d 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800442a:	4602      	mov	r2, r0
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a6c      	ldr	r2, [pc, #432]	; (80045f4 <UART_SetConfig+0x32c>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	011c      	lsls	r4, r3, #4
 800444a:	f7fe f92b 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800444e:	4602      	mov	r2, r0
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009a      	lsls	r2, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fbb2 f5f3 	udiv	r5, r2, r3
 8004464:	f7fe f91e 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8004468:	4602      	mov	r2, r0
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009a      	lsls	r2, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <UART_SetConfig+0x32c>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	2264      	movs	r2, #100	; 0x64
 8004488:	fb02 f303 	mul.w	r3, r2, r3
 800448c:	1aeb      	subs	r3, r5, r3
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	3332      	adds	r3, #50	; 0x32
 8004492:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <UART_SetConfig+0x32c>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044a0:	441c      	add	r4, r3
 80044a2:	f7fe f8ff 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009a      	lsls	r2, r3, #2
 80044b0:	441a      	add	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80044bc:	f7fe f8f2 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009a      	lsls	r2, r3, #2
 80044ca:	441a      	add	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d6:	4a47      	ldr	r2, [pc, #284]	; (80045f4 <UART_SetConfig+0x32c>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	2264      	movs	r2, #100	; 0x64
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
 80044e4:	1aeb      	subs	r3, r5, r3
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	3332      	adds	r3, #50	; 0x32
 80044ea:	4a42      	ldr	r2, [pc, #264]	; (80045f4 <UART_SetConfig+0x32c>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	f003 0207 	and.w	r2, r3, #7
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4422      	add	r2, r4
 80044fc:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80044fe:	e0e7      	b.n	80046d0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a39      	ldr	r2, [pc, #228]	; (80045ec <UART_SetConfig+0x324>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <UART_SetConfig+0x24c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a38      	ldr	r2, [pc, #224]	; (80045f0 <UART_SetConfig+0x328>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d171      	bne.n	80045f8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004514:	f7fe f8da 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8004518:	4602      	mov	r2, r0
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009a      	lsls	r2, r3, #2
 8004522:	441a      	add	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <UART_SetConfig+0x32c>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	011c      	lsls	r4, r3, #4
 8004538:	f7fe f8c8 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 800453c:	4602      	mov	r2, r0
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009a      	lsls	r2, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004552:	f7fe f8bb 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8004556:	4602      	mov	r2, r0
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <UART_SetConfig+0x32c>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2264      	movs	r2, #100	; 0x64
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	1aeb      	subs	r3, r5, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <UART_SetConfig+0x32c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458c:	441c      	add	r4, r3
 800458e:	f7fe f89d 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8004592:	4602      	mov	r2, r0
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	009a      	lsls	r2, r3, #2
 800459c:	441a      	add	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80045a8:	f7fe f890 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009a      	lsls	r2, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <UART_SetConfig+0x32c>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	2264      	movs	r2, #100	; 0x64
 80045cc:	fb02 f303 	mul.w	r3, r2, r3
 80045d0:	1aeb      	subs	r3, r5, r3
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	3332      	adds	r3, #50	; 0x32
 80045d6:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <UART_SetConfig+0x32c>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4422      	add	r2, r4
 80045e8:	609a      	str	r2, [r3, #8]
 80045ea:	e071      	b.n	80046d0 <UART_SetConfig+0x408>
 80045ec:	40011000 	.word	0x40011000
 80045f0:	40011400 	.word	0x40011400
 80045f4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80045f8:	f7fe f854 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009a      	lsls	r2, r3, #2
 8004606:	441a      	add	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <UART_SetConfig+0x410>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	011c      	lsls	r4, r3, #4
 800461c:	f7fe f842 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8004620:	4602      	mov	r2, r0
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009a      	lsls	r2, r3, #2
 800462a:	441a      	add	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	fbb2 f5f3 	udiv	r5, r2, r3
 8004636:	f7fe f835 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800463a:	4602      	mov	r2, r0
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <UART_SetConfig+0x410>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	2264      	movs	r2, #100	; 0x64
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	1aeb      	subs	r3, r5, r3
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	3332      	adds	r3, #50	; 0x32
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <UART_SetConfig+0x410>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004670:	441c      	add	r4, r3
 8004672:	f7fe f817 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8004676:	4602      	mov	r2, r0
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009a      	lsls	r2, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	fbb2 f5f3 	udiv	r5, r2, r3
 800468c:	f7fe f80a 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8004690:	4602      	mov	r2, r0
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009a      	lsls	r2, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <UART_SetConfig+0x410>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2264      	movs	r2, #100	; 0x64
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	1aeb      	subs	r3, r5, r3
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <UART_SetConfig+0x410>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4422      	add	r2, r4
 80046cc:	609a      	str	r2, [r3, #8]
}
 80046ce:	e7ff      	b.n	80046d0 <UART_SetConfig+0x408>
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bdb0      	pop	{r4, r5, r7, pc}
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <fan_init>:
 * f(STM32F4) = 84MHz ; f(PWM) = 10KHz ; Counter Period = 100 -> Prescaler = 84MHz/(10KHz*100) = 84
 * 
 */
#include "fan.h"

void fan_init(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b092      	sub	sp, #72	; 0x48
 80046e0:	af00      	add	r7, sp, #0
  //Copy from CubeMX
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
 80046fc:	615a      	str	r2, [r3, #20]
 80046fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	2220      	movs	r2, #32
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f003 fff8 	bl	80086fc <memset>

  htim1.Instance = TIM1;
 800470c:	4b40      	ldr	r3, [pc, #256]	; (8004810 <fan_init+0x134>)
 800470e:	4a41      	ldr	r2, [pc, #260]	; (8004814 <fan_init+0x138>)
 8004710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 8004712:	4b3f      	ldr	r3, [pc, #252]	; (8004810 <fan_init+0x134>)
 8004714:	2254      	movs	r2, #84	; 0x54
 8004716:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004718:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <fan_init+0x134>)
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800471e:	4b3c      	ldr	r3, [pc, #240]	; (8004810 <fan_init+0x134>)
 8004720:	2264      	movs	r2, #100	; 0x64
 8004722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004724:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <fan_init+0x134>)
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <fan_init+0x134>)
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004730:	4b37      	ldr	r3, [pc, #220]	; (8004810 <fan_init+0x134>)
 8004732:	2200      	movs	r2, #0
 8004734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004736:	4836      	ldr	r0, [pc, #216]	; (8004810 <fan_init+0x134>)
 8004738:	f7fe fb8d 	bl	8002e56 <HAL_TIM_PWM_Init>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <fan_init+0x6a>
  {
    Error_Handler();
 8004742:	f001 fe55 	bl	80063f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800474a:	2300      	movs	r3, #0
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800474e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004752:	4619      	mov	r1, r3
 8004754:	482e      	ldr	r0, [pc, #184]	; (8004810 <fan_init+0x134>)
 8004756:	f7ff f954 	bl	8003a02 <HAL_TIMEx_MasterConfigSynchronization>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <fan_init+0x88>
  {
    Error_Handler();
 8004760:	f001 fe46 	bl	80063f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004764:	2360      	movs	r3, #96	; 0x60
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800476c:	2300      	movs	r3, #0
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004770:	2300      	movs	r3, #0
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004778:	2300      	movs	r3, #0
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800477c:	2300      	movs	r3, #0
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004784:	2200      	movs	r2, #0
 8004786:	4619      	mov	r1, r3
 8004788:	4821      	ldr	r0, [pc, #132]	; (8004810 <fan_init+0x134>)
 800478a:	f7fe fcc9 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <fan_init+0xbc>
  {
    Error_Handler();
 8004794:	f001 fe2c 	bl	80063f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479c:	220c      	movs	r2, #12
 800479e:	4619      	mov	r1, r3
 80047a0:	481b      	ldr	r0, [pc, #108]	; (8004810 <fan_init+0x134>)
 80047a2:	f7fe fcbd 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <fan_init+0xd4>
  {
    Error_Handler();
 80047ac:	f001 fe20 	bl	80063f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	480f      	ldr	r0, [pc, #60]	; (8004810 <fan_init+0x134>)
 80047d4:	f7ff f95a 	bl	8003a8c <HAL_TIMEx_ConfigBreakDeadTime>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <fan_init+0x106>
  {
    Error_Handler();
 80047de:	f001 fe07 	bl	80063f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80047e2:	480b      	ldr	r0, [pc, #44]	; (8004810 <fan_init+0x134>)
 80047e4:	f002 fe12 	bl	800740c <HAL_TIM_MspPostInit>
  //End copy from CubeMX
  
  /* PWM1 and PWM2 set */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80047e8:	2100      	movs	r1, #0
 80047ea:	4809      	ldr	r0, [pc, #36]	; (8004810 <fan_init+0x134>)
 80047ec:	f7fe fb5e 	bl	8002eac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80047f0:	210c      	movs	r1, #12
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <fan_init+0x134>)
 80047f4:	f7fe fb5a 	bl	8002eac <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);	// 0/100
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <fan_init+0x134>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);	// 0/100
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <fan_init+0x134>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2200      	movs	r2, #0
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004808:	bf00      	nop
 800480a:	3748      	adds	r7, #72	; 0x48
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	20000514 	.word	0x20000514
 8004814:	40010000 	.word	0x40010000

08004818 <fan_1_run>:
void fan_1_stop(){
//  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); dau ra bi floating point
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);	//Do thiet ke mach dang de keo len
}

void fan_1_run(uint8_t level){
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if(level > 100) level = 100;
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d901      	bls.n	800482c <fan_1_run+0x14>
 8004828:	2364      	movs	r3, #100	; 0x64
 800482a:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100 - level);
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8004832:	4b04      	ldr	r3, [pc, #16]	; (8004844 <fan_1_run+0x2c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	20000514 	.word	0x20000514

08004848 <fan_2_run>:
void fan_2_stop(){
//	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
}

void fan_2_run(uint8_t level){
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100 - level);
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <fan_2_run+0x24>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20000514 	.word	0x20000514

08004870 <main>:
int nightmode ;
int filmode;
int ctrmode;
bool huong;
int main(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004876:	f7fc f86f 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800487a:	f001 fac5 	bl	8005e08 <SystemClock_Config>

  /* Khởi tạo sử dụng các chân ngoại vi */

  MX_GPIO_Init();
 800487e:	f001 fd3b 	bl	80062f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004882:	f001 fb2b 	bl	8005edc <MX_I2C1_Init>
  MX_SPI2_Init();
 8004886:	f001 fb57 	bl	8005f38 <MX_SPI2_Init>
  MX_TIM1_Init();
 800488a:	f001 fb8b 	bl	8005fa4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800488e:	f001 fc17 	bl	80060c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004892:	f001 fca3 	bl	80061dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8004896:	f001 fd05 	bl	80062a4 <MX_USART1_UART_Init>
  sensirion_i2c_init();
 800489a:	f001 ff93 	bl	80067c4 <sensirion_i2c_init>
  tft_init();
 800489e:	f003 f817 	bl	80078d0 <tft_init>
  fan_init();
 80048a2:	f7ff ff1b 	bl	80046dc <fan_init>
  tft_puts_image(vht1);
 80048a6:	48a4      	ldr	r0, [pc, #656]	; (8004b38 <main+0x2c8>)
 80048a8:	f003 fbac 	bl	8008004 <tft_puts_image>
  HAL_Delay(3000);
 80048ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80048b0:	f7fc f8c4 	bl	8000a3c <HAL_Delay>
  tft_fill(0,0,320,240,BLACK);
 80048b4:	2300      	movs	r3, #0
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	23f0      	movs	r3, #240	; 0xf0
 80048ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80048be:	2100      	movs	r1, #0
 80048c0:	2000      	movs	r0, #0
 80048c2:	f003 fb13 	bl	8007eec <tft_fill>
  POINT_COLOR=CYAN;
 80048c6:	4b9d      	ldr	r3, [pc, #628]	; (8004b3c <main+0x2cc>)
 80048c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80048cc:	801a      	strh	r2, [r3, #0]
  tft_puts26x48(58,3,(int8_t*)" Viettel",TFT_STRING_MODE_NO_BACKGROUND);
 80048ce:	2301      	movs	r3, #1
 80048d0:	4a9b      	ldr	r2, [pc, #620]	; (8004b40 <main+0x2d0>)
 80048d2:	2103      	movs	r1, #3
 80048d4:	203a      	movs	r0, #58	; 0x3a
 80048d6:	f003 fa01 	bl	8007cdc <tft_puts26x48>
  tft_puts26x48(58,5,(int8_t*)" Viettel",TFT_STRING_MODE_NO_BACKGROUND);
 80048da:	2301      	movs	r3, #1
 80048dc:	4a98      	ldr	r2, [pc, #608]	; (8004b40 <main+0x2d0>)
 80048de:	2105      	movs	r1, #5
 80048e0:	203a      	movs	r0, #58	; 0x3a
 80048e2:	f003 f9fb 	bl	8007cdc <tft_puts26x48>
  tft_puts18x32(114,3,(int8_t*)"   MEDICAL",TFT_STRING_MODE_NO_BACKGROUND);
 80048e6:	2301      	movs	r3, #1
 80048e8:	4a96      	ldr	r2, [pc, #600]	; (8004b44 <main+0x2d4>)
 80048ea:	2103      	movs	r1, #3
 80048ec:	2072      	movs	r0, #114	; 0x72
 80048ee:	f003 f9b7 	bl	8007c60 <tft_puts18x32>
  tft_puts18x32(160,3,(int8_t*)"   PRODUCTS",TFT_STRING_MODE_NO_BACKGROUND);
 80048f2:	2301      	movs	r3, #1
 80048f4:	4a94      	ldr	r2, [pc, #592]	; (8004b48 <main+0x2d8>)
 80048f6:	2103      	movs	r1, #3
 80048f8:	20a0      	movs	r0, #160	; 0xa0
 80048fa:	f003 f9b1 	bl	8007c60 <tft_puts18x32>
  HAL_Delay(3000);
 80048fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004902:	f7fc f89b 	bl	8000a3c <HAL_Delay>
  tft_fill(0,0,320,240,BLACK);
 8004906:	2300      	movs	r3, #0
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	23f0      	movs	r3, #240	; 0xf0
 800490c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004910:	2100      	movs	r1, #0
 8004912:	2000      	movs	r0, #0
 8004914:	f003 faea 	bl	8007eec <tft_fill>
  /* UART */
  HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8004918:	2201      	movs	r2, #1
 800491a:	498c      	ldr	r1, [pc, #560]	; (8004b4c <main+0x2dc>)
 800491c:	488c      	ldr	r0, [pc, #560]	; (8004b50 <main+0x2e0>)
 800491e:	f7ff fa01 	bl	8003d24 <HAL_UART_Receive_IT>
   ret = sps30_start_measurement();
 8004922:	f002 f8c4 	bl	8006aae <sps30_start_measurement>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
 800492a:	4b8a      	ldr	r3, [pc, #552]	; (8004b54 <main+0x2e4>)
 800492c:	801a      	strh	r2, [r3, #0]
   err = sgp30_iaq_init();
 800492e:	f002 f854 	bl	80069da <sgp30_iaq_init>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <main+0x2e8>)
 8004938:	801a      	strh	r2, [r3, #0]
    if (ret < 0){
   	  //error
    }
    /* Code khởi tạo chế độ ban đầu */
    // set PWM cho tốc độ động cơ quạt là trung bình
    speed = med;
 800493a:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <main+0x2ec>)
 800493c:	2202      	movs	r2, #2
 800493e:	601a      	str	r2, [r3, #0]
    power = Power_On;
 8004940:	4b87      	ldr	r3, [pc, #540]	; (8004b60 <main+0x2f0>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
    ctrmode = Manual;
 8004946:	4b87      	ldr	r3, [pc, #540]	; (8004b64 <main+0x2f4>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    filmode = Fresh_Air;
 800494c:	4b86      	ldr	r3, [pc, #536]	; (8004b68 <main+0x2f8>)
 800494e:	2201      	movs	r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    nightmode = Nightmode_Off;
 8004952:	4b86      	ldr	r3, [pc, #536]	; (8004b6c <main+0x2fc>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
    //FormInterface();
    //tft_puts14x24(220,100,(int8_t*)"MEDIUM",TFT_STRING_MODE_BACKGROUND);
    //tft_puts14x24(260,100,(int8_t*)"FRESH_AIR     ",TFT_STRING_MODE_BACKGROUND);
    //tft_puts14x24(240,160,(int8_t*)"ON        ",TFT_STRING_MODE_BACKGROUND);
    BACK_COLOR=BLACK;
 8004958:	4b85      	ldr	r3, [pc, #532]	; (8004b70 <main+0x300>)
 800495a:	2200      	movs	r2, #0
 800495c:	801a      	strh	r2, [r3, #0]
   	POINT_COLOR=RED;
 800495e:	4b77      	ldr	r3, [pc, #476]	; (8004b3c <main+0x2cc>)
 8004960:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004964:	801a      	strh	r2, [r3, #0]
   	//tft_puts14x24(200,100,(int8_t*)"ON  ",TFT_STRING_MODE_BACKGROUND);
   	//tft_puts14x24(280,150,(int8_t*)"MANUAL   ",TFT_STRING_MODE_BACKGROUND);

    // Mở van hoạt động ở chế độ trao đổi khí tươi
   	fan_1_run(medspeed);
 8004966:	2028      	movs	r0, #40	; 0x28
 8004968:	f7ff ff56 	bl	8004818 <fan_1_run>
   	fan_2_run(medspeed);
 800496c:	2028      	movs	r0, #40	; 0x28
 800496e:	f7ff ff6b 	bl	8004848 <fan_2_run>

   	test:
	tft_fill2(1,1,320,240,BLACK);
 8004972:	2300      	movs	r3, #0
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	23f0      	movs	r3, #240	; 0xf0
 8004978:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800497c:	2101      	movs	r1, #1
 800497e:	2001      	movs	r0, #1
 8004980:	f003 fafa 	bl	8007f78 <tft_fill2>
	IAQcolor();
 8004984:	f000 fffe 	bl	8005984 <IAQcolor>
	IAQform();
 8004988:	f001 f9d2 	bl	8005d30 <IAQform>
	HAL_TIM_Base_Start_IT(&htim2);
 800498c:	4879      	ldr	r0, [pc, #484]	; (8004b74 <main+0x304>)
 800498e:	f7fe fa3e 	bl	8002e0e <HAL_TIM_Base_Start_IT>

	/* Đọc trạng thái chân từ động cơ PWM và Động cơ van điều khiển */
	  	  //code đọc trạng thái từ các chân động cơ
	  // Sau khi đọc trạng thái là code gửi dữ liệu lên LCD
	  // Gán biến để gửi lên APP
	  	  	  ret = sps30_read_measurement(&m);
 8004992:	4879      	ldr	r0, [pc, #484]	; (8004b78 <main+0x308>)
 8004994:	f002 f8a3 	bl	8006ade <sps30_read_measurement>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <main+0x2e4>)
 800499e:	801a      	strh	r2, [r3, #0]
	 			  if (ret < 0) {
 80049a0:	4b6c      	ldr	r3, [pc, #432]	; (8004b54 <main+0x2e4>)
 80049a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da04      	bge.n	80049b4 <main+0x144>
	 				 PM25 = PM25;
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <main+0x30c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a73      	ldr	r2, [pc, #460]	; (8004b7c <main+0x30c>)
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e003      	b.n	80049bc <main+0x14c>
	 							  //error
	 			  } else {
	 				 PM25 = m.mc_2p5;
 80049b4:	4b70      	ldr	r3, [pc, #448]	; (8004b78 <main+0x308>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a70      	ldr	r2, [pc, #448]	; (8004b7c <main+0x30c>)
 80049ba:	6013      	str	r3, [r2, #0]
	 			  }
	 			  err = svm_measure_iaq_blocking_read(&tvoc_ppb, &co2_ppm, &temperature, &humidity);
 80049bc:	4b70      	ldr	r3, [pc, #448]	; (8004b80 <main+0x310>)
 80049be:	4a71      	ldr	r2, [pc, #452]	; (8004b84 <main+0x314>)
 80049c0:	4971      	ldr	r1, [pc, #452]	; (8004b88 <main+0x318>)
 80049c2:	4872      	ldr	r0, [pc, #456]	; (8004b8c <main+0x31c>)
 80049c4:	f002 feeb 	bl	800779e <svm_measure_iaq_blocking_read>
 80049c8:	4603      	mov	r3, r0
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <main+0x2e8>)
 80049ce:	801a      	strh	r2, [r3, #0]

	 			  if (err == STATUS_OK) {
 80049d0:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <main+0x2e8>)
 80049d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00f      	beq.n	80049fa <main+0x18a>
	 					//lay thanh cong
	 			  } else {
	 					co2_ppm = co2_ppm;
 80049da:	4b6b      	ldr	r3, [pc, #428]	; (8004b88 <main+0x318>)
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <main+0x318>)
 80049e0:	801a      	strh	r2, [r3, #0]
	 					temperature = temperature;
 80049e2:	4b68      	ldr	r3, [pc, #416]	; (8004b84 <main+0x314>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a67      	ldr	r2, [pc, #412]	; (8004b84 <main+0x314>)
 80049e8:	6013      	str	r3, [r2, #0]
	 					humidity = humidity;
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <main+0x310>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a64      	ldr	r2, [pc, #400]	; (8004b80 <main+0x310>)
 80049f0:	6013      	str	r3, [r2, #0]
	 					tvoc_ppb = tvoc_ppb;
 80049f2:	4b66      	ldr	r3, [pc, #408]	; (8004b8c <main+0x31c>)
 80049f4:	881a      	ldrh	r2, [r3, #0]
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <main+0x31c>)
 80049f8:	801a      	strh	r2, [r3, #0]
	 					//khong the doc tu cam bien
	 			  }
    /*code đọc tín hiệu từ ESP gửi qua UART*/
	  CheckUART(); //ham này nhận lệnh từ ESP để điều khiển động co và update trạng thái lên server
 80049fa:	f000 fce7 	bl	80053cc <CheckUART>
    /* END UART */
	  count++;
 80049fe:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <main+0x320>)
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	4b62      	ldr	r3, [pc, #392]	; (8004b90 <main+0x320>)
 8004a08:	801a      	strh	r2, [r3, #0]
	  sprintf(buffer5,"%d.%d",tmpIntPM1,tmpIntPM2);
 8004a0a:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <main+0x324>)
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <main+0x328>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4962      	ldr	r1, [pc, #392]	; (8004b9c <main+0x32c>)
 8004a14:	4862      	ldr	r0, [pc, #392]	; (8004ba0 <main+0x330>)
 8004a16:	f003 fe79 	bl	800870c <siprintf>

	  FormInterface();
 8004a1a:	f001 f811 	bl	8005a40 <FormInterface>
	  if (count <= 100 && FLAG==0){
 8004a1e:	4b5c      	ldr	r3, [pc, #368]	; (8004b90 <main+0x320>)
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d813      	bhi.n	8004a4e <main+0x1de>
 8004a26:	4b5f      	ldr	r3, [pc, #380]	; (8004ba4 <main+0x334>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <main+0x1de>
			FLAG=1;
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <main+0x334>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 8004a34:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <main+0x338>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 8004a3a:	4b5c      	ldr	r3, [pc, #368]	; (8004bac <main+0x33c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 8004a40:	4b5b      	ldr	r3, [pc, #364]	; (8004bb0 <main+0x340>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 8004a46:	4b5b      	ldr	r3, [pc, #364]	; (8004bb4 <main+0x344>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]

			goto test;
 8004a4c:	e791      	b.n	8004972 <main+0x102>
		}
		else if(count > 100 && count <= 200 && FLAG1==0){
 8004a4e:	4b50      	ldr	r3, [pc, #320]	; (8004b90 <main+0x320>)
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d917      	bls.n	8004a86 <main+0x216>
 8004a56:	4b4e      	ldr	r3, [pc, #312]	; (8004b90 <main+0x320>)
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	2bc8      	cmp	r3, #200	; 0xc8
 8004a5c:	d813      	bhi.n	8004a86 <main+0x216>
 8004a5e:	4b52      	ldr	r3, [pc, #328]	; (8004ba8 <main+0x338>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <main+0x216>
			FLAG=0;
 8004a66:	4b4f      	ldr	r3, [pc, #316]	; (8004ba4 <main+0x334>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
			FLAG1=1;
 8004a6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <main+0x338>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 8004a72:	4b4e      	ldr	r3, [pc, #312]	; (8004bac <main+0x33c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <main+0x340>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 8004a7e:	4b4d      	ldr	r3, [pc, #308]	; (8004bb4 <main+0x344>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
			goto test;
 8004a84:	e775      	b.n	8004972 <main+0x102>
		}
		else if(count > 200 && count <= 300 && FLAG2==0){
 8004a86:	4b42      	ldr	r3, [pc, #264]	; (8004b90 <main+0x320>)
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	2bc8      	cmp	r3, #200	; 0xc8
 8004a8c:	d918      	bls.n	8004ac0 <main+0x250>
 8004a8e:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <main+0x320>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004a96:	d813      	bhi.n	8004ac0 <main+0x250>
 8004a98:	4b44      	ldr	r3, [pc, #272]	; (8004bac <main+0x33c>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10f      	bne.n	8004ac0 <main+0x250>
			FLAG=0;
 8004aa0:	4b40      	ldr	r3, [pc, #256]	; (8004ba4 <main+0x334>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 8004aa6:	4b40      	ldr	r3, [pc, #256]	; (8004ba8 <main+0x338>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
			FLAG2=1;
 8004aac:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <main+0x33c>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <main+0x340>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <main+0x344>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
			goto test;
 8004abe:	e758      	b.n	8004972 <main+0x102>
		}
		else if(count > 300 && count <= 400 && FLAG3==0){
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <main+0x320>)
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004ac8:	d918      	bls.n	8004afc <main+0x28c>
 8004aca:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <main+0x320>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004ad2:	d813      	bhi.n	8004afc <main+0x28c>
 8004ad4:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <main+0x340>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <main+0x28c>
			FLAG=0;
 8004adc:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <main+0x334>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 8004ae2:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <main+0x338>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 8004ae8:	4b30      	ldr	r3, [pc, #192]	; (8004bac <main+0x33c>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
			FLAG3=1;
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <main+0x340>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
			FLAG4=0;
 8004af4:	4b2f      	ldr	r3, [pc, #188]	; (8004bb4 <main+0x344>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
			goto test;
 8004afa:	e73a      	b.n	8004972 <main+0x102>
		}
		else if(count > 400 && count <= 500 && FLAG4==0){
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <main+0x320>)
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004b04:	d958      	bls.n	8004bb8 <main+0x348>
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <main+0x320>)
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b0e:	d853      	bhi.n	8004bb8 <main+0x348>
 8004b10:	4b28      	ldr	r3, [pc, #160]	; (8004bb4 <main+0x344>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d14f      	bne.n	8004bb8 <main+0x348>
			FLAG=0;
 8004b18:	4b22      	ldr	r3, [pc, #136]	; (8004ba4 <main+0x334>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
			FLAG1=0;
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <main+0x338>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
			FLAG2=0;
 8004b24:	4b21      	ldr	r3, [pc, #132]	; (8004bac <main+0x33c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
			FLAG3=0;
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <main+0x340>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
			FLAG4=1;
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <main+0x344>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]
			goto test;
 8004b36:	e71c      	b.n	8004972 <main+0x102>
 8004b38:	080091c0 	.word	0x080091c0
 8004b3c:	2000089a 	.word	0x2000089a
 8004b40:	08009040 	.word	0x08009040
 8004b44:	0800904c 	.word	0x0800904c
 8004b48:	08009058 	.word	0x08009058
 8004b4c:	2000021c 	.word	0x2000021c
 8004b50:	20000294 	.word	0x20000294
 8004b54:	20000868 	.word	0x20000868
 8004b58:	200004f4 	.word	0x200004f4
 8004b5c:	200005f4 	.word	0x200005f4
 8004b60:	200001c4 	.word	0x200001c4
 8004b64:	20000224 	.word	0x20000224
 8004b68:	20000894 	.word	0x20000894
 8004b6c:	200004f0 	.word	0x200004f0
 8004b70:	20000898 	.word	0x20000898
 8004b74:	200007f8 	.word	0x200007f8
 8004b78:	2000086c 	.word	0x2000086c
 8004b7c:	200000a8 	.word	0x200000a8
 8004b80:	20000010 	.word	0x20000010
 8004b84:	2000000c 	.word	0x2000000c
 8004b88:	20000008 	.word	0x20000008
 8004b8c:	20000006 	.word	0x20000006
 8004b90:	2000009c 	.word	0x2000009c
 8004b94:	20000864 	.word	0x20000864
 8004b98:	2000026c 	.word	0x2000026c
 8004b9c:	08009064 	.word	0x08009064
 8004ba0:	200004f8 	.word	0x200004f8
 8004ba4:	200000a0 	.word	0x200000a0
 8004ba8:	200000a1 	.word	0x200000a1
 8004bac:	200000a2 	.word	0x200000a2
 8004bb0:	200000a3 	.word	0x200000a3
 8004bb4:	200000a4 	.word	0x200000a4
		}
	  if (count > 500){
 8004bb8:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <main+0x398>)
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bc0:	d902      	bls.n	8004bc8 <main+0x358>
			count = 0;
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <main+0x398>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	801a      	strh	r2, [r3, #0]
		}
	  //----------------------
	  if (Vanst == 1 ) {
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <main+0x39c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d108      	bne.n	8004be2 <main+0x372>
		huong = true;
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	; (8004c10 <main+0x3a0>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
		turnOn();
 8004bd6:	f002 f9c9 	bl	8006f6c <turnOn>
		Vanst = 3;
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <main+0x39c>)
 8004bdc:	2203      	movs	r2, #3
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e00b      	b.n	8004bfa <main+0x38a>
	  }
	  else if (Vanst == 0){
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <main+0x39c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d107      	bne.n	8004bfa <main+0x38a>
		 huong = false;
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <main+0x3a0>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
		 turnOn();
 8004bf0:	f002 f9bc 	bl	8006f6c <turnOn>
		 Vanst = 3;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <main+0x39c>)
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	601a      	str	r2, [r3, #0]
	  }
	  miniStep(huong);  // 80ms 1500/80= 18
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <main+0x3a0>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f002 f9c0 	bl	8006f84 <miniStep>
  {
 8004c04:	e6c5      	b.n	8004992 <main+0x122>
 8004c06:	bf00      	nop
 8004c08:	2000009c 	.word	0x2000009c
 8004c0c:	200000f0 	.word	0x200000f0
 8004c10:	20000164 	.word	0x20000164

08004c14 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}
/* USER CODE FOR UART*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    uint8_t i;
    if (huart->Instance == USART1)  //Xét UART nhận dữ liệu
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <HAL_UART_RxCpltCallback+0x78>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d12d      	bne.n	8004c82 <HAL_UART_RxCpltCallback+0x6e>
        {
        if (Rx_indx==0 && Transfer_cplt==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}   //clear Rx_buffer trước khi nhận dữ liệu mới
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <HAL_UART_RxCpltCallback+0x7c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d110      	bne.n	8004c50 <HAL_UART_RxCpltCallback+0x3c>
 8004c2e:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_UART_RxCpltCallback+0x80>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10c      	bne.n	8004c50 <HAL_UART_RxCpltCallback+0x3c>
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	e006      	b.n	8004c4a <HAL_UART_RxCpltCallback+0x36>
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_UART_RxCpltCallback+0x84>)
 8004c40:	2100      	movs	r1, #0
 8004c42:	54d1      	strb	r1, [r2, r3]
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	3301      	adds	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b63      	cmp	r3, #99	; 0x63
 8004c4e:	d9f5      	bls.n	8004c3c <HAL_UART_RxCpltCallback+0x28>

        if (Rx_data[0]!='\n') //Nếu nhận dữ liệu là khác dấu xuống dòng
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_UART_RxCpltCallback+0x88>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b0a      	cmp	r3, #10
 8004c56:	d009      	beq.n	8004c6c <HAL_UART_RxCpltCallback+0x58>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];    //thêm dữ liệu vào Rx_Buffer
 8004c58:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <HAL_UART_RxCpltCallback+0x7c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	490c      	ldr	r1, [pc, #48]	; (8004c90 <HAL_UART_RxCpltCallback+0x7c>)
 8004c60:	600a      	str	r2, [r1, #0]
 8004c62:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <HAL_UART_RxCpltCallback+0x88>)
 8004c64:	7811      	ldrb	r1, [r2, #0]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <HAL_UART_RxCpltCallback+0x84>)
 8004c68:	54d1      	strb	r1, [r2, r3]
 8004c6a:	e005      	b.n	8004c78 <HAL_UART_RxCpltCallback+0x64>
            }
        else            //nếu là dấu xuống dòng \n thì hoàn thành việc đọc 1 khung truyền
            {
            Rx_indx=0;
 8004c6c:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_UART_RxCpltCallback+0x7c>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
            Transfer_cplt=1;//Cờ báo hiệu đã chuyển dữ liệu xong và tiến hành đọc dữ liệu
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_UART_RxCpltCallback+0x80>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
            }

        HAL_UART_Receive_IT(&huart1, Rx_data, 1);   //Kích hoạt ngắt UART mỗi data nhận được
 8004c78:	2201      	movs	r2, #1
 8004c7a:	4908      	ldr	r1, [pc, #32]	; (8004c9c <HAL_UART_RxCpltCallback+0x88>)
 8004c7c:	4808      	ldr	r0, [pc, #32]	; (8004ca0 <HAL_UART_RxCpltCallback+0x8c>)
 8004c7e:	f7ff f851 	bl	8003d24 <HAL_UART_Receive_IT>
        }

}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	200000ac 	.word	0x200000ac
 8004c94:	20000165 	.word	0x20000165
 8004c98:	20000554 	.word	0x20000554
 8004c9c:	2000021c 	.word	0x2000021c
 8004ca0:	20000294 	.word	0x20000294

08004ca4 <Convertvalue>:

/* Hàm chuyển đổi giá trị của giá trị float PM2.5, nhiệt độ, độ ẩm để đưa vào khung truyền UART */
void Convertvalue(void){
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0

	PM25 = 22.33;
 8004caa:	4b61      	ldr	r3, [pc, #388]	; (8004e30 <Convertvalue+0x18c>)
 8004cac:	4a61      	ldr	r2, [pc, #388]	; (8004e34 <Convertvalue+0x190>)
 8004cae:	601a      	str	r2, [r3, #0]
	tmpIntPM1 = (int)PM25;
 8004cb0:	4b5f      	ldr	r3, [pc, #380]	; (8004e30 <Convertvalue+0x18c>)
 8004cb2:	edd3 7a00 	vldr	s15, [r3]
 8004cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cba:	ee17 2a90 	vmov	r2, s15
 8004cbe:	4b5e      	ldr	r3, [pc, #376]	; (8004e38 <Convertvalue+0x194>)
 8004cc0:	601a      	str	r2, [r3, #0]
	float tmpFPM = PM25 - tmpIntPM1;
 8004cc2:	4b5b      	ldr	r3, [pc, #364]	; (8004e30 <Convertvalue+0x18c>)
 8004cc4:	ed93 7a00 	vldr	s14, [r3]
 8004cc8:	4b5b      	ldr	r3, [pc, #364]	; (8004e38 <Convertvalue+0x194>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd8:	edc7 7a03 	vstr	s15, [r7, #12]
	tmpIntPM2 = trunc(tmpFPM * 100);
 8004cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ce0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004e3c <Convertvalue+0x198>
 8004ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce8:	ee17 0a90 	vmov	r0, s15
 8004cec:	f7fb fc34 	bl	8000558 <__aeabi_f2d>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	ec44 3b10 	vmov	d0, r3, r4
 8004cf8:	f004 f95c 	bl	8008fb4 <trunc>
 8004cfc:	ec54 3b10 	vmov	r3, r4, d0
 8004d00:	4618      	mov	r0, r3
 8004d02:	4621      	mov	r1, r4
 8004d04:	f7fb fc80 	bl	8000608 <__aeabi_d2iz>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <Convertvalue+0x19c>)
 8004d0c:	601a      	str	r2, [r3, #0]
	//temperature = 54321;
	temp = (float)(temperature/1000.0f);
 8004d0e:	4b4d      	ldr	r3, [pc, #308]	; (8004e44 <Convertvalue+0x1a0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d1a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8004e48 <Convertvalue+0x1a4>
 8004d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d22:	4b4a      	ldr	r3, [pc, #296]	; (8004e4c <Convertvalue+0x1a8>)
 8004d24:	edc3 7a00 	vstr	s15, [r3]
	tmpIntte1 = (int)temp;
 8004d28:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <Convertvalue+0x1a8>)
 8004d2a:	edd3 7a00 	vldr	s15, [r3]
 8004d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d32:	ee17 2a90 	vmov	r2, s15
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <Convertvalue+0x1ac>)
 8004d38:	601a      	str	r2, [r3, #0]
	float tmpT = temp - tmpIntte1;
 8004d3a:	4b44      	ldr	r3, [pc, #272]	; (8004e4c <Convertvalue+0x1a8>)
 8004d3c:	ed93 7a00 	vldr	s14, [r3]
 8004d40:	4b43      	ldr	r3, [pc, #268]	; (8004e50 <Convertvalue+0x1ac>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d50:	edc7 7a02 	vstr	s15, [r7, #8]
	tmpIntte2 = trunc(tmpT * 100);
 8004d54:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004e3c <Convertvalue+0x198>
 8004d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d60:	ee17 0a90 	vmov	r0, s15
 8004d64:	f7fb fbf8 	bl	8000558 <__aeabi_f2d>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	ec44 3b10 	vmov	d0, r3, r4
 8004d70:	f004 f920 	bl	8008fb4 <trunc>
 8004d74:	ec54 3b10 	vmov	r3, r4, d0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	f7fb fc44 	bl	8000608 <__aeabi_d2iz>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <Convertvalue+0x1b0>)
 8004d84:	601a      	str	r2, [r3, #0]
	//humidity = 67890;
	hum = (float)(humidity/1000.0f);
 8004d86:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <Convertvalue+0x1b4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d92:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004e48 <Convertvalue+0x1a4>
 8004d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <Convertvalue+0x1b8>)
 8004d9c:	edc3 7a00 	vstr	s15, [r3]
	tmpInthu1 = (int) hum;
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <Convertvalue+0x1b8>)
 8004da2:	edd3 7a00 	vldr	s15, [r3]
 8004da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004daa:	ee17 2a90 	vmov	r2, s15
 8004dae:	4b2c      	ldr	r3, [pc, #176]	; (8004e60 <Convertvalue+0x1bc>)
 8004db0:	601a      	str	r2, [r3, #0]
	float tmpH = hum - tmpInthu1;
 8004db2:	4b2a      	ldr	r3, [pc, #168]	; (8004e5c <Convertvalue+0x1b8>)
 8004db4:	ed93 7a00 	vldr	s14, [r3]
 8004db8:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <Convertvalue+0x1bc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dc8:	edc7 7a01 	vstr	s15, [r7, #4]
	tmpInthu2 = trunc(tmpH * 100);
 8004dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dd0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004e3c <Convertvalue+0x198>
 8004dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd8:	ee17 0a90 	vmov	r0, s15
 8004ddc:	f7fb fbbc 	bl	8000558 <__aeabi_f2d>
 8004de0:	4603      	mov	r3, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	ec44 3b10 	vmov	d0, r3, r4
 8004de8:	f004 f8e4 	bl	8008fb4 <trunc>
 8004dec:	ec54 3b10 	vmov	r3, r4, d0
 8004df0:	4618      	mov	r0, r3
 8004df2:	4621      	mov	r1, r4
 8004df4:	f7fb fc08 	bl	8000608 <__aeabi_d2iz>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <Convertvalue+0x1c0>)
 8004dfc:	601a      	str	r2, [r3, #0]
	PM25 = PM25+10;
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <Convertvalue+0x18c>)
 8004e00:	edd3 7a00 	vldr	s15, [r3]
 8004e04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004e08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <Convertvalue+0x18c>)
 8004e0e:	edc3 7a00 	vstr	s15, [r3]
	temperature = temperature + 10;
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <Convertvalue+0x1a0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330a      	adds	r3, #10
 8004e18:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <Convertvalue+0x1a0>)
 8004e1a:	6013      	str	r3, [r2, #0]
	humidity = humidity + 10;
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <Convertvalue+0x1b4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330a      	adds	r3, #10
 8004e22:	4a0d      	ldr	r2, [pc, #52]	; (8004e58 <Convertvalue+0x1b4>)
 8004e24:	6013      	str	r3, [r2, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200000a8 	.word	0x200000a8
 8004e34:	41b2a3d7 	.word	0x41b2a3d7
 8004e38:	20000864 	.word	0x20000864
 8004e3c:	42c80000 	.word	0x42c80000
 8004e40:	2000026c 	.word	0x2000026c
 8004e44:	2000000c 	.word	0x2000000c
 8004e48:	447a0000 	.word	0x447a0000
 8004e4c:	20000220 	.word	0x20000220
 8004e50:	20000268 	.word	0x20000268
 8004e54:	200004ec 	.word	0x200004ec
 8004e58:	20000010 	.word	0x20000010
 8004e5c:	20000160 	.word	0x20000160
 8004e60:	20000270 	.word	0x20000270
 8004e64:	20000510 	.word	0x20000510

08004e68 <FrameUART>:
/* Tạo Khung truyền với các giá trị lấy từ cảm biến và động cơ */
void FrameUART(void){
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
		itoa(tmpIntte1,(char*)tempe1,10);
 8004e6c:	4bbc      	ldr	r3, [pc, #752]	; (8005160 <FrameUART+0x2f8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	220a      	movs	r2, #10
 8004e72:	49bc      	ldr	r1, [pc, #752]	; (8005164 <FrameUART+0x2fc>)
 8004e74:	4618      	mov	r0, r3
 8004e76:	f003 fc3f 	bl	80086f8 <itoa>
		itoa(tmpIntte2,(char*)tempe2,10);
 8004e7a:	4bbb      	ldr	r3, [pc, #748]	; (8005168 <FrameUART+0x300>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	220a      	movs	r2, #10
 8004e80:	49ba      	ldr	r1, [pc, #744]	; (800516c <FrameUART+0x304>)
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 fc38 	bl	80086f8 <itoa>
		itoa(tmpInthu1,(char*)humi1,10);
 8004e88:	4bb9      	ldr	r3, [pc, #740]	; (8005170 <FrameUART+0x308>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	220a      	movs	r2, #10
 8004e8e:	49b9      	ldr	r1, [pc, #740]	; (8005174 <FrameUART+0x30c>)
 8004e90:	4618      	mov	r0, r3
 8004e92:	f003 fc31 	bl	80086f8 <itoa>
		itoa(tmpInthu2,(char*)humi2,10);
 8004e96:	4bb8      	ldr	r3, [pc, #736]	; (8005178 <FrameUART+0x310>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	220a      	movs	r2, #10
 8004e9c:	49b7      	ldr	r1, [pc, #732]	; (800517c <FrameUART+0x314>)
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 fc2a 	bl	80086f8 <itoa>
		itoa(co2_ppm,(char*)CO2,10);
 8004ea4:	4bb6      	ldr	r3, [pc, #728]	; (8005180 <FrameUART+0x318>)
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	220a      	movs	r2, #10
 8004eaa:	49b6      	ldr	r1, [pc, #728]	; (8005184 <FrameUART+0x31c>)
 8004eac:	4618      	mov	r0, r3
 8004eae:	f003 fc23 	bl	80086f8 <itoa>
		itoa(tvoc_ppb,(char*)VOC,10);
 8004eb2:	4bb5      	ldr	r3, [pc, #724]	; (8005188 <FrameUART+0x320>)
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	49b4      	ldr	r1, [pc, #720]	; (800518c <FrameUART+0x324>)
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 fc1c 	bl	80086f8 <itoa>
		itoa(tmpIntPM1,(char*)PM251,10);
 8004ec0:	4bb3      	ldr	r3, [pc, #716]	; (8005190 <FrameUART+0x328>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	220a      	movs	r2, #10
 8004ec6:	49b3      	ldr	r1, [pc, #716]	; (8005194 <FrameUART+0x32c>)
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f003 fc15 	bl	80086f8 <itoa>
		itoa(tmpIntPM2,(char*)PM252,10);
 8004ece:	4bb2      	ldr	r3, [pc, #712]	; (8005198 <FrameUART+0x330>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	49b1      	ldr	r1, [pc, #708]	; (800519c <FrameUART+0x334>)
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 fc0e 	bl	80086f8 <itoa>

	   strcpy((char *) frame, (char *) "TE");
 8004edc:	4bb0      	ldr	r3, [pc, #704]	; (80051a0 <FrameUART+0x338>)
 8004ede:	4ab1      	ldr	r2, [pc, #708]	; (80051a4 <FrameUART+0x33c>)
 8004ee0:	8811      	ldrh	r1, [r2, #0]
 8004ee2:	7892      	ldrb	r2, [r2, #2]
 8004ee4:	8019      	strh	r1, [r3, #0]
 8004ee6:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame,(char *) tempe1);
 8004ee8:	499e      	ldr	r1, [pc, #632]	; (8005164 <FrameUART+0x2fc>)
 8004eea:	48ad      	ldr	r0, [pc, #692]	; (80051a0 <FrameUART+0x338>)
 8004eec:	f003 fc2e 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8004ef0:	48ab      	ldr	r0, [pc, #684]	; (80051a0 <FrameUART+0x338>)
 8004ef2:	f7fb f975 	bl	80001e0 <strlen>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4ba9      	ldr	r3, [pc, #676]	; (80051a0 <FrameUART+0x338>)
 8004efc:	4413      	add	r3, r2
 8004efe:	49aa      	ldr	r1, [pc, #680]	; (80051a8 <FrameUART+0x340>)
 8004f00:	461a      	mov	r2, r3
 8004f02:	460b      	mov	r3, r1
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "A");
 8004f08:	48a5      	ldr	r0, [pc, #660]	; (80051a0 <FrameUART+0x338>)
 8004f0a:	f7fb f969 	bl	80001e0 <strlen>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	461a      	mov	r2, r3
 8004f12:	4ba3      	ldr	r3, [pc, #652]	; (80051a0 <FrameUART+0x338>)
 8004f14:	4413      	add	r3, r2
 8004f16:	49a5      	ldr	r1, [pc, #660]	; (80051ac <FrameUART+0x344>)
 8004f18:	461a      	mov	r2, r3
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame,(char *) tempe2);
 8004f20:	4992      	ldr	r1, [pc, #584]	; (800516c <FrameUART+0x304>)
 8004f22:	489f      	ldr	r0, [pc, #636]	; (80051a0 <FrameUART+0x338>)
 8004f24:	f003 fc12 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8004f28:	489d      	ldr	r0, [pc, #628]	; (80051a0 <FrameUART+0x338>)
 8004f2a:	f7fb f959 	bl	80001e0 <strlen>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	461a      	mov	r2, r3
 8004f32:	4b9b      	ldr	r3, [pc, #620]	; (80051a0 <FrameUART+0x338>)
 8004f34:	4413      	add	r3, r2
 8004f36:	499c      	ldr	r1, [pc, #624]	; (80051a8 <FrameUART+0x340>)
 8004f38:	461a      	mov	r2, r3
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "HU");
 8004f40:	4897      	ldr	r0, [pc, #604]	; (80051a0 <FrameUART+0x338>)
 8004f42:	f7fb f94d 	bl	80001e0 <strlen>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b95      	ldr	r3, [pc, #596]	; (80051a0 <FrameUART+0x338>)
 8004f4c:	4413      	add	r3, r2
 8004f4e:	4a98      	ldr	r2, [pc, #608]	; (80051b0 <FrameUART+0x348>)
 8004f50:	8811      	ldrh	r1, [r2, #0]
 8004f52:	7892      	ldrb	r2, [r2, #2]
 8004f54:	8019      	strh	r1, [r3, #0]
 8004f56:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) humi1 );
 8004f58:	4986      	ldr	r1, [pc, #536]	; (8005174 <FrameUART+0x30c>)
 8004f5a:	4891      	ldr	r0, [pc, #580]	; (80051a0 <FrameUART+0x338>)
 8004f5c:	f003 fbf6 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8004f60:	488f      	ldr	r0, [pc, #572]	; (80051a0 <FrameUART+0x338>)
 8004f62:	f7fb f93d 	bl	80001e0 <strlen>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4b8d      	ldr	r3, [pc, #564]	; (80051a0 <FrameUART+0x338>)
 8004f6c:	4413      	add	r3, r2
 8004f6e:	498e      	ldr	r1, [pc, #568]	; (80051a8 <FrameUART+0x340>)
 8004f70:	461a      	mov	r2, r3
 8004f72:	460b      	mov	r3, r1
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "Q");
 8004f78:	4889      	ldr	r0, [pc, #548]	; (80051a0 <FrameUART+0x338>)
 8004f7a:	f7fb f931 	bl	80001e0 <strlen>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	461a      	mov	r2, r3
 8004f82:	4b87      	ldr	r3, [pc, #540]	; (80051a0 <FrameUART+0x338>)
 8004f84:	4413      	add	r3, r2
 8004f86:	498b      	ldr	r1, [pc, #556]	; (80051b4 <FrameUART+0x34c>)
 8004f88:	461a      	mov	r2, r3
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) humi2 );
 8004f90:	497a      	ldr	r1, [pc, #488]	; (800517c <FrameUART+0x314>)
 8004f92:	4883      	ldr	r0, [pc, #524]	; (80051a0 <FrameUART+0x338>)
 8004f94:	f003 fbda 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8004f98:	4881      	ldr	r0, [pc, #516]	; (80051a0 <FrameUART+0x338>)
 8004f9a:	f7fb f921 	bl	80001e0 <strlen>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4b7f      	ldr	r3, [pc, #508]	; (80051a0 <FrameUART+0x338>)
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4980      	ldr	r1, [pc, #512]	; (80051a8 <FrameUART+0x340>)
 8004fa8:	461a      	mov	r2, r3
 8004faa:	460b      	mov	r3, r1
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "CO");
 8004fb0:	487b      	ldr	r0, [pc, #492]	; (80051a0 <FrameUART+0x338>)
 8004fb2:	f7fb f915 	bl	80001e0 <strlen>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4b79      	ldr	r3, [pc, #484]	; (80051a0 <FrameUART+0x338>)
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4a7e      	ldr	r2, [pc, #504]	; (80051b8 <FrameUART+0x350>)
 8004fc0:	8811      	ldrh	r1, [r2, #0]
 8004fc2:	7892      	ldrb	r2, [r2, #2]
 8004fc4:	8019      	strh	r1, [r3, #0]
 8004fc6:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) CO2 );
 8004fc8:	496e      	ldr	r1, [pc, #440]	; (8005184 <FrameUART+0x31c>)
 8004fca:	4875      	ldr	r0, [pc, #468]	; (80051a0 <FrameUART+0x338>)
 8004fcc:	f003 fbbe 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8004fd0:	4873      	ldr	r0, [pc, #460]	; (80051a0 <FrameUART+0x338>)
 8004fd2:	f7fb f905 	bl	80001e0 <strlen>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4b71      	ldr	r3, [pc, #452]	; (80051a0 <FrameUART+0x338>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	4972      	ldr	r1, [pc, #456]	; (80051a8 <FrameUART+0x340>)
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "VO");
 8004fe8:	486d      	ldr	r0, [pc, #436]	; (80051a0 <FrameUART+0x338>)
 8004fea:	f7fb f8f9 	bl	80001e0 <strlen>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b6b      	ldr	r3, [pc, #428]	; (80051a0 <FrameUART+0x338>)
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4a71      	ldr	r2, [pc, #452]	; (80051bc <FrameUART+0x354>)
 8004ff8:	8811      	ldrh	r1, [r2, #0]
 8004ffa:	7892      	ldrb	r2, [r2, #2]
 8004ffc:	8019      	strh	r1, [r3, #0]
 8004ffe:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) VOC );
 8005000:	4962      	ldr	r1, [pc, #392]	; (800518c <FrameUART+0x324>)
 8005002:	4867      	ldr	r0, [pc, #412]	; (80051a0 <FrameUART+0x338>)
 8005004:	f003 fba2 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005008:	4865      	ldr	r0, [pc, #404]	; (80051a0 <FrameUART+0x338>)
 800500a:	f7fb f8e9 	bl	80001e0 <strlen>
 800500e:	4603      	mov	r3, r0
 8005010:	461a      	mov	r2, r3
 8005012:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <FrameUART+0x338>)
 8005014:	4413      	add	r3, r2
 8005016:	4964      	ldr	r1, [pc, #400]	; (80051a8 <FrameUART+0x340>)
 8005018:	461a      	mov	r2, r3
 800501a:	460b      	mov	r3, r1
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "PM");
 8005020:	485f      	ldr	r0, [pc, #380]	; (80051a0 <FrameUART+0x338>)
 8005022:	f7fb f8dd 	bl	80001e0 <strlen>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	4b5d      	ldr	r3, [pc, #372]	; (80051a0 <FrameUART+0x338>)
 800502c:	4413      	add	r3, r2
 800502e:	4a64      	ldr	r2, [pc, #400]	; (80051c0 <FrameUART+0x358>)
 8005030:	8811      	ldrh	r1, [r2, #0]
 8005032:	7892      	ldrb	r2, [r2, #2]
 8005034:	8019      	strh	r1, [r3, #0]
 8005036:	709a      	strb	r2, [r3, #2]
	   strcat((char *) frame, (char *) PM251 );
 8005038:	4956      	ldr	r1, [pc, #344]	; (8005194 <FrameUART+0x32c>)
 800503a:	4859      	ldr	r0, [pc, #356]	; (80051a0 <FrameUART+0x338>)
 800503c:	f003 fb86 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005040:	4857      	ldr	r0, [pc, #348]	; (80051a0 <FrameUART+0x338>)
 8005042:	f7fb f8cd 	bl	80001e0 <strlen>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	4b55      	ldr	r3, [pc, #340]	; (80051a0 <FrameUART+0x338>)
 800504c:	4413      	add	r3, r2
 800504e:	4956      	ldr	r1, [pc, #344]	; (80051a8 <FrameUART+0x340>)
 8005050:	461a      	mov	r2, r3
 8005052:	460b      	mov	r3, r1
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "S");
 8005058:	4851      	ldr	r0, [pc, #324]	; (80051a0 <FrameUART+0x338>)
 800505a:	f7fb f8c1 	bl	80001e0 <strlen>
 800505e:	4603      	mov	r3, r0
 8005060:	461a      	mov	r2, r3
 8005062:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <FrameUART+0x338>)
 8005064:	4413      	add	r3, r2
 8005066:	4957      	ldr	r1, [pc, #348]	; (80051c4 <FrameUART+0x35c>)
 8005068:	461a      	mov	r2, r3
 800506a:	460b      	mov	r3, r1
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) PM252 );
 8005070:	494a      	ldr	r1, [pc, #296]	; (800519c <FrameUART+0x334>)
 8005072:	484b      	ldr	r0, [pc, #300]	; (80051a0 <FrameUART+0x338>)
 8005074:	f003 fb6a 	bl	800874c <strcat>
	   strcat((char *) frame, (char *) ":");
 8005078:	4849      	ldr	r0, [pc, #292]	; (80051a0 <FrameUART+0x338>)
 800507a:	f7fb f8b1 	bl	80001e0 <strlen>
 800507e:	4603      	mov	r3, r0
 8005080:	461a      	mov	r2, r3
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <FrameUART+0x338>)
 8005084:	4413      	add	r3, r2
 8005086:	4948      	ldr	r1, [pc, #288]	; (80051a8 <FrameUART+0x340>)
 8005088:	461a      	mov	r2, r3
 800508a:	460b      	mov	r3, r1
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "PO");
 8005090:	4843      	ldr	r0, [pc, #268]	; (80051a0 <FrameUART+0x338>)
 8005092:	f7fb f8a5 	bl	80001e0 <strlen>
 8005096:	4603      	mov	r3, r0
 8005098:	461a      	mov	r2, r3
 800509a:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <FrameUART+0x338>)
 800509c:	4413      	add	r3, r2
 800509e:	4a4a      	ldr	r2, [pc, #296]	; (80051c8 <FrameUART+0x360>)
 80050a0:	8811      	ldrh	r1, [r2, #0]
 80050a2:	7892      	ldrb	r2, [r2, #2]
 80050a4:	8019      	strh	r1, [r3, #0]
 80050a6:	709a      	strb	r2, [r3, #2]
	   if (power == 1)
 80050a8:	4b48      	ldr	r3, [pc, #288]	; (80051cc <FrameUART+0x364>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10c      	bne.n	80050ca <FrameUART+0x262>
	   strcat((char *) frame, (char *) "1" );
 80050b0:	483b      	ldr	r0, [pc, #236]	; (80051a0 <FrameUART+0x338>)
 80050b2:	f7fb f895 	bl	80001e0 <strlen>
 80050b6:	4603      	mov	r3, r0
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <FrameUART+0x338>)
 80050bc:	4413      	add	r3, r2
 80050be:	4944      	ldr	r1, [pc, #272]	; (80051d0 <FrameUART+0x368>)
 80050c0:	461a      	mov	r2, r3
 80050c2:	460b      	mov	r3, r1
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	8013      	strh	r3, [r2, #0]
 80050c8:	e00f      	b.n	80050ea <FrameUART+0x282>
	   else if (power == 0)
 80050ca:	4b40      	ldr	r3, [pc, #256]	; (80051cc <FrameUART+0x364>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <FrameUART+0x282>
	   strcat((char *) frame, (char *) "0" );
 80050d2:	4833      	ldr	r0, [pc, #204]	; (80051a0 <FrameUART+0x338>)
 80050d4:	f7fb f884 	bl	80001e0 <strlen>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <FrameUART+0x338>)
 80050de:	4413      	add	r3, r2
 80050e0:	493c      	ldr	r1, [pc, #240]	; (80051d4 <FrameUART+0x36c>)
 80050e2:	461a      	mov	r2, r3
 80050e4:	460b      	mov	r3, r1
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) ":");
 80050ea:	482d      	ldr	r0, [pc, #180]	; (80051a0 <FrameUART+0x338>)
 80050ec:	f7fb f878 	bl	80001e0 <strlen>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <FrameUART+0x338>)
 80050f6:	4413      	add	r3, r2
 80050f8:	492b      	ldr	r1, [pc, #172]	; (80051a8 <FrameUART+0x340>)
 80050fa:	461a      	mov	r2, r3
 80050fc:	460b      	mov	r3, r1
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "SP");
 8005102:	4827      	ldr	r0, [pc, #156]	; (80051a0 <FrameUART+0x338>)
 8005104:	f7fb f86c 	bl	80001e0 <strlen>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <FrameUART+0x338>)
 800510e:	4413      	add	r3, r2
 8005110:	4a31      	ldr	r2, [pc, #196]	; (80051d8 <FrameUART+0x370>)
 8005112:	8811      	ldrh	r1, [r2, #0]
 8005114:	7892      	ldrb	r2, [r2, #2]
 8005116:	8019      	strh	r1, [r3, #0]
 8005118:	709a      	strb	r2, [r3, #2]
	   if(speed == 0)
 800511a:	4b30      	ldr	r3, [pc, #192]	; (80051dc <FrameUART+0x374>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10c      	bne.n	800513c <FrameUART+0x2d4>
		   strcat((char *) frame, (char *) "0" );
 8005122:	481f      	ldr	r0, [pc, #124]	; (80051a0 <FrameUART+0x338>)
 8005124:	f7fb f85c 	bl	80001e0 <strlen>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <FrameUART+0x338>)
 800512e:	4413      	add	r3, r2
 8005130:	4928      	ldr	r1, [pc, #160]	; (80051d4 <FrameUART+0x36c>)
 8005132:	461a      	mov	r2, r3
 8005134:	460b      	mov	r3, r1
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	8013      	strh	r3, [r2, #0]
 800513a:	e072      	b.n	8005222 <FrameUART+0x3ba>
	   else if(speed == 1)
 800513c:	4b27      	ldr	r3, [pc, #156]	; (80051dc <FrameUART+0x374>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d14d      	bne.n	80051e0 <FrameUART+0x378>
		   strcat((char *) frame, (char *) "1" );
 8005144:	4816      	ldr	r0, [pc, #88]	; (80051a0 <FrameUART+0x338>)
 8005146:	f7fb f84b 	bl	80001e0 <strlen>
 800514a:	4603      	mov	r3, r0
 800514c:	461a      	mov	r2, r3
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <FrameUART+0x338>)
 8005150:	4413      	add	r3, r2
 8005152:	491f      	ldr	r1, [pc, #124]	; (80051d0 <FrameUART+0x368>)
 8005154:	461a      	mov	r2, r3
 8005156:	460b      	mov	r3, r1
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	8013      	strh	r3, [r2, #0]
 800515c:	e061      	b.n	8005222 <FrameUART+0x3ba>
 800515e:	bf00      	nop
 8005160:	20000268 	.word	0x20000268
 8005164:	200000b0 	.word	0x200000b0
 8005168:	200004ec 	.word	0x200004ec
 800516c:	200000b8 	.word	0x200000b8
 8005170:	20000270 	.word	0x20000270
 8005174:	200000c0 	.word	0x200000c0
 8005178:	20000510 	.word	0x20000510
 800517c:	200000c8 	.word	0x200000c8
 8005180:	20000008 	.word	0x20000008
 8005184:	200000d0 	.word	0x200000d0
 8005188:	20000006 	.word	0x20000006
 800518c:	200000d8 	.word	0x200000d8
 8005190:	20000864 	.word	0x20000864
 8005194:	200000e0 	.word	0x200000e0
 8005198:	2000026c 	.word	0x2000026c
 800519c:	200000e8 	.word	0x200000e8
 80051a0:	20000590 	.word	0x20000590
 80051a4:	0800906c 	.word	0x0800906c
 80051a8:	08009070 	.word	0x08009070
 80051ac:	08009074 	.word	0x08009074
 80051b0:	08009078 	.word	0x08009078
 80051b4:	0800907c 	.word	0x0800907c
 80051b8:	08009080 	.word	0x08009080
 80051bc:	08009084 	.word	0x08009084
 80051c0:	08009088 	.word	0x08009088
 80051c4:	0800908c 	.word	0x0800908c
 80051c8:	08009090 	.word	0x08009090
 80051cc:	200001c4 	.word	0x200001c4
 80051d0:	08009094 	.word	0x08009094
 80051d4:	08009098 	.word	0x08009098
 80051d8:	0800909c 	.word	0x0800909c
 80051dc:	200005f4 	.word	0x200005f4
	   else if(speed == 2)
 80051e0:	4b6c      	ldr	r3, [pc, #432]	; (8005394 <FrameUART+0x52c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d10c      	bne.n	8005202 <FrameUART+0x39a>
		   strcat((char *) frame, (char *) "2" );
 80051e8:	486b      	ldr	r0, [pc, #428]	; (8005398 <FrameUART+0x530>)
 80051ea:	f7fa fff9 	bl	80001e0 <strlen>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b69      	ldr	r3, [pc, #420]	; (8005398 <FrameUART+0x530>)
 80051f4:	4413      	add	r3, r2
 80051f6:	4969      	ldr	r1, [pc, #420]	; (800539c <FrameUART+0x534>)
 80051f8:	461a      	mov	r2, r3
 80051fa:	460b      	mov	r3, r1
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	8013      	strh	r3, [r2, #0]
 8005200:	e00f      	b.n	8005222 <FrameUART+0x3ba>
	   else if(speed == 3)
 8005202:	4b64      	ldr	r3, [pc, #400]	; (8005394 <FrameUART+0x52c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d10b      	bne.n	8005222 <FrameUART+0x3ba>
		   strcat((char *) frame, (char *) "3" );
 800520a:	4863      	ldr	r0, [pc, #396]	; (8005398 <FrameUART+0x530>)
 800520c:	f7fa ffe8 	bl	80001e0 <strlen>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4b60      	ldr	r3, [pc, #384]	; (8005398 <FrameUART+0x530>)
 8005216:	4413      	add	r3, r2
 8005218:	4961      	ldr	r1, [pc, #388]	; (80053a0 <FrameUART+0x538>)
 800521a:	461a      	mov	r2, r3
 800521c:	460b      	mov	r3, r1
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) ":");
 8005222:	485d      	ldr	r0, [pc, #372]	; (8005398 <FrameUART+0x530>)
 8005224:	f7fa ffdc 	bl	80001e0 <strlen>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	4b5a      	ldr	r3, [pc, #360]	; (8005398 <FrameUART+0x530>)
 800522e:	4413      	add	r3, r2
 8005230:	495c      	ldr	r1, [pc, #368]	; (80053a4 <FrameUART+0x53c>)
 8005232:	461a      	mov	r2, r3
 8005234:	460b      	mov	r3, r1
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "NIGH");
 800523a:	4857      	ldr	r0, [pc, #348]	; (8005398 <FrameUART+0x530>)
 800523c:	f7fa ffd0 	bl	80001e0 <strlen>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	4b54      	ldr	r3, [pc, #336]	; (8005398 <FrameUART+0x530>)
 8005246:	4413      	add	r3, r2
 8005248:	4a57      	ldr	r2, [pc, #348]	; (80053a8 <FrameUART+0x540>)
 800524a:	6810      	ldr	r0, [r2, #0]
 800524c:	6018      	str	r0, [r3, #0]
 800524e:	7912      	ldrb	r2, [r2, #4]
 8005250:	711a      	strb	r2, [r3, #4]
	   if (nightmode ==0){
 8005252:	4b56      	ldr	r3, [pc, #344]	; (80053ac <FrameUART+0x544>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <FrameUART+0x40c>
		   strcat((char *) frame, (char *) "0" );
 800525a:	484f      	ldr	r0, [pc, #316]	; (8005398 <FrameUART+0x530>)
 800525c:	f7fa ffc0 	bl	80001e0 <strlen>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	4b4c      	ldr	r3, [pc, #304]	; (8005398 <FrameUART+0x530>)
 8005266:	4413      	add	r3, r2
 8005268:	4951      	ldr	r1, [pc, #324]	; (80053b0 <FrameUART+0x548>)
 800526a:	461a      	mov	r2, r3
 800526c:	460b      	mov	r3, r1
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	8013      	strh	r3, [r2, #0]
 8005272:	e00f      	b.n	8005294 <FrameUART+0x42c>
	   }
	   else if (nightmode == 1){
 8005274:	4b4d      	ldr	r3, [pc, #308]	; (80053ac <FrameUART+0x544>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d10b      	bne.n	8005294 <FrameUART+0x42c>
		   strcat((char *) frame, (char *) "1" );
 800527c:	4846      	ldr	r0, [pc, #280]	; (8005398 <FrameUART+0x530>)
 800527e:	f7fa ffaf 	bl	80001e0 <strlen>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	4b44      	ldr	r3, [pc, #272]	; (8005398 <FrameUART+0x530>)
 8005288:	4413      	add	r3, r2
 800528a:	494a      	ldr	r1, [pc, #296]	; (80053b4 <FrameUART+0x54c>)
 800528c:	461a      	mov	r2, r3
 800528e:	460b      	mov	r3, r1
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	8013      	strh	r3, [r2, #0]
	   }
	   strcat((char *) frame, (char *) ":");
 8005294:	4840      	ldr	r0, [pc, #256]	; (8005398 <FrameUART+0x530>)
 8005296:	f7fa ffa3 	bl	80001e0 <strlen>
 800529a:	4603      	mov	r3, r0
 800529c:	461a      	mov	r2, r3
 800529e:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <FrameUART+0x530>)
 80052a0:	4413      	add	r3, r2
 80052a2:	4940      	ldr	r1, [pc, #256]	; (80053a4 <FrameUART+0x53c>)
 80052a4:	461a      	mov	r2, r3
 80052a6:	460b      	mov	r3, r1
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	8013      	strh	r3, [r2, #0]
	   strcat((char *) frame, (char *) "FILT");
 80052ac:	483a      	ldr	r0, [pc, #232]	; (8005398 <FrameUART+0x530>)
 80052ae:	f7fa ff97 	bl	80001e0 <strlen>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b38      	ldr	r3, [pc, #224]	; (8005398 <FrameUART+0x530>)
 80052b8:	4413      	add	r3, r2
 80052ba:	4a3f      	ldr	r2, [pc, #252]	; (80053b8 <FrameUART+0x550>)
 80052bc:	6810      	ldr	r0, [r2, #0]
 80052be:	6018      	str	r0, [r3, #0]
 80052c0:	7912      	ldrb	r2, [r2, #4]
 80052c2:	711a      	strb	r2, [r3, #4]
	   if (filmode ==0){
 80052c4:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <FrameUART+0x554>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10c      	bne.n	80052e6 <FrameUART+0x47e>
			strcat((char *) frame, (char *) "0" );
 80052cc:	4832      	ldr	r0, [pc, #200]	; (8005398 <FrameUART+0x530>)
 80052ce:	f7fa ff87 	bl	80001e0 <strlen>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <FrameUART+0x530>)
 80052d8:	4413      	add	r3, r2
 80052da:	4935      	ldr	r1, [pc, #212]	; (80053b0 <FrameUART+0x548>)
 80052dc:	461a      	mov	r2, r3
 80052de:	460b      	mov	r3, r1
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	8013      	strh	r3, [r2, #0]
 80052e4:	e00f      	b.n	8005306 <FrameUART+0x49e>
		   }
	   else if (filmode == 1){
 80052e6:	4b35      	ldr	r3, [pc, #212]	; (80053bc <FrameUART+0x554>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10b      	bne.n	8005306 <FrameUART+0x49e>
			strcat((char *) frame, (char *) "1" );
 80052ee:	482a      	ldr	r0, [pc, #168]	; (8005398 <FrameUART+0x530>)
 80052f0:	f7fa ff76 	bl	80001e0 <strlen>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	4b27      	ldr	r3, [pc, #156]	; (8005398 <FrameUART+0x530>)
 80052fa:	4413      	add	r3, r2
 80052fc:	492d      	ldr	r1, [pc, #180]	; (80053b4 <FrameUART+0x54c>)
 80052fe:	461a      	mov	r2, r3
 8005300:	460b      	mov	r3, r1
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	8013      	strh	r3, [r2, #0]
		   }
	   strcat((char *) frame, (char *) ":");
 8005306:	4824      	ldr	r0, [pc, #144]	; (8005398 <FrameUART+0x530>)
 8005308:	f7fa ff6a 	bl	80001e0 <strlen>
 800530c:	4603      	mov	r3, r0
 800530e:	461a      	mov	r2, r3
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <FrameUART+0x530>)
 8005312:	4413      	add	r3, r2
 8005314:	4923      	ldr	r1, [pc, #140]	; (80053a4 <FrameUART+0x53c>)
 8005316:	461a      	mov	r2, r3
 8005318:	460b      	mov	r3, r1
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	8013      	strh	r3, [r2, #0]
		   strcat((char *) frame, (char *) "CTRL");
 800531e:	481e      	ldr	r0, [pc, #120]	; (8005398 <FrameUART+0x530>)
 8005320:	f7fa ff5e 	bl	80001e0 <strlen>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <FrameUART+0x530>)
 800532a:	4413      	add	r3, r2
 800532c:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <FrameUART+0x558>)
 800532e:	6810      	ldr	r0, [r2, #0]
 8005330:	6018      	str	r0, [r3, #0]
 8005332:	7912      	ldrb	r2, [r2, #4]
 8005334:	711a      	strb	r2, [r3, #4]
		   if (ctrmode ==0){
 8005336:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <FrameUART+0x55c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10c      	bne.n	8005358 <FrameUART+0x4f0>
				strcat((char *) frame, (char *) "0" );
 800533e:	4816      	ldr	r0, [pc, #88]	; (8005398 <FrameUART+0x530>)
 8005340:	f7fa ff4e 	bl	80001e0 <strlen>
 8005344:	4603      	mov	r3, r0
 8005346:	461a      	mov	r2, r3
 8005348:	4b13      	ldr	r3, [pc, #76]	; (8005398 <FrameUART+0x530>)
 800534a:	4413      	add	r3, r2
 800534c:	4918      	ldr	r1, [pc, #96]	; (80053b0 <FrameUART+0x548>)
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	8013      	strh	r3, [r2, #0]
 8005356:	e00f      	b.n	8005378 <FrameUART+0x510>
			   }
		   else if (ctrmode == 1){
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <FrameUART+0x55c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d10b      	bne.n	8005378 <FrameUART+0x510>
				strcat((char *) frame, (char *) "1" );
 8005360:	480d      	ldr	r0, [pc, #52]	; (8005398 <FrameUART+0x530>)
 8005362:	f7fa ff3d 	bl	80001e0 <strlen>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <FrameUART+0x530>)
 800536c:	4413      	add	r3, r2
 800536e:	4911      	ldr	r1, [pc, #68]	; (80053b4 <FrameUART+0x54c>)
 8005370:	461a      	mov	r2, r3
 8005372:	460b      	mov	r3, r1
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	8013      	strh	r3, [r2, #0]
			   }
	   strcat((char *) frame, (char *) "\n");
 8005378:	4807      	ldr	r0, [pc, #28]	; (8005398 <FrameUART+0x530>)
 800537a:	f7fa ff31 	bl	80001e0 <strlen>
 800537e:	4603      	mov	r3, r0
 8005380:	461a      	mov	r2, r3
 8005382:	4b05      	ldr	r3, [pc, #20]	; (8005398 <FrameUART+0x530>)
 8005384:	4413      	add	r3, r2
 8005386:	4910      	ldr	r1, [pc, #64]	; (80053c8 <FrameUART+0x560>)
 8005388:	461a      	mov	r2, r3
 800538a:	460b      	mov	r3, r1
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	8013      	strh	r3, [r2, #0]
}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200005f4 	.word	0x200005f4
 8005398:	20000590 	.word	0x20000590
 800539c:	080090a0 	.word	0x080090a0
 80053a0:	080090a4 	.word	0x080090a4
 80053a4:	08009070 	.word	0x08009070
 80053a8:	080090a8 	.word	0x080090a8
 80053ac:	200004f0 	.word	0x200004f0
 80053b0:	08009098 	.word	0x08009098
 80053b4:	08009094 	.word	0x08009094
 80053b8:	080090b0 	.word	0x080090b0
 80053bc:	20000894 	.word	0x20000894
 80053c0:	080090b8 	.word	0x080090b8
 80053c4:	20000224 	.word	0x20000224
 80053c8:	080090c0 	.word	0x080090c0

080053cc <CheckUART>:
void CheckUART(void){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
	if(Transfer_cplt){
 80053d2:	4b99      	ldr	r3, [pc, #612]	; (8005638 <CheckUART+0x26c>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 82b9 	beq.w	800594e <CheckUART+0x582>

	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 80053dc:	2300      	movs	r3, #0
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e22a      	b.n	8005838 <CheckUART+0x46c>
		  if(Rx_Buffer[i] =='h' && Rx_Buffer[i+1]=='i'){ // Nhận nút điều khiển động cơ hight từ App
 80053e2:	4a96      	ldr	r2, [pc, #600]	; (800563c <CheckUART+0x270>)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4413      	add	r3, r2
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b68      	cmp	r3, #104	; 0x68
 80053ec:	d125      	bne.n	800543a <CheckUART+0x6e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3301      	adds	r3, #1
 80053f2:	4a92      	ldr	r2, [pc, #584]	; (800563c <CheckUART+0x270>)
 80053f4:	5cd3      	ldrb	r3, [r2, r3]
 80053f6:	2b69      	cmp	r3, #105	; 0x69
 80053f8:	d11f      	bne.n	800543a <CheckUART+0x6e>

			  speed = hight;
 80053fa:	4b91      	ldr	r3, [pc, #580]	; (8005640 <CheckUART+0x274>)
 80053fc:	2203      	movs	r2, #3
 80053fe:	601a      	str	r2, [r3, #0]
			  fan_1_run(hightspeed);
 8005400:	2000      	movs	r0, #0
 8005402:	f7ff fa09 	bl	8004818 <fan_1_run>
			  fan_2_run(hightspeed);
 8005406:	2000      	movs	r0, #0
 8005408:	f7ff fa1e 	bl	8004848 <fan_2_run>
			  num = SPEED_HIGHT;
 800540c:	4b8d      	ldr	r3, [pc, #564]	; (8005644 <CheckUART+0x278>)
 800540e:	2203      	movs	r2, #3
 8005410:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005412:	4b8d      	ldr	r3, [pc, #564]	; (8005648 <CheckUART+0x27c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 800541a:	4b8c      	ldr	r3, [pc, #560]	; (800564c <CheckUART+0x280>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 8005420:	4b8b      	ldr	r3, [pc, #556]	; (8005650 <CheckUART+0x284>)
 8005422:	2201      	movs	r2, #1
 8005424:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 8005426:	4b8b      	ldr	r3, [pc, #556]	; (8005654 <CheckUART+0x288>)
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 800542c:	4b8a      	ldr	r3, [pc, #552]	; (8005658 <CheckUART+0x28c>)
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 8005432:	4b8a      	ldr	r3, [pc, #552]	; (800565c <CheckUART+0x290>)
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
		  if(Rx_Buffer[i] =='h' && Rx_Buffer[i+1]=='i'){ // Nhận nút điều khiển động cơ hight từ App
 8005438:	e062      	b.n	8005500 <CheckUART+0x134>
			  // Set tốc độ động cơ PWM ở đây
		  }
		  else if(Rx_Buffer[i] =='l' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='w'){ // Nhận nút điều khiển động cơ low từ app
 800543a:	4a80      	ldr	r2, [pc, #512]	; (800563c <CheckUART+0x270>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b6c      	cmp	r3, #108	; 0x6c
 8005444:	d12b      	bne.n	800549e <CheckUART+0xd2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3301      	adds	r3, #1
 800544a:	4a7c      	ldr	r2, [pc, #496]	; (800563c <CheckUART+0x270>)
 800544c:	5cd3      	ldrb	r3, [r2, r3]
 800544e:	2b6f      	cmp	r3, #111	; 0x6f
 8005450:	d125      	bne.n	800549e <CheckUART+0xd2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3302      	adds	r3, #2
 8005456:	4a79      	ldr	r2, [pc, #484]	; (800563c <CheckUART+0x270>)
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	2b77      	cmp	r3, #119	; 0x77
 800545c:	d11f      	bne.n	800549e <CheckUART+0xd2>


			  speed = low;
 800545e:	4b78      	ldr	r3, [pc, #480]	; (8005640 <CheckUART+0x274>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
			  fan_1_run(lowspeed);
 8005464:	2046      	movs	r0, #70	; 0x46
 8005466:	f7ff f9d7 	bl	8004818 <fan_1_run>
			  fan_2_run(lowspeed);
 800546a:	2046      	movs	r0, #70	; 0x46
 800546c:	f7ff f9ec 	bl	8004848 <fan_2_run>
			  num = SPEED_LOW;
 8005470:	4b74      	ldr	r3, [pc, #464]	; (8005644 <CheckUART+0x278>)
 8005472:	2204      	movs	r2, #4
 8005474:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005476:	4b74      	ldr	r3, [pc, #464]	; (8005648 <CheckUART+0x27c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 800547e:	4b73      	ldr	r3, [pc, #460]	; (800564c <CheckUART+0x280>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 8005484:	4b72      	ldr	r3, [pc, #456]	; (8005650 <CheckUART+0x284>)
 8005486:	2201      	movs	r2, #1
 8005488:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 800548a:	4b72      	ldr	r3, [pc, #456]	; (8005654 <CheckUART+0x288>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 8005490:	4b71      	ldr	r3, [pc, #452]	; (8005658 <CheckUART+0x28c>)
 8005492:	2201      	movs	r2, #1
 8005494:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 8005496:	4b71      	ldr	r3, [pc, #452]	; (800565c <CheckUART+0x290>)
 8005498:	2201      	movs	r2, #1
 800549a:	701a      	strb	r2, [r3, #0]
		  else if(Rx_Buffer[i] =='l' && Rx_Buffer[i+1]=='o'&& Rx_Buffer[i+2]=='w'){ // Nhận nút điều khiển động cơ low từ app
 800549c:	e030      	b.n	8005500 <CheckUART+0x134>
			 // Set tốc độ động cơ PWM ở đây
		 }
		  else if(Rx_Buffer[i] =='m' && Rx_Buffer[i+1]=='e'&& Rx_Buffer[i+2]=='d'){ // Nhận nút điều khiển động cơ med từ app
 800549e:	4a67      	ldr	r2, [pc, #412]	; (800563c <CheckUART+0x270>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b6d      	cmp	r3, #109	; 0x6d
 80054a8:	d12a      	bne.n	8005500 <CheckUART+0x134>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4a63      	ldr	r2, [pc, #396]	; (800563c <CheckUART+0x270>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	2b65      	cmp	r3, #101	; 0x65
 80054b4:	d124      	bne.n	8005500 <CheckUART+0x134>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3302      	adds	r3, #2
 80054ba:	4a60      	ldr	r2, [pc, #384]	; (800563c <CheckUART+0x270>)
 80054bc:	5cd3      	ldrb	r3, [r2, r3]
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d11e      	bne.n	8005500 <CheckUART+0x134>

			  speed = med;
 80054c2:	4b5f      	ldr	r3, [pc, #380]	; (8005640 <CheckUART+0x274>)
 80054c4:	2202      	movs	r2, #2
 80054c6:	601a      	str	r2, [r3, #0]
			  fan_1_run(medspeed);
 80054c8:	2028      	movs	r0, #40	; 0x28
 80054ca:	f7ff f9a5 	bl	8004818 <fan_1_run>
			  fan_2_run(medspeed);
 80054ce:	2028      	movs	r0, #40	; 0x28
 80054d0:	f7ff f9ba 	bl	8004848 <fan_2_run>
			  num = SPEED_MEDIUM;
 80054d4:	4b5b      	ldr	r3, [pc, #364]	; (8005644 <CheckUART+0x278>)
 80054d6:	2205      	movs	r2, #5
 80054d8:	801a      	strh	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80054da:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <CheckUART+0x27c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 80054e2:	4b5a      	ldr	r3, [pc, #360]	; (800564c <CheckUART+0x280>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 80054e8:	4b59      	ldr	r3, [pc, #356]	; (8005650 <CheckUART+0x284>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 80054ee:	4b59      	ldr	r3, [pc, #356]	; (8005654 <CheckUART+0x288>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 80054f4:	4b58      	ldr	r3, [pc, #352]	; (8005658 <CheckUART+0x28c>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 80054fa:	4b58      	ldr	r3, [pc, #352]	; (800565c <CheckUART+0x290>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
			 // Set tốc độ động cơ PWM ở đây
		 }
	  //}
	 //for (int i =0; i<=strlen(Rx_Buffer); i++){
		 if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='N'){
 8005500:	4a4e      	ldr	r2, [pc, #312]	; (800563c <CheckUART+0x270>)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4413      	add	r3, r2
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b50      	cmp	r3, #80	; 0x50
 800550a:	d12e      	bne.n	800556a <CheckUART+0x19e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3301      	adds	r3, #1
 8005510:	4a4a      	ldr	r2, [pc, #296]	; (800563c <CheckUART+0x270>)
 8005512:	5cd3      	ldrb	r3, [r2, r3]
 8005514:	2b4f      	cmp	r3, #79	; 0x4f
 8005516:	d128      	bne.n	800556a <CheckUART+0x19e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3302      	adds	r3, #2
 800551c:	4a47      	ldr	r2, [pc, #284]	; (800563c <CheckUART+0x270>)
 800551e:	5cd3      	ldrb	r3, [r2, r3]
 8005520:	2b4e      	cmp	r3, #78	; 0x4e
 8005522:	d122      	bne.n	800556a <CheckUART+0x19e>

			 power = Power_On;
 8005524:	4b4e      	ldr	r3, [pc, #312]	; (8005660 <CheckUART+0x294>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]
			 speed = med;
 800552a:	4b45      	ldr	r3, [pc, #276]	; (8005640 <CheckUART+0x274>)
 800552c:	2202      	movs	r2, #2
 800552e:	601a      	str	r2, [r3, #0]
			 fan_1_run(medspeed);
 8005530:	2028      	movs	r0, #40	; 0x28
 8005532:	f7ff f971 	bl	8004818 <fan_1_run>
			 fan_2_run(medspeed);
 8005536:	2028      	movs	r0, #40	; 0x28
 8005538:	f7ff f986 	bl	8004848 <fan_2_run>
			 num = POWER_ON;
 800553c:	4b41      	ldr	r3, [pc, #260]	; (8005644 <CheckUART+0x278>)
 800553e:	2201      	movs	r2, #1
 8005540:	801a      	strh	r2, [r3, #0]
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005542:	4b41      	ldr	r3, [pc, #260]	; (8005648 <CheckUART+0x27c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <CheckUART+0x280>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 8005550:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <CheckUART+0x284>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 8005556:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <CheckUART+0x288>)
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <CheckUART+0x28c>)
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 8005562:	4b3e      	ldr	r3, [pc, #248]	; (800565c <CheckUART+0x290>)
 8005564:	2201      	movs	r2, #1
 8005566:	701a      	strb	r2, [r3, #0]
		 if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='N'){
 8005568:	e033      	b.n	80055d2 <CheckUART+0x206>
			 // Set tốc độ động cơ PWM ở đây
			 // Set van khí ở đây
		 }
		 else if(Rx_Buffer[i] =='P' && Rx_Buffer[i+1]=='O'&& Rx_Buffer[i+2]=='F'){
 800556a:	4a34      	ldr	r2, [pc, #208]	; (800563c <CheckUART+0x270>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4413      	add	r3, r2
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b50      	cmp	r3, #80	; 0x50
 8005574:	d12d      	bne.n	80055d2 <CheckUART+0x206>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3301      	adds	r3, #1
 800557a:	4a30      	ldr	r2, [pc, #192]	; (800563c <CheckUART+0x270>)
 800557c:	5cd3      	ldrb	r3, [r2, r3]
 800557e:	2b4f      	cmp	r3, #79	; 0x4f
 8005580:	d127      	bne.n	80055d2 <CheckUART+0x206>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3302      	adds	r3, #2
 8005586:	4a2d      	ldr	r2, [pc, #180]	; (800563c <CheckUART+0x270>)
 8005588:	5cd3      	ldrb	r3, [r2, r3]
 800558a:	2b46      	cmp	r3, #70	; 0x46
 800558c:	d121      	bne.n	80055d2 <CheckUART+0x206>


			 power = Power_Off;
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <CheckUART+0x294>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
			 speed = Power_Off;
 8005594:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <CheckUART+0x274>)
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
			 fan_1_run(100);
 800559a:	2064      	movs	r0, #100	; 0x64
 800559c:	f7ff f93c 	bl	8004818 <fan_1_run>
			 fan_2_run(100);
 80055a0:	2064      	movs	r0, #100	; 0x64
 80055a2:	f7ff f951 	bl	8004848 <fan_2_run>
			 num = POWER_OFF;
 80055a6:	4b27      	ldr	r3, [pc, #156]	; (8005644 <CheckUART+0x278>)
 80055a8:	2202      	movs	r2, #2
 80055aa:	801a      	strh	r2, [r3, #0]
			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80055ac:	4b26      	ldr	r3, [pc, #152]	; (8005648 <CheckUART+0x27c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2200      	movs	r2, #0
 80055b2:	625a      	str	r2, [r3, #36]	; 0x24
			  FLAG=1;
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <CheckUART+0x280>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
			  FLAG1=1;
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <CheckUART+0x284>)
 80055bc:	2201      	movs	r2, #1
 80055be:	701a      	strb	r2, [r3, #0]
			  FLAG2=1;
 80055c0:	4b24      	ldr	r3, [pc, #144]	; (8005654 <CheckUART+0x288>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
			  FLAG3=1;
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <CheckUART+0x28c>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
			  FLAG4=1;
 80055cc:	4b23      	ldr	r3, [pc, #140]	; (800565c <CheckUART+0x290>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	701a      	strb	r2, [r3, #0]
			 //Tắt động cơ và đóng van khí ở đây
		 }
	// }
	// for (int i =0; i<=strlen(Rx_Buffer); i++){
	 		 if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='i'&& Rx_Buffer[i+2]=='g'){
 80055d2:	4a1a      	ldr	r2, [pc, #104]	; (800563c <CheckUART+0x270>)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b6e      	cmp	r3, #110	; 0x6e
 80055dc:	d144      	bne.n	8005668 <CheckUART+0x29c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <CheckUART+0x270>)
 80055e4:	5cd3      	ldrb	r3, [r2, r3]
 80055e6:	2b69      	cmp	r3, #105	; 0x69
 80055e8:	d13e      	bne.n	8005668 <CheckUART+0x29c>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3302      	adds	r3, #2
 80055ee:	4a13      	ldr	r2, [pc, #76]	; (800563c <CheckUART+0x270>)
 80055f0:	5cd3      	ldrb	r3, [r2, r3]
 80055f2:	2b67      	cmp	r3, #103	; 0x67
 80055f4:	d138      	bne.n	8005668 <CheckUART+0x29c>

	 			 nightmode = Nightmode_On;
 80055f6:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <CheckUART+0x298>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
	 			 fan_1_run(lowspeed);
 80055fc:	2046      	movs	r0, #70	; 0x46
 80055fe:	f7ff f90b 	bl	8004818 <fan_1_run>
	 			 fan_2_run(lowspeed);
 8005602:	2046      	movs	r0, #70	; 0x46
 8005604:	f7ff f920 	bl	8004848 <fan_2_run>
	 			 num = NIGHT_ON;
 8005608:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <CheckUART+0x278>)
 800560a:	2206      	movs	r2, #6
 800560c:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <CheckUART+0x27c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <CheckUART+0x280>)
 8005618:	2201      	movs	r2, #1
 800561a:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <CheckUART+0x284>)
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <CheckUART+0x288>)
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <CheckUART+0x28c>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <CheckUART+0x290>)
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
	 		 if(Rx_Buffer[i] =='n' && Rx_Buffer[i+1]=='i'&& Rx_Buffer[i+2]=='g'){
 8005634:	e049      	b.n	80056ca <CheckUART+0x2fe>
 8005636:	bf00      	nop
 8005638:	20000165 	.word	0x20000165
 800563c:	20000554 	.word	0x20000554
 8005640:	200005f4 	.word	0x200005f4
 8005644:	2000009e 	.word	0x2000009e
 8005648:	200007f8 	.word	0x200007f8
 800564c:	200000a0 	.word	0x200000a0
 8005650:	200000a1 	.word	0x200000a1
 8005654:	200000a2 	.word	0x200000a2
 8005658:	200000a3 	.word	0x200000a3
 800565c:	200000a4 	.word	0x200000a4
 8005660:	200001c4 	.word	0x200001c4
 8005664:	200004f0 	.word	0x200004f0
	 		 }
	 		 else if(Rx_Buffer[i] =='d' && Rx_Buffer[i+1]=='a'&& Rx_Buffer[i+2]=='y'){
 8005668:	4a8a      	ldr	r2, [pc, #552]	; (8005894 <CheckUART+0x4c8>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4413      	add	r3, r2
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b64      	cmp	r3, #100	; 0x64
 8005672:	d12a      	bne.n	80056ca <CheckUART+0x2fe>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3301      	adds	r3, #1
 8005678:	4a86      	ldr	r2, [pc, #536]	; (8005894 <CheckUART+0x4c8>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	2b61      	cmp	r3, #97	; 0x61
 800567e:	d124      	bne.n	80056ca <CheckUART+0x2fe>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3302      	adds	r3, #2
 8005684:	4a83      	ldr	r2, [pc, #524]	; (8005894 <CheckUART+0x4c8>)
 8005686:	5cd3      	ldrb	r3, [r2, r3]
 8005688:	2b79      	cmp	r3, #121	; 0x79
 800568a:	d11e      	bne.n	80056ca <CheckUART+0x2fe>

	 			nightmode = Nightmode_Off;
 800568c:	4b82      	ldr	r3, [pc, #520]	; (8005898 <CheckUART+0x4cc>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
	 			fan_1_run(medspeed);
 8005692:	2028      	movs	r0, #40	; 0x28
 8005694:	f7ff f8c0 	bl	8004818 <fan_1_run>
	 			fan_2_run(medspeed);
 8005698:	2028      	movs	r0, #40	; 0x28
 800569a:	f7ff f8d5 	bl	8004848 <fan_2_run>
	 			num = NIGHT_OFF;
 800569e:	4b7f      	ldr	r3, [pc, #508]	; (800589c <CheckUART+0x4d0>)
 80056a0:	2207      	movs	r2, #7
 80056a2:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80056a4:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <CheckUART+0x4d4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2200      	movs	r2, #0
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 80056ac:	4b7d      	ldr	r3, [pc, #500]	; (80058a4 <CheckUART+0x4d8>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 80056b2:	4b7d      	ldr	r3, [pc, #500]	; (80058a8 <CheckUART+0x4dc>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 80056b8:	4b7c      	ldr	r3, [pc, #496]	; (80058ac <CheckUART+0x4e0>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 80056be:	4b7c      	ldr	r3, [pc, #496]	; (80058b0 <CheckUART+0x4e4>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 80056c4:	4b7b      	ldr	r3, [pc, #492]	; (80058b4 <CheckUART+0x4e8>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
	 		 }
	 	//}
	 	//for (int i =0; i<=strlen(Rx_Buffer); i++){
	 		if(Rx_Buffer[i] =='f' && Rx_Buffer[i+1]=='r'&& Rx_Buffer[i+2]=='e'){
 80056ca:	4a72      	ldr	r2, [pc, #456]	; (8005894 <CheckUART+0x4c8>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b66      	cmp	r3, #102	; 0x66
 80056d4:	d128      	bne.n	8005728 <CheckUART+0x35c>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3301      	adds	r3, #1
 80056da:	4a6e      	ldr	r2, [pc, #440]	; (8005894 <CheckUART+0x4c8>)
 80056dc:	5cd3      	ldrb	r3, [r2, r3]
 80056de:	2b72      	cmp	r3, #114	; 0x72
 80056e0:	d122      	bne.n	8005728 <CheckUART+0x35c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3302      	adds	r3, #2
 80056e6:	4a6b      	ldr	r2, [pc, #428]	; (8005894 <CheckUART+0x4c8>)
 80056e8:	5cd3      	ldrb	r3, [r2, r3]
 80056ea:	2b65      	cmp	r3, #101	; 0x65
 80056ec:	d11c      	bne.n	8005728 <CheckUART+0x35c>

	 			filmode = Fresh_Air;
 80056ee:	4b72      	ldr	r3, [pc, #456]	; (80058b8 <CheckUART+0x4ec>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
	 			num = FRESH_AIR;
 80056f4:	4b69      	ldr	r3, [pc, #420]	; (800589c <CheckUART+0x4d0>)
 80056f6:	2208      	movs	r2, #8
 80056f8:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80056fa:	4b69      	ldr	r3, [pc, #420]	; (80058a0 <CheckUART+0x4d4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2200      	movs	r2, #0
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 8005702:	4b68      	ldr	r3, [pc, #416]	; (80058a4 <CheckUART+0x4d8>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 8005708:	4b67      	ldr	r3, [pc, #412]	; (80058a8 <CheckUART+0x4dc>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 800570e:	4b67      	ldr	r3, [pc, #412]	; (80058ac <CheckUART+0x4e0>)
 8005710:	2201      	movs	r2, #1
 8005712:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8005714:	4b66      	ldr	r3, [pc, #408]	; (80058b0 <CheckUART+0x4e4>)
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 800571a:	4b66      	ldr	r3, [pc, #408]	; (80058b4 <CheckUART+0x4e8>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
				  Vanst = 1;
 8005720:	4b66      	ldr	r3, [pc, #408]	; (80058bc <CheckUART+0x4f0>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e02d      	b.n	8005784 <CheckUART+0x3b8>

	 			//đk van mở van
	 		 }
	 		else if(Rx_Buffer[i] =='i' && Rx_Buffer[i+1]=='n'&& Rx_Buffer[i+2]=='d'){
 8005728:	4a5a      	ldr	r2, [pc, #360]	; (8005894 <CheckUART+0x4c8>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b69      	cmp	r3, #105	; 0x69
 8005732:	d127      	bne.n	8005784 <CheckUART+0x3b8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	4a56      	ldr	r2, [pc, #344]	; (8005894 <CheckUART+0x4c8>)
 800573a:	5cd3      	ldrb	r3, [r2, r3]
 800573c:	2b6e      	cmp	r3, #110	; 0x6e
 800573e:	d121      	bne.n	8005784 <CheckUART+0x3b8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3302      	adds	r3, #2
 8005744:	4a53      	ldr	r2, [pc, #332]	; (8005894 <CheckUART+0x4c8>)
 8005746:	5cd3      	ldrb	r3, [r2, r3]
 8005748:	2b64      	cmp	r3, #100	; 0x64
 800574a:	d11b      	bne.n	8005784 <CheckUART+0x3b8>

	 			filmode = Indoor;
 800574c:	4b5a      	ldr	r3, [pc, #360]	; (80058b8 <CheckUART+0x4ec>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
	 			num = INDOOR;
 8005752:	4b52      	ldr	r3, [pc, #328]	; (800589c <CheckUART+0x4d0>)
 8005754:	2209      	movs	r2, #9
 8005756:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 8005758:	4b51      	ldr	r3, [pc, #324]	; (80058a0 <CheckUART+0x4d4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 8005760:	4b50      	ldr	r3, [pc, #320]	; (80058a4 <CheckUART+0x4d8>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 8005766:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <CheckUART+0x4dc>)
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 800576c:	4b4f      	ldr	r3, [pc, #316]	; (80058ac <CheckUART+0x4e0>)
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8005772:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <CheckUART+0x4e4>)
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 8005778:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <CheckUART+0x4e8>)
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
				  Vanst = 0;
 800577e:	4b4f      	ldr	r3, [pc, #316]	; (80058bc <CheckUART+0x4f0>)
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
	 			//đk van đóng
	 		}
	 	//}
	 	//for (int i =0; i<=strlen(Rx_Buffer); i++){ // chế độ auto
	 		if(Rx_Buffer[i] =='m' && Rx_Buffer[i+1]=='a'&& Rx_Buffer[i+2]=='n'){
 8005784:	4a43      	ldr	r2, [pc, #268]	; (8005894 <CheckUART+0x4c8>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b6d      	cmp	r3, #109	; 0x6d
 800578e:	d125      	bne.n	80057dc <CheckUART+0x410>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3301      	adds	r3, #1
 8005794:	4a3f      	ldr	r2, [pc, #252]	; (8005894 <CheckUART+0x4c8>)
 8005796:	5cd3      	ldrb	r3, [r2, r3]
 8005798:	2b61      	cmp	r3, #97	; 0x61
 800579a:	d11f      	bne.n	80057dc <CheckUART+0x410>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3302      	adds	r3, #2
 80057a0:	4a3c      	ldr	r2, [pc, #240]	; (8005894 <CheckUART+0x4c8>)
 80057a2:	5cd3      	ldrb	r3, [r2, r3]
 80057a4:	2b6e      	cmp	r3, #110	; 0x6e
 80057a6:	d119      	bne.n	80057dc <CheckUART+0x410>

	 			ctrmode = Manual;
 80057a8:	4b45      	ldr	r3, [pc, #276]	; (80058c0 <CheckUART+0x4f4>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
	 			num = MANUAL;
 80057ae:	4b3b      	ldr	r3, [pc, #236]	; (800589c <CheckUART+0x4d0>)
 80057b0:	220a      	movs	r2, #10
 80057b2:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 80057b4:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <CheckUART+0x4d4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2200      	movs	r2, #0
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 80057bc:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <CheckUART+0x4d8>)
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 80057c2:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <CheckUART+0x4dc>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 80057c8:	4b38      	ldr	r3, [pc, #224]	; (80058ac <CheckUART+0x4e0>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 80057ce:	4b38      	ldr	r3, [pc, #224]	; (80058b0 <CheckUART+0x4e4>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 80057d4:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <CheckUART+0x4e8>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e02a      	b.n	8005832 <CheckUART+0x466>
	 		}
	 		else if(Rx_Buffer[i] =='a' && Rx_Buffer[i+1]=='u'&& Rx_Buffer[i+2]=='t'){ // chế độ manual
 80057dc:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <CheckUART+0x4c8>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b61      	cmp	r3, #97	; 0x61
 80057e6:	d124      	bne.n	8005832 <CheckUART+0x466>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a29      	ldr	r2, [pc, #164]	; (8005894 <CheckUART+0x4c8>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	2b75      	cmp	r3, #117	; 0x75
 80057f2:	d11e      	bne.n	8005832 <CheckUART+0x466>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3302      	adds	r3, #2
 80057f8:	4a26      	ldr	r2, [pc, #152]	; (8005894 <CheckUART+0x4c8>)
 80057fa:	5cd3      	ldrb	r3, [r2, r3]
 80057fc:	2b74      	cmp	r3, #116	; 0x74
 80057fe:	d118      	bne.n	8005832 <CheckUART+0x466>

	 			ctrmode = Auto;
 8005800:	4b2f      	ldr	r3, [pc, #188]	; (80058c0 <CheckUART+0x4f4>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
	 			num = AUTO;
 8005806:	4b25      	ldr	r3, [pc, #148]	; (800589c <CheckUART+0x4d0>)
 8005808:	220b      	movs	r2, #11
 800580a:	801a      	strh	r2, [r3, #0]
	 			 __HAL_TIM_SET_COUNTER(&htim2, 0);
 800580c:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <CheckUART+0x4d4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2200      	movs	r2, #0
 8005812:	625a      	str	r2, [r3, #36]	; 0x24
	 			  FLAG=1;
 8005814:	4b23      	ldr	r3, [pc, #140]	; (80058a4 <CheckUART+0x4d8>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
				  FLAG1=1;
 800581a:	4b23      	ldr	r3, [pc, #140]	; (80058a8 <CheckUART+0x4dc>)
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
				  FLAG2=1;
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <CheckUART+0x4e0>)
 8005822:	2201      	movs	r2, #1
 8005824:	701a      	strb	r2, [r3, #0]
				  FLAG3=1;
 8005826:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <CheckUART+0x4e4>)
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
				  FLAG4=1;
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <CheckUART+0x4e8>)
 800582e:	2201      	movs	r2, #1
 8005830:	701a      	strb	r2, [r3, #0]
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3301      	adds	r3, #1
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	4816      	ldr	r0, [pc, #88]	; (8005894 <CheckUART+0x4c8>)
 800583a:	f7fa fcd1 	bl	80001e0 <strlen>
 800583e:	4602      	mov	r2, r0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	f4bf adcd 	bcs.w	80053e2 <CheckUART+0x16>
	 		}
	 	}
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 8005848:	2300      	movs	r3, #0
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	e071      	b.n	8005932 <CheckUART+0x566>
		  if(Rx_Buffer[i] =='s' && Rx_Buffer[i+1]=='t'&& Rx_Buffer[i+2]=='a'){
 800584e:	4a11      	ldr	r2, [pc, #68]	; (8005894 <CheckUART+0x4c8>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4413      	add	r3, r2
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b73      	cmp	r3, #115	; 0x73
 8005858:	d168      	bne.n	800592c <CheckUART+0x560>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a0d      	ldr	r2, [pc, #52]	; (8005894 <CheckUART+0x4c8>)
 8005860:	5cd3      	ldrb	r3, [r2, r3]
 8005862:	2b74      	cmp	r3, #116	; 0x74
 8005864:	d162      	bne.n	800592c <CheckUART+0x560>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	3302      	adds	r3, #2
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <CheckUART+0x4c8>)
 800586c:	5cd3      	ldrb	r3, [r2, r3]
 800586e:	2b61      	cmp	r3, #97	; 0x61
 8005870:	d15c      	bne.n	800592c <CheckUART+0x560>
			 //Đọc giá trị từ cảm biến
			  ret = sps30_read_measurement(&m);
 8005872:	4814      	ldr	r0, [pc, #80]	; (80058c4 <CheckUART+0x4f8>)
 8005874:	f001 f933 	bl	8006ade <sps30_read_measurement>
 8005878:	4603      	mov	r3, r0
 800587a:	461a      	mov	r2, r3
 800587c:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <CheckUART+0x4fc>)
 800587e:	801a      	strh	r2, [r3, #0]
			  if (ret < 0) {
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <CheckUART+0x4fc>)
 8005882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da22      	bge.n	80058d0 <CheckUART+0x504>
				 PM25 = PM25;
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <CheckUART+0x500>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a0f      	ldr	r2, [pc, #60]	; (80058cc <CheckUART+0x500>)
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e021      	b.n	80058d8 <CheckUART+0x50c>
 8005894:	20000554 	.word	0x20000554
 8005898:	200004f0 	.word	0x200004f0
 800589c:	2000009e 	.word	0x2000009e
 80058a0:	200007f8 	.word	0x200007f8
 80058a4:	200000a0 	.word	0x200000a0
 80058a8:	200000a1 	.word	0x200000a1
 80058ac:	200000a2 	.word	0x200000a2
 80058b0:	200000a3 	.word	0x200000a3
 80058b4:	200000a4 	.word	0x200000a4
 80058b8:	20000894 	.word	0x20000894
 80058bc:	200000f0 	.word	0x200000f0
 80058c0:	20000224 	.word	0x20000224
 80058c4:	2000086c 	.word	0x2000086c
 80058c8:	20000868 	.word	0x20000868
 80058cc:	200000a8 	.word	0x200000a8
							  //error
			  } else {
				 PM25 = m.mc_2p5;
 80058d0:	4b21      	ldr	r3, [pc, #132]	; (8005958 <CheckUART+0x58c>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4a21      	ldr	r2, [pc, #132]	; (800595c <CheckUART+0x590>)
 80058d6:	6013      	str	r3, [r2, #0]
			  }
			  err = svm_measure_iaq_blocking_read(&tvoc_ppb, &co2_ppm, &temperature, &humidity);
 80058d8:	4b21      	ldr	r3, [pc, #132]	; (8005960 <CheckUART+0x594>)
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <CheckUART+0x598>)
 80058dc:	4922      	ldr	r1, [pc, #136]	; (8005968 <CheckUART+0x59c>)
 80058de:	4823      	ldr	r0, [pc, #140]	; (800596c <CheckUART+0x5a0>)
 80058e0:	f001 ff5d 	bl	800779e <svm_measure_iaq_blocking_read>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	4b21      	ldr	r3, [pc, #132]	; (8005970 <CheckUART+0x5a4>)
 80058ea:	801a      	strh	r2, [r3, #0]

			  if (err == STATUS_OK) {
 80058ec:	4b20      	ldr	r3, [pc, #128]	; (8005970 <CheckUART+0x5a4>)
 80058ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00f      	beq.n	8005916 <CheckUART+0x54a>
					//lay thanh cong
			  } else {
					co2_ppm = co2_ppm;
 80058f6:	4b1c      	ldr	r3, [pc, #112]	; (8005968 <CheckUART+0x59c>)
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <CheckUART+0x59c>)
 80058fc:	801a      	strh	r2, [r3, #0]
					temperature = temperature;
 80058fe:	4b19      	ldr	r3, [pc, #100]	; (8005964 <CheckUART+0x598>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a18      	ldr	r2, [pc, #96]	; (8005964 <CheckUART+0x598>)
 8005904:	6013      	str	r3, [r2, #0]
					humidity = humidity;
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <CheckUART+0x594>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <CheckUART+0x594>)
 800590c:	6013      	str	r3, [r2, #0]
					tvoc_ppb = tvoc_ppb;
 800590e:	4b17      	ldr	r3, [pc, #92]	; (800596c <CheckUART+0x5a0>)
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	4b16      	ldr	r3, [pc, #88]	; (800596c <CheckUART+0x5a0>)
 8005914:	801a      	strh	r2, [r3, #0]
					//khong the doc tu cam bien
			  }

			  Convertvalue();
 8005916:	f7ff f9c5 	bl	8004ca4 <Convertvalue>
			  FrameUART();
 800591a:	f7ff faa5 	bl	8004e68 <FrameUART>
			  HAL_UART_Transmit(&huart1, (char *) &frame, sizeof(frame), HAL_MAX_DELAY);
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	2264      	movs	r2, #100	; 0x64
 8005924:	4913      	ldr	r1, [pc, #76]	; (8005974 <CheckUART+0x5a8>)
 8005926:	4814      	ldr	r0, [pc, #80]	; (8005978 <CheckUART+0x5ac>)
 8005928:	f7fe f963 	bl	8003bf2 <HAL_UART_Transmit>
	  for (int i =0; i<=strlen(Rx_Buffer); i++){
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4812      	ldr	r0, [pc, #72]	; (800597c <CheckUART+0x5b0>)
 8005934:	f7fa fc54 	bl	80001e0 <strlen>
 8005938:	4602      	mov	r2, r0
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d286      	bcs.n	800584e <CheckUART+0x482>
		   }
	  }

	  Transfer_cplt = 0;
 8005940:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <CheckUART+0x5b4>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(400);
 8005946:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800594a:	f7fb f877 	bl	8000a3c <HAL_Delay>
  }
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	2000086c 	.word	0x2000086c
 800595c:	200000a8 	.word	0x200000a8
 8005960:	20000010 	.word	0x20000010
 8005964:	2000000c 	.word	0x2000000c
 8005968:	20000008 	.word	0x20000008
 800596c:	20000006 	.word	0x20000006
 8005970:	200004f4 	.word	0x200004f4
 8005974:	20000590 	.word	0x20000590
 8005978:	20000294 	.word	0x20000294
 800597c:	20000554 	.word	0x20000554
 8005980:	20000165 	.word	0x20000165

08005984 <IAQcolor>:
void IAQcolor(void){
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
	if (count <= 100){
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <IAQcolor+0xb0>)
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	2b64      	cmp	r3, #100	; 0x64
 800598e:	d807      	bhi.n	80059a0 <IAQcolor+0x1c>
		BACK_COLOR=BLACK;
 8005990:	4b29      	ldr	r3, [pc, #164]	; (8005a38 <IAQcolor+0xb4>)
 8005992:	2200      	movs	r2, #0
 8005994:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=GREEN;
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <IAQcolor+0xb8>)
 8005998:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800599c:	801a      	strh	r2, [r3, #0]
	else if (count > 400 && count <= 500){
		BACK_COLOR=BLACK;
		POINT_COLOR=VIOLET;
	}

}
 800599e:	e044      	b.n	8005a2a <IAQcolor+0xa6>
	else if (count > 100 && count <= 200){
 80059a0:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <IAQcolor+0xb0>)
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	2b64      	cmp	r3, #100	; 0x64
 80059a6:	d90b      	bls.n	80059c0 <IAQcolor+0x3c>
 80059a8:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <IAQcolor+0xb0>)
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	2bc8      	cmp	r3, #200	; 0xc8
 80059ae:	d807      	bhi.n	80059c0 <IAQcolor+0x3c>
		BACK_COLOR=BLACK;
 80059b0:	4b21      	ldr	r3, [pc, #132]	; (8005a38 <IAQcolor+0xb4>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=YELLOW;
 80059b6:	4b21      	ldr	r3, [pc, #132]	; (8005a3c <IAQcolor+0xb8>)
 80059b8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e034      	b.n	8005a2a <IAQcolor+0xa6>
	else if (count > 200 && count <= 300){
 80059c0:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <IAQcolor+0xb0>)
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	2bc8      	cmp	r3, #200	; 0xc8
 80059c6:	d90c      	bls.n	80059e2 <IAQcolor+0x5e>
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <IAQcolor+0xb0>)
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80059d0:	d807      	bhi.n	80059e2 <IAQcolor+0x5e>
		BACK_COLOR=BLACK;
 80059d2:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <IAQcolor+0xb4>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=ORANGE;
 80059d8:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <IAQcolor+0xb8>)
 80059da:	f64e 32e3 	movw	r2, #60387	; 0xebe3
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e023      	b.n	8005a2a <IAQcolor+0xa6>
	else if (count > 300 && count <= 400){
 80059e2:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <IAQcolor+0xb0>)
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80059ea:	d90c      	bls.n	8005a06 <IAQcolor+0x82>
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <IAQcolor+0xb0>)
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80059f4:	d807      	bhi.n	8005a06 <IAQcolor+0x82>
		BACK_COLOR=BLACK;
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <IAQcolor+0xb4>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=RED;
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <IAQcolor+0xb8>)
 80059fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e011      	b.n	8005a2a <IAQcolor+0xa6>
	else if (count > 400 && count <= 500){
 8005a06:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <IAQcolor+0xb0>)
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005a0e:	d90c      	bls.n	8005a2a <IAQcolor+0xa6>
 8005a10:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <IAQcolor+0xb0>)
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a18:	d807      	bhi.n	8005a2a <IAQcolor+0xa6>
		BACK_COLOR=BLACK;
 8005a1a:	4b07      	ldr	r3, [pc, #28]	; (8005a38 <IAQcolor+0xb4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	801a      	strh	r2, [r3, #0]
		POINT_COLOR=VIOLET;
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <IAQcolor+0xb8>)
 8005a22:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005a26:	801a      	strh	r2, [r3, #0]
}
 8005a28:	e7ff      	b.n	8005a2a <IAQcolor+0xa6>
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	2000009c 	.word	0x2000009c
 8005a38:	20000898 	.word	0x20000898
 8005a3c:	2000089a 	.word	0x2000089a

08005a40 <FormInterface>:

void CheckFLAG(void){

}

void FormInterface(void) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af02      	add	r7, sp, #8


	 if (num == OFFALL /*&& FLAG == 1*/){
 8005a46:	4baa      	ldr	r3, [pc, #680]	; (8005cf0 <FormInterface+0x2b0>)
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10c      	bne.n	8005a68 <FormInterface+0x28>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005a4e:	4ba9      	ldr	r3, [pc, #676]	; (8005cf4 <FormInterface+0x2b4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24
			IAQcolor();
 8005a56:	f7ff ff95 	bl	8005984 <IAQcolor>
			tft_puts26x48(160,90,(int8_t*)buffer5,TFT_STRING_MODE_BACKGROUND);
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4aa6      	ldr	r2, [pc, #664]	; (8005cf8 <FormInterface+0x2b8>)
 8005a5e:	215a      	movs	r1, #90	; 0x5a
 8005a60:	20a0      	movs	r0, #160	; 0xa0
 8005a62:	f002 f93b 	bl	8007cdc <tft_puts26x48>
			  BACK_COLOR=BLACK;
			  POINT_COLOR=RED;
			  tft_puts14x24(220,3,(int8_t*)"CONTROL: Auto    ",TFT_STRING_MODE_BACKGROUND);
		 }

}
 8005a66:	e13f      	b.n	8005ce8 <FormInterface+0x2a8>
		 else if (num == POWER_ON){
 8005a68:	4ba1      	ldr	r3, [pc, #644]	; (8005cf0 <FormInterface+0x2b0>)
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d11c      	bne.n	8005aaa <FormInterface+0x6a>
			  tft_fill(0,0,320,240,BLACK);
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	23f0      	movs	r3, #240	; 0xf0
 8005a76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	f002 fa35 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005a82:	4b9e      	ldr	r3, [pc, #632]	; (8005cfc <FormInterface+0x2bc>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005a88:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <FormInterface+0x2c0>)
 8005a8a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005a8e:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8005a90:	2300      	movs	r3, #0
 8005a92:	4a9c      	ldr	r2, [pc, #624]	; (8005d04 <FormInterface+0x2c4>)
 8005a94:	2103      	movs	r1, #3
 8005a96:	20c8      	movs	r0, #200	; 0xc8
 8005a98:	f002 f8a4 	bl	8007be4 <tft_puts14x24>
			  tft_puts14x24(240,3,(int8_t*)"SPEED: MEDIUM      ",TFT_STRING_MODE_BACKGROUND);
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4a9a      	ldr	r2, [pc, #616]	; (8005d08 <FormInterface+0x2c8>)
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	20f0      	movs	r0, #240	; 0xf0
 8005aa4:	f002 f89e 	bl	8007be4 <tft_puts14x24>
}
 8005aa8:	e11e      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == POWER_OFF){
 8005aaa:	4b91      	ldr	r3, [pc, #580]	; (8005cf0 <FormInterface+0x2b0>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d116      	bne.n	8005ae0 <FormInterface+0xa0>
			  tft_fill(0,0,320,240,BLACK);
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	23f0      	movs	r3, #240	; 0xf0
 8005ab8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005abc:	2100      	movs	r1, #0
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f002 fa14 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005ac4:	4b8d      	ldr	r3, [pc, #564]	; (8005cfc <FormInterface+0x2bc>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005aca:	4b8d      	ldr	r3, [pc, #564]	; (8005d00 <FormInterface+0x2c0>)
 8005acc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005ad0:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: OFF      ",TFT_STRING_MODE_BACKGROUND);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4a8d      	ldr	r2, [pc, #564]	; (8005d0c <FormInterface+0x2cc>)
 8005ad6:	2103      	movs	r1, #3
 8005ad8:	20c8      	movs	r0, #200	; 0xc8
 8005ada:	f002 f883 	bl	8007be4 <tft_puts14x24>
}
 8005ade:	e103      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == SPEED_HIGHT){
 8005ae0:	4b83      	ldr	r3, [pc, #524]	; (8005cf0 <FormInterface+0x2b0>)
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d11c      	bne.n	8005b22 <FormInterface+0xe2>
			  tft_fill(0,0,320,240,BLACK);
 8005ae8:	2300      	movs	r3, #0
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	23f0      	movs	r3, #240	; 0xf0
 8005aee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005af2:	2100      	movs	r1, #0
 8005af4:	2000      	movs	r0, #0
 8005af6:	f002 f9f9 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005afa:	4b80      	ldr	r3, [pc, #512]	; (8005cfc <FormInterface+0x2bc>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005b00:	4b7f      	ldr	r3, [pc, #508]	; (8005d00 <FormInterface+0x2c0>)
 8005b02:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005b06:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4a7e      	ldr	r2, [pc, #504]	; (8005d04 <FormInterface+0x2c4>)
 8005b0c:	2103      	movs	r1, #3
 8005b0e:	20c8      	movs	r0, #200	; 0xc8
 8005b10:	f002 f868 	bl	8007be4 <tft_puts14x24>
			  tft_puts14x24(220,3,(int8_t*)"SPEED: HIGH      ",TFT_STRING_MODE_BACKGROUND);
 8005b14:	2300      	movs	r3, #0
 8005b16:	4a7e      	ldr	r2, [pc, #504]	; (8005d10 <FormInterface+0x2d0>)
 8005b18:	2103      	movs	r1, #3
 8005b1a:	20dc      	movs	r0, #220	; 0xdc
 8005b1c:	f002 f862 	bl	8007be4 <tft_puts14x24>
}
 8005b20:	e0e2      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == SPEED_MEDIUM){
 8005b22:	4b73      	ldr	r3, [pc, #460]	; (8005cf0 <FormInterface+0x2b0>)
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d11c      	bne.n	8005b64 <FormInterface+0x124>
			  tft_fill(0,0,320,240,BLACK);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	23f0      	movs	r3, #240	; 0xf0
 8005b30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b34:	2100      	movs	r1, #0
 8005b36:	2000      	movs	r0, #0
 8005b38:	f002 f9d8 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005b3c:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <FormInterface+0x2bc>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005b42:	4b6f      	ldr	r3, [pc, #444]	; (8005d00 <FormInterface+0x2c0>)
 8005b44:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005b48:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4a6d      	ldr	r2, [pc, #436]	; (8005d04 <FormInterface+0x2c4>)
 8005b4e:	2103      	movs	r1, #3
 8005b50:	20c8      	movs	r0, #200	; 0xc8
 8005b52:	f002 f847 	bl	8007be4 <tft_puts14x24>
			  tft_puts14x24(240,3,(int8_t*)"SPEED: MEDIUM      ",TFT_STRING_MODE_BACKGROUND);
 8005b56:	2300      	movs	r3, #0
 8005b58:	4a6b      	ldr	r2, [pc, #428]	; (8005d08 <FormInterface+0x2c8>)
 8005b5a:	2103      	movs	r1, #3
 8005b5c:	20f0      	movs	r0, #240	; 0xf0
 8005b5e:	f002 f841 	bl	8007be4 <tft_puts14x24>
}
 8005b62:	e0c1      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == SPEED_LOW){
 8005b64:	4b62      	ldr	r3, [pc, #392]	; (8005cf0 <FormInterface+0x2b0>)
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d11c      	bne.n	8005ba6 <FormInterface+0x166>
			  tft_fill(0,0,320,240,BLACK);
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	23f0      	movs	r3, #240	; 0xf0
 8005b72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005b76:	2100      	movs	r1, #0
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f002 f9b7 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005b7e:	4b5f      	ldr	r3, [pc, #380]	; (8005cfc <FormInterface+0x2bc>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005b84:	4b5e      	ldr	r3, [pc, #376]	; (8005d00 <FormInterface+0x2c0>)
 8005b86:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005b8a:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(200,3,(int8_t*)"POWER: ON      ",TFT_STRING_MODE_BACKGROUND);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4a5d      	ldr	r2, [pc, #372]	; (8005d04 <FormInterface+0x2c4>)
 8005b90:	2103      	movs	r1, #3
 8005b92:	20c8      	movs	r0, #200	; 0xc8
 8005b94:	f002 f826 	bl	8007be4 <tft_puts14x24>
			  tft_puts14x24(220,3,(int8_t*)"SPEED: LOW      ",TFT_STRING_MODE_BACKGROUND);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	4a5e      	ldr	r2, [pc, #376]	; (8005d14 <FormInterface+0x2d4>)
 8005b9c:	2103      	movs	r1, #3
 8005b9e:	20dc      	movs	r0, #220	; 0xdc
 8005ba0:	f002 f820 	bl	8007be4 <tft_puts14x24>
}
 8005ba4:	e0a0      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == NIGHT_ON){
 8005ba6:	4b52      	ldr	r3, [pc, #328]	; (8005cf0 <FormInterface+0x2b0>)
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d116      	bne.n	8005bdc <FormInterface+0x19c>
			  tft_fill(0,0,320,240,BLACK);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	23f0      	movs	r3, #240	; 0xf0
 8005bb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005bb8:	2100      	movs	r1, #0
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f002 f996 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <FormInterface+0x2bc>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005bc6:	4b4e      	ldr	r3, [pc, #312]	; (8005d00 <FormInterface+0x2c0>)
 8005bc8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005bcc:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"NIGHT_MODE: ON     ",TFT_STRING_MODE_BACKGROUND);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	4a51      	ldr	r2, [pc, #324]	; (8005d18 <FormInterface+0x2d8>)
 8005bd2:	2103      	movs	r1, #3
 8005bd4:	20dc      	movs	r0, #220	; 0xdc
 8005bd6:	f002 f805 	bl	8007be4 <tft_puts14x24>
}
 8005bda:	e085      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == NIGHT_OFF){
 8005bdc:	4b44      	ldr	r3, [pc, #272]	; (8005cf0 <FormInterface+0x2b0>)
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	d116      	bne.n	8005c12 <FormInterface+0x1d2>
			  tft_fill(0,0,320,240,BLACK);
 8005be4:	2300      	movs	r3, #0
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	23f0      	movs	r3, #240	; 0xf0
 8005bea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005bee:	2100      	movs	r1, #0
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	f002 f97b 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005bf6:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <FormInterface+0x2bc>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005bfc:	4b40      	ldr	r3, [pc, #256]	; (8005d00 <FormInterface+0x2c0>)
 8005bfe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005c02:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"NIGHT_MODE: OFF     ",TFT_STRING_MODE_BACKGROUND);
 8005c04:	2300      	movs	r3, #0
 8005c06:	4a45      	ldr	r2, [pc, #276]	; (8005d1c <FormInterface+0x2dc>)
 8005c08:	2103      	movs	r1, #3
 8005c0a:	20dc      	movs	r0, #220	; 0xdc
 8005c0c:	f001 ffea 	bl	8007be4 <tft_puts14x24>
}
 8005c10:	e06a      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == FRESH_AIR){
 8005c12:	4b37      	ldr	r3, [pc, #220]	; (8005cf0 <FormInterface+0x2b0>)
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d116      	bne.n	8005c48 <FormInterface+0x208>
			  tft_fill(0,0,320,240,BLACK);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	23f0      	movs	r3, #240	; 0xf0
 8005c20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c24:	2100      	movs	r1, #0
 8005c26:	2000      	movs	r0, #0
 8005c28:	f002 f960 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005c2c:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <FormInterface+0x2bc>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005c32:	4b33      	ldr	r3, [pc, #204]	; (8005d00 <FormInterface+0x2c0>)
 8005c34:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005c38:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"FILTER: Fresh air     ",TFT_STRING_MODE_BACKGROUND);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4a38      	ldr	r2, [pc, #224]	; (8005d20 <FormInterface+0x2e0>)
 8005c3e:	2103      	movs	r1, #3
 8005c40:	20dc      	movs	r0, #220	; 0xdc
 8005c42:	f001 ffcf 	bl	8007be4 <tft_puts14x24>
}
 8005c46:	e04f      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == INDOOR){
 8005c48:	4b29      	ldr	r3, [pc, #164]	; (8005cf0 <FormInterface+0x2b0>)
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	d116      	bne.n	8005c7e <FormInterface+0x23e>
			  tft_fill(0,0,320,240,BLACK);
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	23f0      	movs	r3, #240	; 0xf0
 8005c56:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f002 f945 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005c62:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <FormInterface+0x2bc>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005c68:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <FormInterface+0x2c0>)
 8005c6a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005c6e:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"FILTER: Indoor    ",TFT_STRING_MODE_BACKGROUND);
 8005c70:	2300      	movs	r3, #0
 8005c72:	4a2c      	ldr	r2, [pc, #176]	; (8005d24 <FormInterface+0x2e4>)
 8005c74:	2103      	movs	r1, #3
 8005c76:	20dc      	movs	r0, #220	; 0xdc
 8005c78:	f001 ffb4 	bl	8007be4 <tft_puts14x24>
}
 8005c7c:	e034      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == MANUAL){
 8005c7e:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <FormInterface+0x2b0>)
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	2b0a      	cmp	r3, #10
 8005c84:	d116      	bne.n	8005cb4 <FormInterface+0x274>
			  tft_fill(0,0,320,240,BLACK);
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	23f0      	movs	r3, #240	; 0xf0
 8005c8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c90:	2100      	movs	r1, #0
 8005c92:	2000      	movs	r0, #0
 8005c94:	f002 f92a 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005c98:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <FormInterface+0x2bc>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005c9e:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <FormInterface+0x2c0>)
 8005ca0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005ca4:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"CONTROL: Manual    ",TFT_STRING_MODE_BACKGROUND);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <FormInterface+0x2e8>)
 8005caa:	2103      	movs	r1, #3
 8005cac:	20dc      	movs	r0, #220	; 0xdc
 8005cae:	f001 ff99 	bl	8007be4 <tft_puts14x24>
}
 8005cb2:	e019      	b.n	8005ce8 <FormInterface+0x2a8>
		  else if (num == AUTO){
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <FormInterface+0x2b0>)
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	2b0b      	cmp	r3, #11
 8005cba:	d115      	bne.n	8005ce8 <FormInterface+0x2a8>
			  tft_fill(0,0,320,240,BLACK);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	23f0      	movs	r3, #240	; 0xf0
 8005cc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f002 f90f 	bl	8007eec <tft_fill>
			  BACK_COLOR=BLACK;
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <FormInterface+0x2bc>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	801a      	strh	r2, [r3, #0]
			  POINT_COLOR=RED;
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <FormInterface+0x2c0>)
 8005cd6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005cda:	801a      	strh	r2, [r3, #0]
			  tft_puts14x24(220,3,(int8_t*)"CONTROL: Auto    ",TFT_STRING_MODE_BACKGROUND);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <FormInterface+0x2ec>)
 8005ce0:	2103      	movs	r1, #3
 8005ce2:	20dc      	movs	r0, #220	; 0xdc
 8005ce4:	f001 ff7e 	bl	8007be4 <tft_puts14x24>
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	2000009e 	.word	0x2000009e
 8005cf4:	200007f8 	.word	0x200007f8
 8005cf8:	200004f8 	.word	0x200004f8
 8005cfc:	20000898 	.word	0x20000898
 8005d00:	2000089a 	.word	0x2000089a
 8005d04:	080090c4 	.word	0x080090c4
 8005d08:	080090d4 	.word	0x080090d4
 8005d0c:	080090e8 	.word	0x080090e8
 8005d10:	080090fc 	.word	0x080090fc
 8005d14:	08009110 	.word	0x08009110
 8005d18:	08009124 	.word	0x08009124
 8005d1c:	08009138 	.word	0x08009138
 8005d20:	08009150 	.word	0x08009150
 8005d24:	08009168 	.word	0x08009168
 8005d28:	0800917c 	.word	0x0800917c
 8005d2c:	08009190 	.word	0x08009190

08005d30 <IAQform>:
void IAQform(void){
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0

	  tft_draw_circle(150,119,87);
 8005d34:	2257      	movs	r2, #87	; 0x57
 8005d36:	2177      	movs	r1, #119	; 0x77
 8005d38:	2096      	movs	r0, #150	; 0x96
 8005d3a:	f002 f80d 	bl	8007d58 <tft_draw_circle>
	  tft_draw_circle(150,119,88);
 8005d3e:	2258      	movs	r2, #88	; 0x58
 8005d40:	2177      	movs	r1, #119	; 0x77
 8005d42:	2096      	movs	r0, #150	; 0x96
 8005d44:	f002 f808 	bl	8007d58 <tft_draw_circle>
	  tft_draw_circle(150,119,89);
 8005d48:	2259      	movs	r2, #89	; 0x59
 8005d4a:	2177      	movs	r1, #119	; 0x77
 8005d4c:	2096      	movs	r0, #150	; 0x96
 8005d4e:	f002 f803 	bl	8007d58 <tft_draw_circle>
	  tft_draw_circle(150,119,90);
 8005d52:	225a      	movs	r2, #90	; 0x5a
 8005d54:	2177      	movs	r1, #119	; 0x77
 8005d56:	2096      	movs	r0, #150	; 0x96
 8005d58:	f001 fffe 	bl	8007d58 <tft_draw_circle>
	  tft_draw_circle(150,119,91);
 8005d5c:	225b      	movs	r2, #91	; 0x5b
 8005d5e:	2177      	movs	r1, #119	; 0x77
 8005d60:	2096      	movs	r0, #150	; 0x96
 8005d62:	f001 fff9 	bl	8007d58 <tft_draw_circle>
	  tft_draw_circle(150,119,92);
 8005d66:	225c      	movs	r2, #92	; 0x5c
 8005d68:	2177      	movs	r1, #119	; 0x77
 8005d6a:	2096      	movs	r0, #150	; 0x96
 8005d6c:	f001 fff4 	bl	8007d58 <tft_draw_circle>


	  tft_puts26x48(100,80,(int8_t*)"IAQ",TFT_STRING_MODE_NO_BACKGROUND);
 8005d70:	2301      	movs	r3, #1
 8005d72:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <IAQform+0x70>)
 8005d74:	2150      	movs	r1, #80	; 0x50
 8005d76:	2064      	movs	r0, #100	; 0x64
 8005d78:	f001 ffb0 	bl	8007cdc <tft_puts26x48>
	  tft_puts26x48(100,81,(int8_t*)"IAQ",TFT_STRING_MODE_NO_BACKGROUND);
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <IAQform+0x70>)
 8005d80:	2151      	movs	r1, #81	; 0x51
 8005d82:	2064      	movs	r0, #100	; 0x64
 8005d84:	f001 ffaa 	bl	8007cdc <tft_puts26x48>

	  POINT_COLOR=GBLUE;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <IAQform+0x74>)
 8005d8a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005d8e:	801a      	strh	r2, [r3, #0]
	  tft_puts8x16(17,3,(int8_t*)"VIETTEL HIGH TECHNOLOGY",TFT_STRING_MODE_NO_BACKGROUND);
 8005d90:	2301      	movs	r3, #1
 8005d92:	4a05      	ldr	r2, [pc, #20]	; (8005da8 <IAQform+0x78>)
 8005d94:	2103      	movs	r1, #3
 8005d96:	2011      	movs	r0, #17
 8005d98:	f001 fed6 	bl	8007b48 <tft_puts8x16>
}
 8005d9c:	bf00      	nop
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	080091a4 	.word	0x080091a4
 8005da4:	2000089a 	.word	0x2000089a
 8005da8:	080091a8 	.word	0x080091a8

08005dac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	d111      	bne.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		num=0;
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	801a      	strh	r2, [r3, #0]
		FLAG=0;
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
		FLAG1=0;
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
		FLAG2=0;
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
		FLAG3=0;
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
		FLAG4=0;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]

	}
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	2000009e 	.word	0x2000009e
 8005df4:	200000a0 	.word	0x200000a0
 8005df8:	200000a1 	.word	0x200000a1
 8005dfc:	200000a2 	.word	0x200000a2
 8005e00:	200000a3 	.word	0x200000a3
 8005e04:	200000a4 	.word	0x200000a4

08005e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b094      	sub	sp, #80	; 0x50
 8005e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e0e:	f107 0320 	add.w	r3, r7, #32
 8005e12:	2230      	movs	r2, #48	; 0x30
 8005e14:	2100      	movs	r1, #0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f002 fc70 	bl	80086fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e1c:	f107 030c 	add.w	r3, r7, #12
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	60da      	str	r2, [r3, #12]
 8005e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <SystemClock_Config+0xcc>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <SystemClock_Config+0xcc>)
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <SystemClock_Config+0xcc>)
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <SystemClock_Config+0xd0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a21      	ldr	r2, [pc, #132]	; (8005ed8 <SystemClock_Config+0xd0>)
 8005e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <SystemClock_Config+0xd0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e64:	2302      	movs	r3, #2
 8005e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e70:	2302      	movs	r3, #2
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e74:	2300      	movs	r3, #0
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005e78:	2310      	movs	r3, #16
 8005e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005e7c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005e82:	2304      	movs	r3, #4
 8005e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005e86:	2304      	movs	r3, #4
 8005e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e8a:	f107 0320 	add.w	r3, r7, #32
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fc f826 	bl	8001ee0 <HAL_RCC_OscConfig>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005e9a:	f000 faa9 	bl	80063f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e9e:	230f      	movs	r3, #15
 8005ea0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fc fa52 	bl	8002364 <HAL_RCC_ClockConfig>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005ec6:	f000 fa93 	bl	80063f0 <Error_Handler>
  }
}
 8005eca:	bf00      	nop
 8005ecc:	3750      	adds	r7, #80	; 0x50
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40007000 	.word	0x40007000

08005edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ee0:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005ee2:	4a13      	ldr	r2, [pc, #76]	; (8005f30 <MX_I2C1_Init+0x54>)
 8005ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005ee6:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005ee8:	4a12      	ldr	r2, [pc, #72]	; (8005f34 <MX_I2C1_Init+0x58>)
 8005eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005eec:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005f18:	4804      	ldr	r0, [pc, #16]	; (8005f2c <MX_I2C1_Init+0x50>)
 8005f1a:	f7fb f88b 	bl	8001034 <HAL_I2C_Init>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005f24:	f000 fa64 	bl	80063f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f28:	bf00      	nop
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	200001c8 	.word	0x200001c8
 8005f30:	40005400 	.word	0x40005400
 8005f34:	000186a0 	.word	0x000186a0

08005f38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005f3c:	4b17      	ldr	r3, [pc, #92]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <MX_SPI2_Init+0x68>)
 8005f40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005f42:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005f48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005f50:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005f62:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005f76:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f84:	220a      	movs	r2, #10
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005f88:	4804      	ldr	r0, [pc, #16]	; (8005f9c <MX_SPI2_Init+0x64>)
 8005f8a:	f7fc fbb3 	bl	80026f4 <HAL_SPI_Init>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005f94:	f000 fa2c 	bl	80063f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005f98:	bf00      	nop
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	2000016c 	.word	0x2000016c
 8005fa0:	40003800 	.word	0x40003800

08005fa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b092      	sub	sp, #72	; 0x48
 8005fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	611a      	str	r2, [r3, #16]
 8005fc4:	615a      	str	r2, [r3, #20]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	2220      	movs	r2, #32
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f002 fb94 	bl	80086fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005fd4:	4b38      	ldr	r3, [pc, #224]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005fd6:	4a39      	ldr	r2, [pc, #228]	; (80060bc <MX_TIM1_Init+0x118>)
 8005fd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005fda:	4b37      	ldr	r3, [pc, #220]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fe0:	4b35      	ldr	r3, [pc, #212]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8005fe6:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fec:	4b32      	ldr	r3, [pc, #200]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005ff2:	4b31      	ldr	r3, [pc, #196]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <MX_TIM1_Init+0x114>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ffe:	482e      	ldr	r0, [pc, #184]	; (80060b8 <MX_TIM1_Init+0x114>)
 8006000:	f7fc ff29 	bl	8002e56 <HAL_TIM_PWM_Init>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800600a:	f000 f9f1 	bl	80063f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800600e:	2300      	movs	r3, #0
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006012:	2300      	movs	r3, #0
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006016:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800601a:	4619      	mov	r1, r3
 800601c:	4826      	ldr	r0, [pc, #152]	; (80060b8 <MX_TIM1_Init+0x114>)
 800601e:	f7fd fcf0 	bl	8003a02 <HAL_TIMEx_MasterConfigSynchronization>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8006028:	f000 f9e2 	bl	80063f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800602c:	2360      	movs	r3, #96	; 0x60
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006030:	2300      	movs	r3, #0
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006034:	2300      	movs	r3, #0
 8006036:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006038:	2300      	movs	r3, #0
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800603c:	2300      	movs	r3, #0
 800603e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006040:	2300      	movs	r3, #0
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800604c:	2200      	movs	r2, #0
 800604e:	4619      	mov	r1, r3
 8006050:	4819      	ldr	r0, [pc, #100]	; (80060b8 <MX_TIM1_Init+0x114>)
 8006052:	f7fd f865 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800605c:	f000 f9c8 	bl	80063f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006064:	220c      	movs	r2, #12
 8006066:	4619      	mov	r1, r3
 8006068:	4813      	ldr	r0, [pc, #76]	; (80060b8 <MX_TIM1_Init+0x114>)
 800606a:	f7fd f859 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8006074:	f000 f9bc 	bl	80063f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006078:	2300      	movs	r3, #0
 800607a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800607c:	2300      	movs	r3, #0
 800607e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800608c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006090:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4807      	ldr	r0, [pc, #28]	; (80060b8 <MX_TIM1_Init+0x114>)
 800609c:	f7fd fcf6 	bl	8003a8c <HAL_TIMEx_ConfigBreakDeadTime>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80060a6:	f000 f9a3 	bl	80063f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80060aa:	4803      	ldr	r0, [pc, #12]	; (80060b8 <MX_TIM1_Init+0x114>)
 80060ac:	f001 f9ae 	bl	800740c <HAL_TIM_MspPostInit>

}
 80060b0:	bf00      	nop
 80060b2:	3748      	adds	r7, #72	; 0x48
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000514 	.word	0x20000514
 80060bc:	40010000 	.word	0x40010000

080060c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	605a      	str	r2, [r3, #4]
 80060d0:	609a      	str	r2, [r3, #8]
 80060d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060d4:	f107 0320 	add.w	r3, r7, #32
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060de:	1d3b      	adds	r3, r7, #4
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	611a      	str	r2, [r3, #16]
 80060ec:	615a      	str	r2, [r3, #20]
 80060ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80060f0:	4b38      	ldr	r3, [pc, #224]	; (80061d4 <MX_TIM2_Init+0x114>)
 80060f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80060f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 80060f8:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <MX_TIM2_Init+0x114>)
 80060fa:	f240 623f 	movw	r2, #1599	; 0x63f
 80060fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006100:	4b34      	ldr	r3, [pc, #208]	; (80061d4 <MX_TIM2_Init+0x114>)
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8006106:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <MX_TIM2_Init+0x114>)
 8006108:	4a33      	ldr	r2, [pc, #204]	; (80061d8 <MX_TIM2_Init+0x118>)
 800610a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800610c:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <MX_TIM2_Init+0x114>)
 800610e:	2200      	movs	r2, #0
 8006110:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006112:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <MX_TIM2_Init+0x114>)
 8006114:	2200      	movs	r2, #0
 8006116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006118:	482e      	ldr	r0, [pc, #184]	; (80061d4 <MX_TIM2_Init+0x114>)
 800611a:	f7fc fe4d 	bl	8002db8 <HAL_TIM_Base_Init>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8006124:	f000 f964 	bl	80063f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800612e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006132:	4619      	mov	r1, r3
 8006134:	4827      	ldr	r0, [pc, #156]	; (80061d4 <MX_TIM2_Init+0x114>)
 8006136:	f7fd f8b9 	bl	80032ac <HAL_TIM_ConfigClockSource>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8006140:	f000 f956 	bl	80063f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006144:	4823      	ldr	r0, [pc, #140]	; (80061d4 <MX_TIM2_Init+0x114>)
 8006146:	f7fc fe86 	bl	8002e56 <HAL_TIM_PWM_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8006150:	f000 f94e 	bl	80063f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006154:	2300      	movs	r3, #0
 8006156:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006158:	2300      	movs	r3, #0
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800615c:	f107 0320 	add.w	r3, r7, #32
 8006160:	4619      	mov	r1, r3
 8006162:	481c      	ldr	r0, [pc, #112]	; (80061d4 <MX_TIM2_Init+0x114>)
 8006164:	f7fd fc4d 	bl	8003a02 <HAL_TIMEx_MasterConfigSynchronization>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800616e:	f000 f93f 	bl	80063f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006172:	2360      	movs	r3, #96	; 0x60
 8006174:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	2200      	movs	r2, #0
 8006186:	4619      	mov	r1, r3
 8006188:	4812      	ldr	r0, [pc, #72]	; (80061d4 <MX_TIM2_Init+0x114>)
 800618a:	f7fc ffc9 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8006194:	f000 f92c 	bl	80063f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006198:	1d3b      	adds	r3, r7, #4
 800619a:	2204      	movs	r2, #4
 800619c:	4619      	mov	r1, r3
 800619e:	480d      	ldr	r0, [pc, #52]	; (80061d4 <MX_TIM2_Init+0x114>)
 80061a0:	f7fc ffbe 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80061aa:	f000 f921 	bl	80063f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	2208      	movs	r2, #8
 80061b2:	4619      	mov	r1, r3
 80061b4:	4807      	ldr	r0, [pc, #28]	; (80061d4 <MX_TIM2_Init+0x114>)
 80061b6:	f7fc ffb3 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80061c0:	f000 f916 	bl	80063f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80061c4:	4803      	ldr	r0, [pc, #12]	; (80061d4 <MX_TIM2_Init+0x114>)
 80061c6:	f001 f921 	bl	800740c <HAL_TIM_MspPostInit>

}
 80061ca:	bf00      	nop
 80061cc:	3738      	adds	r7, #56	; 0x38
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	200007f8 	.word	0x200007f8
 80061d8:	000f423f 	.word	0x000f423f

080061dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061e2:	f107 0320 	add.w	r3, r7, #32
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80061ec:	1d3b      	adds	r3, r7, #4
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	605a      	str	r2, [r3, #4]
 80061f4:	609a      	str	r2, [r3, #8]
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	611a      	str	r2, [r3, #16]
 80061fa:	615a      	str	r2, [r3, #20]
 80061fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80061fe:	4b27      	ldr	r3, [pc, #156]	; (800629c <MX_TIM3_Init+0xc0>)
 8006200:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <MX_TIM3_Init+0xc4>)
 8006202:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006204:	4b25      	ldr	r3, [pc, #148]	; (800629c <MX_TIM3_Init+0xc0>)
 8006206:	2200      	movs	r2, #0
 8006208:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <MX_TIM3_Init+0xc0>)
 800620c:	2200      	movs	r2, #0
 800620e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8006210:	4b22      	ldr	r3, [pc, #136]	; (800629c <MX_TIM3_Init+0xc0>)
 8006212:	2200      	movs	r2, #0
 8006214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006216:	4b21      	ldr	r3, [pc, #132]	; (800629c <MX_TIM3_Init+0xc0>)
 8006218:	2200      	movs	r2, #0
 800621a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800621c:	4b1f      	ldr	r3, [pc, #124]	; (800629c <MX_TIM3_Init+0xc0>)
 800621e:	2200      	movs	r2, #0
 8006220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006222:	481e      	ldr	r0, [pc, #120]	; (800629c <MX_TIM3_Init+0xc0>)
 8006224:	f7fc fe17 	bl	8002e56 <HAL_TIM_PWM_Init>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800622e:	f000 f8df 	bl	80063f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800623a:	f107 0320 	add.w	r3, r7, #32
 800623e:	4619      	mov	r1, r3
 8006240:	4816      	ldr	r0, [pc, #88]	; (800629c <MX_TIM3_Init+0xc0>)
 8006242:	f7fd fbde 	bl	8003a02 <HAL_TIMEx_MasterConfigSynchronization>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800624c:	f000 f8d0 	bl	80063f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006250:	2360      	movs	r3, #96	; 0x60
 8006252:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	2200      	movs	r2, #0
 8006264:	4619      	mov	r1, r3
 8006266:	480d      	ldr	r0, [pc, #52]	; (800629c <MX_TIM3_Init+0xc0>)
 8006268:	f7fc ff5a 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006272:	f000 f8bd 	bl	80063f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	2204      	movs	r2, #4
 800627a:	4619      	mov	r1, r3
 800627c:	4807      	ldr	r0, [pc, #28]	; (800629c <MX_TIM3_Init+0xc0>)
 800627e:	f7fc ff4f 	bl	8003120 <HAL_TIM_PWM_ConfigChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006288:	f000 f8b2 	bl	80063f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800628c:	4803      	ldr	r0, [pc, #12]	; (800629c <MX_TIM3_Init+0xc0>)
 800628e:	f001 f8bd 	bl	800740c <HAL_TIM_MspPostInit>

}
 8006292:	bf00      	nop
 8006294:	3728      	adds	r7, #40	; 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000228 	.word	0x20000228
 80062a0:	40000400 	.word	0x40000400

080062a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <MX_USART1_UART_Init+0x50>)
 80062ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80062b6:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80062c8:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062ca:	220c      	movs	r2, #12
 80062cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062ce:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80062da:	4805      	ldr	r0, [pc, #20]	; (80062f0 <MX_USART1_UART_Init+0x4c>)
 80062dc:	f7fd fc3c 	bl	8003b58 <HAL_UART_Init>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80062e6:	f000 f883 	bl	80063f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000294 	.word	0x20000294
 80062f4:	40011000 	.word	0x40011000

080062f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	605a      	str	r2, [r3, #4]
 8006308:	609a      	str	r2, [r3, #8]
 800630a:	60da      	str	r2, [r3, #12]
 800630c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	4a33      	ldr	r2, [pc, #204]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006318:	f043 0304 	orr.w	r3, r3, #4
 800631c:	6313      	str	r3, [r2, #48]	; 0x30
 800631e:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	4a2c      	ldr	r2, [pc, #176]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006338:	6313      	str	r3, [r2, #48]	; 0x30
 800633a:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <MX_GPIO_Init+0xec>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006346:	2300      	movs	r3, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <MX_GPIO_Init+0xec>)
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	4a25      	ldr	r2, [pc, #148]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6313      	str	r3, [r2, #48]	; 0x30
 8006356:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	60bb      	str	r3, [r7, #8]
 8006360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <MX_GPIO_Init+0xec>)
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	6313      	str	r3, [r2, #48]	; 0x30
 8006372:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <MX_GPIO_Init+0xec>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800637e:	2200      	movs	r2, #0
 8006380:	f242 0130 	movw	r1, #8240	; 0x2030
 8006384:	4818      	ldr	r0, [pc, #96]	; (80063e8 <MX_GPIO_Init+0xf0>)
 8006386:	f7fa fe3b 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800638a:	2200      	movs	r2, #0
 800638c:	2103      	movs	r1, #3
 800638e:	4817      	ldr	r0, [pc, #92]	; (80063ec <MX_GPIO_Init+0xf4>)
 8006390:	f7fa fe36 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_LED_Pin|LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8006394:	2201      	movs	r2, #1
 8006396:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800639a:	4813      	ldr	r0, [pc, #76]	; (80063e8 <MX_GPIO_Init+0xf0>)
 800639c:	f7fa fe30 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 PC5 LCD_LED_Pin 
                           LCD_DC_RS_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5|LCD_LED_Pin 
 80063a0:	f242 33f0 	movw	r3, #9200	; 0x23f0
 80063a4:	617b      	str	r3, [r7, #20]
                          |LCD_DC_RS_Pin|LCD_RESET_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063a6:	2301      	movs	r3, #1
 80063a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ae:	2300      	movs	r3, #0
 80063b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063b2:	f107 0314 	add.w	r3, r7, #20
 80063b6:	4619      	mov	r1, r3
 80063b8:	480b      	ldr	r0, [pc, #44]	; (80063e8 <MX_GPIO_Init+0xf0>)
 80063ba:	f7fa fc9f 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063be:	2303      	movs	r3, #3
 80063c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ca:	2300      	movs	r3, #0
 80063cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	4619      	mov	r1, r3
 80063d4:	4805      	ldr	r0, [pc, #20]	; (80063ec <MX_GPIO_Init+0xf4>)
 80063d6:	f7fa fc91 	bl	8000cfc <HAL_GPIO_Init>

}
 80063da:	bf00      	nop
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40020800 	.word	0x40020800
 80063ec:	40020400 	.word	0x40020400

080063f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"
#include "sensirion_i2c.h"

uint8_t sensirion_common_generate_crc(uint8_t *data, uint16_t count) {
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800640a:	23ff      	movs	r3, #255	; 0xff
 800640c:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800640e:	2300      	movs	r3, #0
 8006410:	81fb      	strh	r3, [r7, #14]
 8006412:	e021      	b.n	8006458 <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8006414:	89fb      	ldrh	r3, [r7, #14]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	7b7b      	ldrb	r3, [r7, #13]
 800641e:	4053      	eors	r3, r2
 8006420:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8006422:	2308      	movs	r3, #8
 8006424:	733b      	strb	r3, [r7, #12]
 8006426:	e011      	b.n	800644c <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8006428:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800642c:	2b00      	cmp	r3, #0
 800642e:	da07      	bge.n	8006440 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8006430:	7b7b      	ldrb	r3, [r7, #13]
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	b25b      	sxtb	r3, r3
 8006436:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800643a:	b25b      	sxtb	r3, r3
 800643c:	737b      	strb	r3, [r7, #13]
 800643e:	e002      	b.n	8006446 <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8006440:	7b7b      	ldrb	r3, [r7, #13]
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8006446:	7b3b      	ldrb	r3, [r7, #12]
 8006448:	3b01      	subs	r3, #1
 800644a:	733b      	strb	r3, [r7, #12]
 800644c:	7b3b      	ldrb	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1ea      	bne.n	8006428 <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8006452:	89fb      	ldrh	r3, [r7, #14]
 8006454:	3301      	adds	r3, #1
 8006456:	81fb      	strh	r3, [r7, #14]
 8006458:	89fa      	ldrh	r2, [r7, #14]
 800645a:	887b      	ldrh	r3, [r7, #2]
 800645c:	429a      	cmp	r2, r3
 800645e:	d3d9      	bcc.n	8006414 <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8006460:	7b7b      	ldrb	r3, [r7, #13]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(uint8_t *data, uint16_t count,
                                  uint8_t checksum) {
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	807b      	strh	r3, [r7, #2]
 800647a:	4613      	mov	r3, r2
 800647c:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7ff ffbb 	bl	80063fe <sensirion_common_generate_crc>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	787b      	ldrb	r3, [r7, #1]
 800648e:	4293      	cmp	r3, r2
 8006490:	d002      	beq.n	8006498 <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295
 8006496:	e000      	b.n	800649a <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <sensirion_fill_cmd_send_buf>:

uint16_t sensirion_fill_cmd_send_buf(uint8_t *buf, uint16_t cmd,
                                     const uint16_t *args, uint8_t num_args) {
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	461a      	mov	r2, r3
 80064ae:	460b      	mov	r3, r1
 80064b0:	817b      	strh	r3, [r7, #10]
 80064b2:	4613      	mov	r3, r2
 80064b4:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 80064ba:	897b      	ldrh	r3, [r7, #10]
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	b29a      	uxth	r2, r3
 80064c0:	8abb      	ldrh	r3, [r7, #20]
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	82b9      	strh	r1, [r7, #20]
 80064c6:	4619      	mov	r1, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	440b      	add	r3, r1
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 80064d0:	8abb      	ldrh	r3, [r7, #20]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	82ba      	strh	r2, [r7, #20]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	897a      	ldrh	r2, [r7, #10]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
 80064e6:	e030      	b.n	800654a <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	0a1b      	lsrs	r3, r3, #8
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	8abb      	ldrh	r3, [r7, #20]
 80064f8:	1c59      	adds	r1, r3, #1
 80064fa:	82b9      	strh	r1, [r7, #20]
 80064fc:	4619      	mov	r1, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	440b      	add	r3, r1
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	8abb      	ldrh	r3, [r7, #20]
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	82b9      	strh	r1, [r7, #20]
 8006516:	4619      	mov	r1, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	440b      	add	r3, r1
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t *)&buf[idx - 2],
 8006520:	8abb      	ldrh	r3, [r7, #20]
 8006522:	3b02      	subs	r3, #2
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	2102      	movs	r1, #2
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ff67 	bl	80063fe <sensirion_common_generate_crc>
 8006530:	4603      	mov	r3, r0
 8006532:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8006534:	8abb      	ldrh	r3, [r7, #20]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	82ba      	strh	r2, [r7, #20]
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	7cfa      	ldrb	r2, [r7, #19]
 8006542:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	3301      	adds	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
 800654a:	7dfa      	ldrb	r2, [r7, #23]
 800654c:	7a7b      	ldrb	r3, [r7, #9]
 800654e:	429a      	cmp	r2, r3
 8006550:	d3ca      	bcc.n	80064e8 <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8006552:	8abb      	ldrh	r3, [r7, #20]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t *data,
                                          uint16_t num_words) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b096      	sub	sp, #88	; 0x58
 8006560:	af00      	add	r7, sp, #0
 8006562:	4603      	mov	r3, r0
 8006564:	6039      	str	r1, [r7, #0]
 8006566:	71fb      	strb	r3, [r7, #7]
 8006568:	4613      	mov	r3, r2
 800656a:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 800656c:	88bb      	ldrh	r3, [r7, #4]
 800656e:	461a      	mov	r2, r3
 8006570:	0052      	lsls	r2, r2, #1
 8006572:	4413      	add	r3, r2
 8006574:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t *const buf8 = (uint8_t *)word_buf;
 8006578:	f107 0308 	add.w	r3, r7, #8
 800657c:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 800657e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f958 	bl	800683c <sensirion_i2c_read>
 800658c:	4603      	mov	r3, r0
 800658e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    if (ret != STATUS_OK)
 8006592:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <sensirion_i2c_read_words_as_bytes+0x44>
        return ret;
 800659a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800659e:	e047      	b.n	8006630 <sensirion_i2c_read_words_as_bytes+0xd4>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80065ac:	e039      	b.n	8006622 <sensirion_i2c_read_words_as_bytes+0xc6>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 80065ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065b4:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 80065b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065ba:	3302      	adds	r3, #2
 80065bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065be:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	2102      	movs	r1, #2
 80065c6:	f7ff ff52 	bl	800646e <sensirion_common_check_crc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        if (ret != STATUS_OK)
 80065d0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <sensirion_i2c_read_words_as_bytes+0x82>
            return ret;
 80065d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80065dc:	e028      	b.n	8006630 <sensirion_i2c_read_words_as_bytes+0xd4>

        data[j++] = buf8[i];
 80065de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065e4:	441a      	add	r2, r3
 80065e6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 80065f0:	4619      	mov	r1, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	440b      	add	r3, r1
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 80065fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065fe:	3301      	adds	r3, #1
 8006600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006602:	441a      	add	r2, r3
 8006604:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006608:	1c59      	adds	r1, r3, #1
 800660a:	f8a7 1054 	strh.w	r1, [r7, #84]	; 0x54
 800660e:	4619      	mov	r1, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	440b      	add	r3, r1
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8006618:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800661c:	3303      	adds	r3, #3
 800661e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006622:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8006626:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800662a:	429a      	cmp	r2, r3
 800662c:	d3bf      	bcc.n	80065ae <sensirion_i2c_read_words_as_bytes+0x52>
    }

    return STATUS_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3758      	adds	r7, #88	; 0x58
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t *data_words,
                                 uint16_t num_words) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	71fb      	strb	r3, [r7, #7]
 8006644:	4613      	mov	r3, r2
 8006646:	80bb      	strh	r3, [r7, #4]
    int16_t ret;
    uint8_t i;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t *)data_words,
 8006648:	88ba      	ldrh	r2, [r7, #4]
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff84 	bl	800655c <sensirion_i2c_read_words_as_bytes>
 8006654:	4603      	mov	r3, r0
 8006656:	81bb      	strh	r3, [r7, #12]
                                            num_words);
    if (ret != STATUS_OK)
 8006658:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <sensirion_i2c_read_words+0x2e>
        return ret;
 8006660:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006664:	e022      	b.n	80066ac <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i)
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
 800666a:	e019      	b.n	80066a0 <sensirion_i2c_read_words+0x68>
        data_words[i] = be16_to_cpu(data_words[i]);
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	b21a      	sxth	r2, r3
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	440b      	add	r3, r1
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	b29b      	uxth	r3, r3
 8006688:	b21b      	sxth	r3, r3
 800668a:	4313      	orrs	r3, r2
 800668c:	b219      	sxth	r1, r3
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	4413      	add	r3, r2
 8006696:	b28a      	uxth	r2, r1
 8006698:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	3301      	adds	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	88ba      	ldrh	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d8e0      	bhi.n	800666c <sensirion_i2c_read_words+0x34>

    return STATUS_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	460a      	mov	r2, r1
 80066be:	71fb      	strb	r3, [r7, #7]
 80066c0:	4613      	mov	r3, r2
 80066c2:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 80066c4:	88b9      	ldrh	r1, [r7, #4]
 80066c6:	f107 000c 	add.w	r0, r7, #12
 80066ca:	2300      	movs	r3, #0
 80066cc:	2200      	movs	r2, #0
 80066ce:	f7ff fee8 	bl	80064a2 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 80066d2:	f107 010c 	add.w	r1, r7, #12
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	2202      	movs	r2, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 f8ca 	bl	8006874 <sensirion_i2c_write>
 80066e0:	4603      	mov	r3, r0
 80066e2:	b21b      	sxth	r3, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <sensirion_i2c_write_cmd_with_args>:

int16_t sensirion_i2c_write_cmd_with_args(uint8_t address, uint16_t command,
                                          const uint16_t *data_words,
                                          uint16_t num_words) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08e      	sub	sp, #56	; 0x38
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60ba      	str	r2, [r7, #8]
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	460b      	mov	r3, r1
 80066fc:	81bb      	strh	r3, [r7, #12]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[SENSIRION_MAX_BUFFER_WORDS];
    uint16_t buf_size;

    buf_size = sensirion_fill_cmd_send_buf(buf, command, data_words, num_words);
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	89b9      	ldrh	r1, [r7, #12]
 8006708:	f107 0014 	add.w	r0, r7, #20
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	f7ff fec8 	bl	80064a2 <sensirion_fill_cmd_send_buf>
 8006712:	4603      	mov	r3, r0
 8006714:	86fb      	strh	r3, [r7, #54]	; 0x36
    return sensirion_i2c_write(address, buf, buf_size);
 8006716:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006718:	f107 0114 	add.w	r1, r7, #20
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 f8a8 	bl	8006874 <sensirion_i2c_write>
 8006724:	4603      	mov	r3, r0
 8006726:	b21b      	sxth	r3, r3
}
 8006728:	4618      	mov	r0, r3
 800672a:	3738      	adds	r7, #56	; 0x38
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <sensirion_i2c_delayed_read_cmd>:

int16_t sensirion_i2c_delayed_read_cmd(uint8_t address, uint16_t cmd,
                                       uint32_t delay_us, uint16_t *data_words,
                                       uint16_t num_words) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60ba      	str	r2, [r7, #8]
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]
 800673e:	460b      	mov	r3, r1
 8006740:	81bb      	strh	r3, [r7, #12]
    int16_t ret;
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, cmd, NULL, 0);
 8006742:	89b9      	ldrh	r1, [r7, #12]
 8006744:	f107 0014 	add.w	r0, r7, #20
 8006748:	2300      	movs	r3, #0
 800674a:	2200      	movs	r2, #0
 800674c:	f7ff fea9 	bl	80064a2 <sensirion_fill_cmd_send_buf>
    ret = sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8006750:	f107 0114 	add.w	r1, r7, #20
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2202      	movs	r2, #2
 8006758:	4618      	mov	r0, r3
 800675a:	f000 f88b 	bl	8006874 <sensirion_i2c_write>
 800675e:	4603      	mov	r3, r0
 8006760:	82fb      	strh	r3, [r7, #22]
    if (ret != STATUS_OK)
 8006762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <sensirion_i2c_delayed_read_cmd+0x40>
        return ret;
 800676a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800676e:	e00c      	b.n	800678a <sensirion_i2c_delayed_read_cmd+0x5a>

    if (delay_us)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <sensirion_i2c_delayed_read_cmd+0x4c>
        sensirion_sleep_usec(delay_us);
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f000 f898 	bl	80068ac <sensirion_sleep_usec>

    return sensirion_i2c_read_words(address, data_words, num_words);
 800677c:	8c3a      	ldrh	r2, [r7, #32]
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff ff58 	bl	8006638 <sensirion_i2c_read_words>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <sensirion_i2c_read_cmd>:

int16_t sensirion_i2c_read_cmd(uint8_t address, uint16_t cmd,
                               uint16_t *data_words, uint16_t num_words) {
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af02      	add	r7, sp, #8
 8006798:	60ba      	str	r2, [r7, #8]
 800679a:	461a      	mov	r2, r3
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	460b      	mov	r3, r1
 80067a2:	81bb      	strh	r3, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80fb      	strh	r3, [r7, #6]
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
 80067a8:	89b9      	ldrh	r1, [r7, #12]
 80067aa:	7bf8      	ldrb	r0, [r7, #15]
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f7ff ffbc 	bl	8006730 <sensirion_i2c_delayed_read_cmd>
 80067b8:	4603      	mov	r3, r0
                                          num_words);
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <sensirion_i2c_init+0x68>)
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <sensirion_i2c_init+0x6c>)
 80067ce:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <sensirion_i2c_init+0x68>)
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <sensirion_i2c_init+0x70>)
 80067d4:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <sensirion_i2c_init+0x68>)
 80067d8:	2200      	movs	r2, #0
 80067da:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80067dc:	4b13      	ldr	r3, [pc, #76]	; (800682c <sensirion_i2c_init+0x68>)
 80067de:	2200      	movs	r2, #0
 80067e0:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <sensirion_i2c_init+0x68>)
 80067e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067e8:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <sensirion_i2c_init+0x68>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <sensirion_i2c_init+0x68>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <sensirion_i2c_init+0x68>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <sensirion_i2c_init+0x68>)
 80067fe:	2200      	movs	r2, #0
 8006800:	621a      	str	r2, [r3, #32]
    /* Enable the remapping of Pins 6/7 to 8/9 and the I2C clock before the
     * initialization of the GPIO Pins in HAL_I2C_Init(). This is a fix of the
     * code generated by CubeMX v4.16.0 */
    //__HAL_AFIO_REMAP_I2C1_ENABLE();
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <sensirion_i2c_init+0x74>)
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	4a0b      	ldr	r2, [pc, #44]	; (8006838 <sensirion_i2c_init+0x74>)
 800680c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006810:	6413      	str	r3, [r2, #64]	; 0x40
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <sensirion_i2c_init+0x74>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
    HAL_I2C_Init(&hi2c1);
 800681e:	4803      	ldr	r0, [pc, #12]	; (800682c <sensirion_i2c_init+0x68>)
 8006820:	f7fa fc08 	bl	8001034 <HAL_I2C_Init>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200000f4 	.word	0x200000f4
 8006830:	40005400 	.word	0x40005400
 8006834:	000186a0 	.word	0x000186a0
 8006838:	40023800 	.word	0x40023800

0800683c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t *data, uint16_t count) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af02      	add	r7, sp, #8
 8006842:	4603      	mov	r3, r0
 8006844:	6039      	str	r1, [r7, #0]
 8006846:	71fb      	strb	r3, [r7, #7]
 8006848:	4613      	mov	r3, r2
 800684a:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	b29b      	uxth	r3, r3
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	b299      	uxth	r1, r3
 8006854:	88ba      	ldrh	r2, [r7, #4]
 8006856:	2364      	movs	r3, #100	; 0x64
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	4804      	ldr	r0, [pc, #16]	; (8006870 <sensirion_i2c_read+0x34>)
 8006860:	f7fa fe0e 	bl	8001480 <HAL_I2C_Master_Receive>
 8006864:	4603      	mov	r3, r0
 8006866:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200000f4 	.word	0x200000f4

08006874 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t *data,
                           uint16_t count) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af02      	add	r7, sp, #8
 800687a:	4603      	mov	r3, r0
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	71fb      	strb	r3, [r7, #7]
 8006880:	4613      	mov	r3, r2
 8006882:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	b29b      	uxth	r3, r3
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	b299      	uxth	r1, r3
 800688c:	88ba      	ldrh	r2, [r7, #4]
 800688e:	2364      	movs	r3, #100	; 0x64
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	4804      	ldr	r0, [pc, #16]	; (80068a8 <sensirion_i2c_write+0x34>)
 8006898:	f7fa fcf4 	bl	8001284 <HAL_I2C_Master_Transmit>
 800689c:	4603      	mov	r3, r0
 800689e:	b25b      	sxtb	r3, r3
                                           (uint8_t *)data, count, 100);
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200000f4 	.word	0x200000f4

080068ac <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a12      	ldr	r2, [pc, #72]	; (8006900 <sensirion_sleep_usec+0x54>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	099b      	lsrs	r3, r3, #6
 80068be:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <sensirion_sleep_usec+0x54>)
 80068c4:	fba3 1302 	umull	r1, r3, r3, r2
 80068c8:	099b      	lsrs	r3, r3, #6
 80068ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <sensirion_sleep_usec+0x32>
        msec++;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3301      	adds	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 80068de:	f7fa f8cf 	bl	8000a80 <HAL_GetHalVersion>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <sensirion_sleep_usec+0x58>)
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d802      	bhi.n	80068f0 <sensirion_sleep_usec+0x44>
        msec++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7fa f8a3 	bl	8000a3c <HAL_Delay>
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	10624dd3 	.word	0x10624dd3
 8006904:	010100ff 	.word	0x010100ff

08006908 <sgp30_measure_iaq>:
        return STATUS_OK;

    return STATUS_FAIL;
}

int16_t sgp30_measure_iaq() {
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_MEASURE);
 800690c:	2358      	movs	r3, #88	; 0x58
 800690e:	f242 0108 	movw	r1, #8200	; 0x2008
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff fece 	bl	80066b4 <sensirion_i2c_write_cmd>
 8006918:	4603      	mov	r3, r0
}
 800691a:	4618      	mov	r0, r3
 800691c:	bd80      	pop	{r7, pc}

0800691e <sgp30_read_iaq>:

int16_t sgp30_read_iaq(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm) {
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
    int16_t ret;
    uint16_t words[SGP30_CMD_IAQ_MEASURE_WORDS];

    ret = sensirion_i2c_read_words(SGP30_I2C_ADDRESS, words,
 8006928:	2058      	movs	r0, #88	; 0x58
 800692a:	f107 0308 	add.w	r3, r7, #8
 800692e:	2202      	movs	r2, #2
 8006930:	4619      	mov	r1, r3
 8006932:	f7ff fe81 	bl	8006638 <sensirion_i2c_read_words>
 8006936:	4603      	mov	r3, r0
 8006938:	81fb      	strh	r3, [r7, #14]
                                   SGP30_CMD_IAQ_MEASURE_WORDS);

    *tvoc_ppb = words[1];
 800693a:	897a      	ldrh	r2, [r7, #10]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = words[0];
 8006940:	893a      	ldrh	r2, [r7, #8]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	801a      	strh	r2, [r3, #0]

    return ret;
 8006946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <sgp30_measure_iaq_blocking_read>:

int16_t sgp30_measure_iaq_blocking_read(uint16_t *tvoc_ppb,
                                        uint16_t *co2_eq_ppm) {
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = sgp30_measure_iaq();
 800695c:	f7ff ffd4 	bl	8006908 <sgp30_measure_iaq>
 8006960:	4603      	mov	r3, r0
 8006962:	81fb      	strh	r3, [r7, #14]
    if (ret != STATUS_OK)
 8006964:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <sgp30_measure_iaq_blocking_read+0x20>
        return ret;
 800696c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006970:	e008      	b.n	8006984 <sgp30_measure_iaq_blocking_read+0x32>

    sensirion_sleep_usec(SGP30_CMD_IAQ_MEASURE_DURATION_US);
 8006972:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8006976:	f7ff ff99 	bl	80068ac <sensirion_sleep_usec>

    return sgp30_read_iaq(tvoc_ppb, co2_eq_ppm);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ffce 	bl	800691e <sgp30_read_iaq>
 8006982:	4603      	mov	r3, r0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <sgp30_set_absolute_humidity>:
    sensirion_sleep_usec(SGP30_CMD_SET_TVOC_BASELINE_DURATION_US);

    return ret;
}

int16_t sgp30_set_absolute_humidity(uint32_t absolute_humidity) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint16_t ah_scaled;

    if (absolute_humidity > 256000)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 800699a:	d902      	bls.n	80069a2 <sgp30_set_absolute_humidity+0x16>
        return STATUS_FAIL;
 800699c:	f04f 33ff 	mov.w	r3, #4294967295
 80069a0:	e017      	b.n	80069d2 <sgp30_set_absolute_humidity+0x46>

    /* ah_scaled = (absolute_humidity / 1000) * 256 */
    ah_scaled = (uint16_t)((absolute_humidity * 16777) >> 16);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f244 1289 	movw	r2, #16777	; 0x4189
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
 80069ac:	0c1b      	lsrs	r3, r3, #16
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	81bb      	strh	r3, [r7, #12]

    ret = sensirion_i2c_write_cmd_with_args(
 80069b2:	2058      	movs	r0, #88	; 0x58
 80069b4:	f107 020c 	add.w	r2, r7, #12
 80069b8:	2301      	movs	r3, #1
 80069ba:	f242 0161 	movw	r1, #8289	; 0x2061
 80069be:	f7ff fe95 	bl	80066ec <sensirion_i2c_write_cmd_with_args>
 80069c2:	4603      	mov	r3, r0
 80069c4:	81fb      	strh	r3, [r7, #14]
        SGP30_I2C_ADDRESS, SGP30_CMD_SET_ABSOLUTE_HUMIDITY, &ah_scaled,
        SENSIRION_NUM_WORDS(ah_scaled));

    sensirion_sleep_usec(SGP30_CMD_SET_ABSOLUTE_HUMIDITY_DURATION_US);
 80069c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80069ca:	f7ff ff6f 	bl	80068ac <sensirion_sleep_usec>

    return ret;
 80069ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <sgp30_iaq_init>:
                 (((uint64_t)words[2]) << 0);

    return STATUS_OK;
}

int16_t sgp30_iaq_init() {
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
    int16_t ret =
        sensirion_i2c_write_cmd(SGP30_I2C_ADDRESS, SGP30_CMD_IAQ_INIT);
 80069e0:	2358      	movs	r3, #88	; 0x58
    int16_t ret =
 80069e2:	f242 0103 	movw	r1, #8195	; 0x2003
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fe64 	bl	80066b4 <sensirion_i2c_write_cmd>
 80069ec:	4603      	mov	r3, r0
 80069ee:	80fb      	strh	r3, [r7, #6]
    sensirion_sleep_usec(SGP30_CMD_IAQ_INIT_DURATION_US);
 80069f0:	f242 7010 	movw	r0, #10000	; 0x2710
 80069f4:	f7ff ff5a 	bl	80068ac <sensirion_sleep_usec>
    return ret;
 80069f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <shtc1_measure_blocking_read>:

int16_t shtc1_wake_up(void) {
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_WAKEUP);
}

int16_t shtc1_measure_blocking_read(int32_t *temperature, int32_t *humidity) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = shtc1_measure();
 8006a0e:	f000 f817 	bl	8006a40 <shtc1_measure>
 8006a12:	4603      	mov	r3, r0
 8006a14:	81fb      	strh	r3, [r7, #14]
    if (ret)
 8006a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <shtc1_measure_blocking_read+0x20>
        return ret;
 8006a1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a22:	e008      	b.n	8006a36 <shtc1_measure_blocking_read+0x32>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
    sensirion_sleep_usec(SHTC1_MEASUREMENT_DURATION_USEC);
 8006a24:	f44f 5061 	mov.w	r0, #14400	; 0x3840
 8006a28:	f7ff ff40 	bl	80068ac <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
    return shtc1_read(temperature, humidity);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f814 	bl	8006a5c <shtc1_read>
 8006a34:	4603      	mov	r3, r0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <shtc1_measure>:

int16_t shtc1_measure(void) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, shtc1_cmd_measure);
 8006a44:	2270      	movs	r2, #112	; 0x70
 8006a46:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <shtc1_measure+0x18>)
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7ff fe31 	bl	80066b4 <sensirion_i2c_write_cmd>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000014 	.word	0x20000014

08006a5c <shtc1_read>:

int16_t shtc1_read(int32_t *temperature, int32_t *humidity) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHTC1_ADDRESS, words,
 8006a66:	2070      	movs	r0, #112	; 0x70
 8006a68:	f107 0308 	add.w	r3, r7, #8
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f7ff fde2 	bl	8006638 <sensirion_i2c_read_words>
 8006a74:	4603      	mov	r3, r0
 8006a76:	81fb      	strh	r3, [r7, #14]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 8006a78:	893b      	ldrh	r3, [r7, #8]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f245 5373 	movw	r3, #21875	; 0x5573
 8006a80:	fb03 f302 	mul.w	r3, r3, r2
 8006a84:	135b      	asrs	r3, r3, #13
 8006a86:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8006a8a:	3bc8      	subs	r3, #200	; 0xc8
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6013      	str	r3, [r2, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
 8006a90:	897b      	ldrh	r3, [r7, #10]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8006a98:	fb03 f302 	mul.w	r3, r3, r2
 8006a9c:	135a      	asrs	r2, r3, #13
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	601a      	str	r2, [r3, #0]

    return ret;
 8006aa2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <sps30_start_measurement>:
    }

    return 0;
}

int16_t sps30_start_measurement() {
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
    const uint16_t arg = SPS_CMD_START_MEASUREMENT_ARG;
 8006ab4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ab8:	80bb      	strh	r3, [r7, #4]

    int16_t ret = sensirion_i2c_write_cmd_with_args(
 8006aba:	1d3a      	adds	r2, r7, #4
 8006abc:	2301      	movs	r3, #1
 8006abe:	2110      	movs	r1, #16
 8006ac0:	2069      	movs	r0, #105	; 0x69
 8006ac2:	f7ff fe13 	bl	80066ec <sensirion_i2c_write_cmd_with_args>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	80fb      	strh	r3, [r7, #6]
        SPS30_I2C_ADDRESS, SPS_CMD_START_MEASUREMENT, &arg,
        SENSIRION_NUM_WORDS(arg));

    sensirion_sleep_usec(SPS_CMD_DELAY_USEC);
 8006aca:	f242 7010 	movw	r0, #10000	; 0x2710
 8006ace:	f7ff feed 	bl	80068ac <sensirion_sleep_usec>

    return ret;
 8006ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <sps30_read_measurement>:
int16_t sps30_read_data_ready(uint16_t *data_ready) {
    return sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_GET_DATA_READY,
                                  data_ready, SENSIRION_NUM_WORDS(*data_ready));
}

int16_t sps30_read_measurement(struct sps30_measurement *measurement) {
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b090      	sub	sp, #64	; 0x40
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
        uint16_t u16_value[2];
        uint32_t u32_value;
        float32_t f32_value;
    } val, data[10];

    ret = sensirion_i2c_read_cmd(SPS30_I2C_ADDRESS, SPS_CMD_READ_MEASUREMENT,
 8006ae6:	f107 0208 	add.w	r2, r7, #8
 8006aea:	2314      	movs	r3, #20
 8006aec:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006af0:	2069      	movs	r0, #105	; 0x69
 8006af2:	f7ff fe4e 	bl	8006792 <sensirion_i2c_read_cmd>
 8006af6:	4603      	mov	r3, r0
 8006af8:	87bb      	strh	r3, [r7, #60]	; 0x3c
                                 data->u16_value, SENSIRION_NUM_WORDS(data));
    if (ret != STATUS_OK)
 8006afa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <sps30_read_measurement+0x2a>
        return ret;
 8006b02:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8006b06:	e22d      	b.n	8006f64 <sps30_read_measurement+0x486>

    SENSIRION_WORDS_TO_BYTES(data->u16_value, SENSIRION_NUM_WORDS(data));
 8006b08:	f107 0308 	add.w	r3, r7, #8
 8006b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b0e:	2314      	movs	r3, #20
 8006b10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b12:	2300      	movs	r3, #0
 8006b14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b16:	e019      	b.n	8006b4c <sps30_read_measurement+0x6e>
 8006b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	b21a      	sxth	r2, r3
 8006b26:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b2c:	440b      	add	r3, r1
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	0a1b      	lsrs	r3, r3, #8
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	b21b      	sxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b219      	sxth	r1, r3
 8006b3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b40:	4413      	add	r3, r2
 8006b42:	b28a      	uxth	r2, r1
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b48:	3301      	adds	r3, #1
 8006b4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b4c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006b4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3e1      	bcc.n	8006b18 <sps30_read_measurement+0x3a>

    idx = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006b58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006b60:	4413      	add	r3, r2
 8006b62:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	021a      	lsls	r2, r3, #8
 8006b6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006b72:	440b      	add	r3, r1
 8006b74:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	041a      	lsls	r2, r3, #16
 8006b82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006b8a:	440b      	add	r3, r1
 8006b8c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006b90:	0c1b      	lsrs	r3, r3, #16
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	0219      	lsls	r1, r3, #8
 8006b96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006b9e:	4403      	add	r3, r0
 8006ba0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006ba4:	0c1b      	lsrs	r3, r3, #16
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	0a1b      	lsrs	r3, r3, #8
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	430b      	orrs	r3, r1
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_1p0 = val.f32_value;
 8006bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
    ++idx;
 8006bba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006bc8:	4413      	add	r3, r2
 8006bca:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	021a      	lsls	r2, r3, #8
 8006bd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006bda:	440b      	add	r3, r1
 8006bdc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	4313      	orrs	r3, r2
 8006be8:	041a      	lsls	r2, r3, #16
 8006bea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	0219      	lsls	r1, r3, #8
 8006bfe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006c06:	4403      	add	r3, r0
 8006c08:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	430b      	orrs	r3, r1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_2p5 = val.f32_value;
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	605a      	str	r2, [r3, #4]
    ++idx;
 8006c22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c24:	3301      	adds	r3, #1
 8006c26:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006c28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c30:	4413      	add	r3, r2
 8006c32:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	021a      	lsls	r2, r3, #8
 8006c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006c42:	440b      	add	r3, r1
 8006c44:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	041a      	lsls	r2, r3, #16
 8006c52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006c5a:	440b      	add	r3, r1
 8006c5c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006c60:	0c1b      	lsrs	r3, r3, #16
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	0219      	lsls	r1, r3, #8
 8006c66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006c6e:	4403      	add	r3, r0
 8006c70:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006c74:	0c1b      	lsrs	r3, r3, #16
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	0a1b      	lsrs	r3, r3, #8
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	4313      	orrs	r3, r2
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_4p0 = val.f32_value;
 8006c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
    ++idx;
 8006c8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c98:	4413      	add	r3, r2
 8006c9a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	021a      	lsls	r2, r3, #8
 8006ca2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006caa:	440b      	add	r3, r1
 8006cac:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	041a      	lsls	r2, r3, #16
 8006cba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	0219      	lsls	r1, r3, #8
 8006cce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006cd6:	4403      	add	r3, r0
 8006cd8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006cdc:	0c1b      	lsrs	r3, r3, #16
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->mc_10p0 = val.f32_value;
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]
    ++idx;
 8006cf2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006cf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d00:	4413      	add	r3, r2
 8006d02:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	021a      	lsls	r2, r3, #8
 8006d0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006d12:	440b      	add	r3, r1
 8006d14:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	041a      	lsls	r2, r3, #16
 8006d22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006d2a:	440b      	add	r3, r1
 8006d2c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	0219      	lsls	r1, r3, #8
 8006d36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006d3e:	4403      	add	r3, r0
 8006d40:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4313      	orrs	r3, r2
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_0p5 = val.f32_value;
 8006d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	611a      	str	r2, [r3, #16]
    ++idx;
 8006d5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006d60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006d68:	4413      	add	r3, r2
 8006d6a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	021a      	lsls	r2, r3, #8
 8006d72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	4313      	orrs	r3, r2
 8006d88:	041a      	lsls	r2, r3, #16
 8006d8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006d92:	440b      	add	r3, r1
 8006d94:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006d98:	0c1b      	lsrs	r3, r3, #16
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	0219      	lsls	r1, r3, #8
 8006d9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006da6:	4403      	add	r3, r0
 8006da8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	0a1b      	lsrs	r3, r3, #8
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	430b      	orrs	r3, r1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4313      	orrs	r3, r2
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_1p0 = val.f32_value;
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	615a      	str	r2, [r3, #20]
    ++idx;
 8006dc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006dc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	021a      	lsls	r2, r3, #8
 8006dda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006de2:	440b      	add	r3, r1
 8006de4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	041a      	lsls	r2, r3, #16
 8006df2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006dfa:	440b      	add	r3, r1
 8006dfc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006e00:	0c1b      	lsrs	r3, r3, #16
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	0219      	lsls	r1, r3, #8
 8006e06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006e0e:	4403      	add	r3, r0
 8006e10:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_2p5 = val.f32_value;
 8006e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
    ++idx;
 8006e2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006e30:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006e38:	4413      	add	r3, r2
 8006e3a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	021a      	lsls	r2, r3, #8
 8006e42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006e4a:	440b      	add	r3, r1
 8006e4c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	041a      	lsls	r2, r3, #16
 8006e5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006e62:	440b      	add	r3, r1
 8006e64:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006e68:	0c1b      	lsrs	r3, r3, #16
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	0219      	lsls	r1, r3, #8
 8006e6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006e76:	4403      	add	r3, r0
 8006e78:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	430b      	orrs	r3, r1
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_4p0 = val.f32_value;
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	61da      	str	r2, [r3, #28]
    ++idx;
 8006e92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e94:	3301      	adds	r3, #1
 8006e96:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006e98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	021a      	lsls	r2, r3, #8
 8006eaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006eb2:	440b      	add	r3, r1
 8006eb4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	041a      	lsls	r2, r3, #16
 8006ec2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006eca:	440b      	add	r3, r1
 8006ecc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006ed0:	0c1b      	lsrs	r3, r3, #16
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	0219      	lsls	r1, r3, #8
 8006ed6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006ede:	4403      	add	r3, r0
 8006ee0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	0a1b      	lsrs	r3, r3, #8
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	430b      	orrs	r3, r1
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->nc_10p0 = val.f32_value;
 8006ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]
    ++idx;
 8006efa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006efc:	3301      	adds	r3, #1
 8006efe:	86bb      	strh	r3, [r7, #52]	; 0x34
    val.u32_value = be32_to_cpu(data[idx].u32_value);
 8006f00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006f08:	4413      	add	r3, r2
 8006f0a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	021a      	lsls	r2, r3, #8
 8006f12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006f1a:	440b      	add	r3, r1
 8006f1c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4313      	orrs	r3, r2
 8006f28:	041a      	lsls	r2, r3, #16
 8006f2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006f32:	440b      	add	r3, r1
 8006f34:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	0219      	lsls	r1, r3, #8
 8006f3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006f46:	4403      	add	r3, r0
 8006f48:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	0a1b      	lsrs	r3, r3, #8
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	430b      	orrs	r3, r1
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	633b      	str	r3, [r7, #48]	; 0x30
    measurement->typical_particle_size = val.f32_value;
 8006f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

    return 0;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3740      	adds	r7, #64	; 0x40
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <turnOn>:

			HAL_Delay(delayTime);
		}
	}
}
void turnOn() {
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
	flagStep = 1;
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <turnOn+0x14>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
}
 8006f76:	bf00      	nop
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	2000014c 	.word	0x2000014c

08006f84 <miniStep>:
void miniStep(bool direction) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
	if (flagStep == 1) {
 8006f8e:	4b79      	ldr	r3, [pc, #484]	; (8007174 <miniStep+0x1f0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	f040 80ea 	bne.w	800716c <miniStep+0x1e8>
		for (uint16_t i = 0; i < 10; i++) {
 8006f98:	2300      	movs	r3, #0
 8006f9a:	81fb      	strh	r3, [r7, #14]
 8006f9c:	e0be      	b.n	800711c <miniStep+0x198>
			if(direction) {
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d05c      	beq.n	800705e <miniStep+0xda>
				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_SET);
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	2110      	movs	r1, #16
 8006fa8:	4873      	ldr	r0, [pc, #460]	; (8007178 <miniStep+0x1f4>)
 8006faa:	f7fa f829 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_SET);
 8006fae:	2201      	movs	r2, #1
 8006fb0:	2120      	movs	r1, #32
 8006fb2:	4871      	ldr	r0, [pc, #452]	; (8007178 <miniStep+0x1f4>)
 8006fb4:	f7fa f824 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_RESET);
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2101      	movs	r1, #1
 8006fbc:	486f      	ldr	r0, [pc, #444]	; (800717c <miniStep+0x1f8>)
 8006fbe:	f7fa f81f 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_RESET);
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	486d      	ldr	r0, [pc, #436]	; (800717c <miniStep+0x1f8>)
 8006fc8:	f7fa f81a 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 8006fcc:	2002      	movs	r0, #2
 8006fce:	f7f9 fd35 	bl	8000a3c <HAL_Delay>

				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_RESET);
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2110      	movs	r1, #16
 8006fd6:	4868      	ldr	r0, [pc, #416]	; (8007178 <miniStep+0x1f4>)
 8006fd8:	f7fa f812 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_SET);
 8006fdc:	2201      	movs	r2, #1
 8006fde:	2120      	movs	r1, #32
 8006fe0:	4865      	ldr	r0, [pc, #404]	; (8007178 <miniStep+0x1f4>)
 8006fe2:	f7fa f80d 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_SET);
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4864      	ldr	r0, [pc, #400]	; (800717c <miniStep+0x1f8>)
 8006fec:	f7fa f808 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_RESET);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2102      	movs	r1, #2
 8006ff4:	4861      	ldr	r0, [pc, #388]	; (800717c <miniStep+0x1f8>)
 8006ff6:	f7fa f803 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 8006ffa:	2002      	movs	r0, #2
 8006ffc:	f7f9 fd1e 	bl	8000a3c <HAL_Delay>

				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_RESET);
 8007000:	2200      	movs	r2, #0
 8007002:	2110      	movs	r1, #16
 8007004:	485c      	ldr	r0, [pc, #368]	; (8007178 <miniStep+0x1f4>)
 8007006:	f7f9 fffb 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_RESET);
 800700a:	2200      	movs	r2, #0
 800700c:	2120      	movs	r1, #32
 800700e:	485a      	ldr	r0, [pc, #360]	; (8007178 <miniStep+0x1f4>)
 8007010:	f7f9 fff6 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_SET);
 8007014:	2201      	movs	r2, #1
 8007016:	2101      	movs	r1, #1
 8007018:	4858      	ldr	r0, [pc, #352]	; (800717c <miniStep+0x1f8>)
 800701a:	f7f9 fff1 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_SET);
 800701e:	2201      	movs	r2, #1
 8007020:	2102      	movs	r1, #2
 8007022:	4856      	ldr	r0, [pc, #344]	; (800717c <miniStep+0x1f8>)
 8007024:	f7f9 ffec 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 8007028:	2002      	movs	r0, #2
 800702a:	f7f9 fd07 	bl	8000a3c <HAL_Delay>

				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_SET);
 800702e:	2201      	movs	r2, #1
 8007030:	2110      	movs	r1, #16
 8007032:	4851      	ldr	r0, [pc, #324]	; (8007178 <miniStep+0x1f4>)
 8007034:	f7f9 ffe4 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_RESET);
 8007038:	2200      	movs	r2, #0
 800703a:	2120      	movs	r1, #32
 800703c:	484e      	ldr	r0, [pc, #312]	; (8007178 <miniStep+0x1f4>)
 800703e:	f7f9 ffdf 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_RESET);
 8007042:	2200      	movs	r2, #0
 8007044:	2101      	movs	r1, #1
 8007046:	484d      	ldr	r0, [pc, #308]	; (800717c <miniStep+0x1f8>)
 8007048:	f7f9 ffda 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_SET);
 800704c:	2201      	movs	r2, #1
 800704e:	2102      	movs	r1, #2
 8007050:	484a      	ldr	r0, [pc, #296]	; (800717c <miniStep+0x1f8>)
 8007052:	f7f9 ffd5 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 8007056:	2002      	movs	r0, #2
 8007058:	f7f9 fcf0 	bl	8000a3c <HAL_Delay>
 800705c:	e05b      	b.n	8007116 <miniStep+0x192>
			}
			else {
				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_SET);
 800705e:	2201      	movs	r2, #1
 8007060:	2110      	movs	r1, #16
 8007062:	4845      	ldr	r0, [pc, #276]	; (8007178 <miniStep+0x1f4>)
 8007064:	f7f9 ffcc 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_RESET);
 8007068:	2200      	movs	r2, #0
 800706a:	2120      	movs	r1, #32
 800706c:	4842      	ldr	r0, [pc, #264]	; (8007178 <miniStep+0x1f4>)
 800706e:	f7f9 ffc7 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_RESET);
 8007072:	2200      	movs	r2, #0
 8007074:	2101      	movs	r1, #1
 8007076:	4841      	ldr	r0, [pc, #260]	; (800717c <miniStep+0x1f8>)
 8007078:	f7f9 ffc2 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_SET);
 800707c:	2201      	movs	r2, #1
 800707e:	2102      	movs	r1, #2
 8007080:	483e      	ldr	r0, [pc, #248]	; (800717c <miniStep+0x1f8>)
 8007082:	f7f9 ffbd 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 8007086:	2002      	movs	r0, #2
 8007088:	f7f9 fcd8 	bl	8000a3c <HAL_Delay>

				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_RESET);
 800708c:	2200      	movs	r2, #0
 800708e:	2110      	movs	r1, #16
 8007090:	4839      	ldr	r0, [pc, #228]	; (8007178 <miniStep+0x1f4>)
 8007092:	f7f9 ffb5 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_RESET);
 8007096:	2200      	movs	r2, #0
 8007098:	2120      	movs	r1, #32
 800709a:	4837      	ldr	r0, [pc, #220]	; (8007178 <miniStep+0x1f4>)
 800709c:	f7f9 ffb0 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_SET);
 80070a0:	2201      	movs	r2, #1
 80070a2:	2101      	movs	r1, #1
 80070a4:	4835      	ldr	r0, [pc, #212]	; (800717c <miniStep+0x1f8>)
 80070a6:	f7f9 ffab 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_SET);
 80070aa:	2201      	movs	r2, #1
 80070ac:	2102      	movs	r1, #2
 80070ae:	4833      	ldr	r0, [pc, #204]	; (800717c <miniStep+0x1f8>)
 80070b0:	f7f9 ffa6 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 80070b4:	2002      	movs	r0, #2
 80070b6:	f7f9 fcc1 	bl	8000a3c <HAL_Delay>

				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_RESET);
 80070ba:	2200      	movs	r2, #0
 80070bc:	2110      	movs	r1, #16
 80070be:	482e      	ldr	r0, [pc, #184]	; (8007178 <miniStep+0x1f4>)
 80070c0:	f7f9 ff9e 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_SET);
 80070c4:	2201      	movs	r2, #1
 80070c6:	2120      	movs	r1, #32
 80070c8:	482b      	ldr	r0, [pc, #172]	; (8007178 <miniStep+0x1f4>)
 80070ca:	f7f9 ff99 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_SET);
 80070ce:	2201      	movs	r2, #1
 80070d0:	2101      	movs	r1, #1
 80070d2:	482a      	ldr	r0, [pc, #168]	; (800717c <miniStep+0x1f8>)
 80070d4:	f7f9 ff94 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_RESET);
 80070d8:	2200      	movs	r2, #0
 80070da:	2102      	movs	r1, #2
 80070dc:	4827      	ldr	r0, [pc, #156]	; (800717c <miniStep+0x1f8>)
 80070de:	f7f9 ff8f 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 80070e2:	2002      	movs	r0, #2
 80070e4:	f7f9 fcaa 	bl	8000a3c <HAL_Delay>

				HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_SET);
 80070e8:	2201      	movs	r2, #1
 80070ea:	2110      	movs	r1, #16
 80070ec:	4822      	ldr	r0, [pc, #136]	; (8007178 <miniStep+0x1f4>)
 80070ee:	f7f9 ff87 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_SET);
 80070f2:	2201      	movs	r2, #1
 80070f4:	2120      	movs	r1, #32
 80070f6:	4820      	ldr	r0, [pc, #128]	; (8007178 <miniStep+0x1f4>)
 80070f8:	f7f9 ff82 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_RESET);
 80070fc:	2200      	movs	r2, #0
 80070fe:	2101      	movs	r1, #1
 8007100:	481e      	ldr	r0, [pc, #120]	; (800717c <miniStep+0x1f8>)
 8007102:	f7f9 ff7d 	bl	8001000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_RESET);
 8007106:	2200      	movs	r2, #0
 8007108:	2102      	movs	r1, #2
 800710a:	481c      	ldr	r0, [pc, #112]	; (800717c <miniStep+0x1f8>)
 800710c:	f7f9 ff78 	bl	8001000 <HAL_GPIO_WritePin>

				HAL_Delay(delayTime);
 8007110:	2002      	movs	r0, #2
 8007112:	f7f9 fc93 	bl	8000a3c <HAL_Delay>
		for (uint16_t i = 0; i < 10; i++) {
 8007116:	89fb      	ldrh	r3, [r7, #14]
 8007118:	3301      	adds	r3, #1
 800711a:	81fb      	strh	r3, [r7, #14]
 800711c:	89fb      	ldrh	r3, [r7, #14]
 800711e:	2b09      	cmp	r3, #9
 8007120:	f67f af3d 	bls.w	8006f9e <miniStep+0x1a>
			}
		}
		count1 ++;
 8007124:	4b16      	ldr	r3, [pc, #88]	; (8007180 <miniStep+0x1fc>)
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	4b14      	ldr	r3, [pc, #80]	; (8007180 <miniStep+0x1fc>)
 800712e:	801a      	strh	r2, [r3, #0]
		if (count1 == 40) {
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <miniStep+0x1fc>)
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	2b28      	cmp	r3, #40	; 0x28
 8007136:	d119      	bne.n	800716c <miniStep+0x1e8>
			count1 = 0;
 8007138:	4b11      	ldr	r3, [pc, #68]	; (8007180 <miniStep+0x1fc>)
 800713a:	2200      	movs	r2, #0
 800713c:	801a      	strh	r2, [r3, #0]
			flagStep = 0;
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <miniStep+0x1f0>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin (IN1_Port, IN1_Pin, GPIO_PIN_RESET);
 8007144:	2200      	movs	r2, #0
 8007146:	2110      	movs	r1, #16
 8007148:	480b      	ldr	r0, [pc, #44]	; (8007178 <miniStep+0x1f4>)
 800714a:	f7f9 ff59 	bl	8001000 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (IN2_Port, IN2_Pin, GPIO_PIN_RESET);
 800714e:	2200      	movs	r2, #0
 8007150:	2120      	movs	r1, #32
 8007152:	4809      	ldr	r0, [pc, #36]	; (8007178 <miniStep+0x1f4>)
 8007154:	f7f9 ff54 	bl	8001000 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (IN3_Port, IN3_Pin, GPIO_PIN_RESET);
 8007158:	2200      	movs	r2, #0
 800715a:	2101      	movs	r1, #1
 800715c:	4807      	ldr	r0, [pc, #28]	; (800717c <miniStep+0x1f8>)
 800715e:	f7f9 ff4f 	bl	8001000 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (IN4_Port, IN4_Pin, GPIO_PIN_RESET);
 8007162:	2200      	movs	r2, #0
 8007164:	2102      	movs	r1, #2
 8007166:	4805      	ldr	r0, [pc, #20]	; (800717c <miniStep+0x1f8>)
 8007168:	f7f9 ff4a 	bl	8001000 <HAL_GPIO_WritePin>
		}
	}
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	2000014c 	.word	0x2000014c
 8007178:	40020800 	.word	0x40020800
 800717c:	40020400 	.word	0x40020400
 8007180:	20000148 	.word	0x20000148

08007184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800718a:	2300      	movs	r3, #0
 800718c:	607b      	str	r3, [r7, #4]
 800718e:	4b10      	ldr	r3, [pc, #64]	; (80071d0 <HAL_MspInit+0x4c>)
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <HAL_MspInit+0x4c>)
 8007194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007198:	6453      	str	r3, [r2, #68]	; 0x44
 800719a:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <HAL_MspInit+0x4c>)
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_MspInit+0x4c>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <HAL_MspInit+0x4c>)
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6413      	str	r3, [r2, #64]	; 0x40
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_MspInit+0x4c>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40023800 	.word	0x40023800

080071d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	605a      	str	r2, [r3, #4]
 80071e6:	609a      	str	r2, [r3, #8]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_I2C_MspInit+0x84>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d12b      	bne.n	800724e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071f6:	2300      	movs	r3, #0
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <HAL_I2C_MspInit+0x88>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	4a17      	ldr	r2, [pc, #92]	; (800725c <HAL_I2C_MspInit+0x88>)
 8007200:	f043 0302 	orr.w	r3, r3, #2
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_I2C_MspInit+0x88>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007212:	23c0      	movs	r3, #192	; 0xc0
 8007214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007216:	2312      	movs	r3, #18
 8007218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800721a:	2301      	movs	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800721e:	2303      	movs	r3, #3
 8007220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007222:	2304      	movs	r3, #4
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007226:	f107 0314 	add.w	r3, r7, #20
 800722a:	4619      	mov	r1, r3
 800722c:	480c      	ldr	r0, [pc, #48]	; (8007260 <HAL_I2C_MspInit+0x8c>)
 800722e:	f7f9 fd65 	bl	8000cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_I2C_MspInit+0x88>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	4a08      	ldr	r2, [pc, #32]	; (800725c <HAL_I2C_MspInit+0x88>)
 800723c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007240:	6413      	str	r3, [r2, #64]	; 0x40
 8007242:	4b06      	ldr	r3, [pc, #24]	; (800725c <HAL_I2C_MspInit+0x88>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800724e:	bf00      	nop
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40005400 	.word	0x40005400
 800725c:	40023800 	.word	0x40023800
 8007260:	40020400 	.word	0x40020400

08007264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	60da      	str	r2, [r3, #12]
 800727a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2c      	ldr	r2, [pc, #176]	; (8007334 <HAL_SPI_MspInit+0xd0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d152      	bne.n	800732c <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007286:	2300      	movs	r3, #0
 8007288:	613b      	str	r3, [r7, #16]
 800728a:	4b2b      	ldr	r3, [pc, #172]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	4a2a      	ldr	r2, [pc, #168]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 8007290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007294:	6413      	str	r3, [r2, #64]	; 0x40
 8007296:	4b28      	ldr	r3, [pc, #160]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	4b24      	ldr	r3, [pc, #144]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	4a23      	ldr	r2, [pc, #140]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 80072ac:	f043 0304 	orr.w	r3, r3, #4
 80072b0:	6313      	str	r3, [r2, #48]	; 0x30
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	4a1c      	ldr	r2, [pc, #112]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 80072c8:	f043 0302 	orr.w	r3, r3, #2
 80072cc:	6313      	str	r3, [r2, #48]	; 0x30
 80072ce:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <HAL_SPI_MspInit+0xd4>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	60bb      	str	r3, [r7, #8]
 80072d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80072da:	230c      	movs	r3, #12
 80072dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072de:	2302      	movs	r3, #2
 80072e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072e6:	2303      	movs	r3, #3
 80072e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80072ea:	2305      	movs	r3, #5
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072ee:	f107 0314 	add.w	r3, r7, #20
 80072f2:	4619      	mov	r1, r3
 80072f4:	4811      	ldr	r0, [pc, #68]	; (800733c <HAL_SPI_MspInit+0xd8>)
 80072f6:	f7f9 fd01 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80072fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007300:	2302      	movs	r3, #2
 8007302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007308:	2303      	movs	r3, #3
 800730a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800730c:	2305      	movs	r3, #5
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	4619      	mov	r1, r3
 8007316:	480a      	ldr	r0, [pc, #40]	; (8007340 <HAL_SPI_MspInit+0xdc>)
 8007318:	f7f9 fcf0 	bl	8000cfc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800731c:	2200      	movs	r2, #0
 800731e:	2100      	movs	r1, #0
 8007320:	2024      	movs	r0, #36	; 0x24
 8007322:	f7f9 fc92 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007326:	2024      	movs	r0, #36	; 0x24
 8007328:	f7f9 fcab 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800732c:	bf00      	nop
 800732e:	3728      	adds	r7, #40	; 0x28
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40003800 	.word	0x40003800
 8007338:	40023800 	.word	0x40023800
 800733c:	40020800 	.word	0x40020800
 8007340:	40020400 	.word	0x40020400

08007344 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <HAL_TIM_PWM_MspInit+0x70>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d10e      	bne.n	8007374 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <HAL_TIM_PWM_MspInit+0x74>)
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <HAL_TIM_PWM_MspInit+0x74>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	6453      	str	r3, [r2, #68]	; 0x44
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <HAL_TIM_PWM_MspInit+0x74>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007372:	e01a      	b.n	80073aa <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM3)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a10      	ldr	r2, [pc, #64]	; (80073bc <HAL_TIM_PWM_MspInit+0x78>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d115      	bne.n	80073aa <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <HAL_TIM_PWM_MspInit+0x74>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	4a0c      	ldr	r2, [pc, #48]	; (80073b8 <HAL_TIM_PWM_MspInit+0x74>)
 8007388:	f043 0302 	orr.w	r3, r3, #2
 800738c:	6413      	str	r3, [r2, #64]	; 0x40
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <HAL_TIM_PWM_MspInit+0x74>)
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	201d      	movs	r0, #29
 80073a0:	f7f9 fc53 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80073a4:	201d      	movs	r0, #29
 80073a6:	f7f9 fc6c 	bl	8000c82 <HAL_NVIC_EnableIRQ>
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	40010000 	.word	0x40010000
 80073b8:	40023800 	.word	0x40023800
 80073bc:	40000400 	.word	0x40000400

080073c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d0:	d115      	bne.n	80073fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <HAL_TIM_Base_MspInit+0x48>)
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	4a0b      	ldr	r2, [pc, #44]	; (8007408 <HAL_TIM_Base_MspInit+0x48>)
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	6413      	str	r3, [r2, #64]	; 0x40
 80073e2:	4b09      	ldr	r3, [pc, #36]	; (8007408 <HAL_TIM_Base_MspInit+0x48>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80073ee:	2200      	movs	r2, #0
 80073f0:	2100      	movs	r1, #0
 80073f2:	201c      	movs	r0, #28
 80073f4:	f7f9 fc29 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80073f8:	201c      	movs	r0, #28
 80073fa:	f7f9 fc42 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	40023800 	.word	0x40023800

0800740c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007414:	f107 0314 	add.w	r3, r7, #20
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a36      	ldr	r2, [pc, #216]	; (8007504 <HAL_TIM_MspPostInit+0xf8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d11f      	bne.n	800746e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	4b35      	ldr	r3, [pc, #212]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	4a34      	ldr	r2, [pc, #208]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	6313      	str	r3, [r2, #48]	; 0x30
 800743e:	4b32      	ldr	r3, [pc, #200]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	613b      	str	r3, [r7, #16]
 8007448:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800744a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800744e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007450:	2302      	movs	r3, #2
 8007452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007458:	2300      	movs	r3, #0
 800745a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800745c:	2301      	movs	r3, #1
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	4619      	mov	r1, r3
 8007466:	4829      	ldr	r0, [pc, #164]	; (800750c <HAL_TIM_MspPostInit+0x100>)
 8007468:	f7f9 fc48 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800746c:	e046      	b.n	80074fc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d11e      	bne.n	80074b6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	4b22      	ldr	r3, [pc, #136]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	4a21      	ldr	r2, [pc, #132]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	6313      	str	r3, [r2, #48]	; 0x30
 8007488:	4b1f      	ldr	r3, [pc, #124]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8007494:	2307      	movs	r3, #7
 8007496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007498:	2302      	movs	r3, #2
 800749a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749c:	2300      	movs	r3, #0
 800749e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a0:	2300      	movs	r3, #0
 80074a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80074a4:	2301      	movs	r3, #1
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a8:	f107 0314 	add.w	r3, r7, #20
 80074ac:	4619      	mov	r1, r3
 80074ae:	4817      	ldr	r0, [pc, #92]	; (800750c <HAL_TIM_MspPostInit+0x100>)
 80074b0:	f7f9 fc24 	bl	8000cfc <HAL_GPIO_Init>
}
 80074b4:	e022      	b.n	80074fc <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a15      	ldr	r2, [pc, #84]	; (8007510 <HAL_TIM_MspPostInit+0x104>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d11d      	bne.n	80074fc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c0:	2300      	movs	r3, #0
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	4b10      	ldr	r3, [pc, #64]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	6313      	str	r3, [r2, #48]	; 0x30
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <HAL_TIM_MspPostInit+0xfc>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80074dc:	23c0      	movs	r3, #192	; 0xc0
 80074de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e0:	2302      	movs	r3, #2
 80074e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e8:	2300      	movs	r3, #0
 80074ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80074ec:	2302      	movs	r3, #2
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	4619      	mov	r1, r3
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <HAL_TIM_MspPostInit+0x100>)
 80074f8:	f7f9 fc00 	bl	8000cfc <HAL_GPIO_Init>
}
 80074fc:	bf00      	nop
 80074fe:	3728      	adds	r7, #40	; 0x28
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	40010000 	.word	0x40010000
 8007508:	40023800 	.word	0x40023800
 800750c:	40020000 	.word	0x40020000
 8007510:	40000400 	.word	0x40000400

08007514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	609a      	str	r2, [r3, #8]
 8007528:	60da      	str	r2, [r3, #12]
 800752a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1d      	ldr	r2, [pc, #116]	; (80075a8 <HAL_UART_MspInit+0x94>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d134      	bne.n	80075a0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <HAL_UART_MspInit+0x98>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_UART_MspInit+0x98>)
 8007540:	f043 0310 	orr.w	r3, r3, #16
 8007544:	6453      	str	r3, [r2, #68]	; 0x44
 8007546:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_UART_MspInit+0x98>)
 8007548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754a:	f003 0310 	and.w	r3, r3, #16
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	4b15      	ldr	r3, [pc, #84]	; (80075ac <HAL_UART_MspInit+0x98>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <HAL_UART_MspInit+0x98>)
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	6313      	str	r3, [r2, #48]	; 0x30
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <HAL_UART_MspInit+0x98>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800756e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007574:	2302      	movs	r3, #2
 8007576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007578:	2301      	movs	r3, #1
 800757a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800757c:	2303      	movs	r3, #3
 800757e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007580:	2307      	movs	r3, #7
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007584:	f107 0314 	add.w	r3, r7, #20
 8007588:	4619      	mov	r1, r3
 800758a:	4809      	ldr	r0, [pc, #36]	; (80075b0 <HAL_UART_MspInit+0x9c>)
 800758c:	f7f9 fbb6 	bl	8000cfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007590:	2200      	movs	r2, #0
 8007592:	2100      	movs	r1, #0
 8007594:	2025      	movs	r0, #37	; 0x25
 8007596:	f7f9 fb58 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800759a:	2025      	movs	r0, #37	; 0x25
 800759c:	f7f9 fb71 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80075a0:	bf00      	nop
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40011000 	.word	0x40011000
 80075ac:	40023800 	.word	0x40023800
 80075b0:	40020000 	.word	0x40020000

080075b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075b8:	bf00      	nop
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075c6:	e7fe      	b.n	80075c6 <HardFault_Handler+0x4>

080075c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075cc:	e7fe      	b.n	80075cc <MemManage_Handler+0x4>

080075ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075d2:	e7fe      	b.n	80075d2 <BusFault_Handler+0x4>

080075d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075d8:	e7fe      	b.n	80075d8 <UsageFault_Handler+0x4>

080075da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075da:	b480      	push	{r7}
 80075dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075ec:	bf00      	nop
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075f6:	b480      	push	{r7}
 80075f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007608:	f7f9 f9f8 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800760c:	bf00      	nop
 800760e:	bd80      	pop	{r7, pc}

08007610 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007614:	4802      	ldr	r0, [pc, #8]	; (8007620 <TIM2_IRQHandler+0x10>)
 8007616:	f7fb fc7b 	bl	8002f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800761a:	bf00      	nop
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200007f8 	.word	0x200007f8

08007624 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007628:	4802      	ldr	r0, [pc, #8]	; (8007634 <TIM3_IRQHandler+0x10>)
 800762a:	f7fb fc71 	bl	8002f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800762e:	bf00      	nop
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	20000228 	.word	0x20000228

08007638 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800763c:	4802      	ldr	r0, [pc, #8]	; (8007648 <SPI2_IRQHandler+0x10>)
 800763e:	f7fb f9f1 	bl	8002a24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007642:	bf00      	nop
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	2000016c 	.word	0x2000016c

0800764c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007650:	4802      	ldr	r0, [pc, #8]	; (800765c <USART1_IRQHandler+0x10>)
 8007652:	f7fc fbbd 	bl	8003dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007656:	bf00      	nop
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000294 	.word	0x20000294

08007660 <svm_compensate_rht>:
#define T_HI 70000
static const uint32_t AH_LUT_100RH[] = {1078,  2364,  4849,  9383,   17243,
                                        30264, 50983, 82785, 130048, 198277};
static const uint32_t T_STEP = (T_HI - T_LO) / (ARRAY_SIZE(AH_LUT_100RH) - 1);

static void svm_compensate_rht(int32_t *temperature, int32_t *humidity) {
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
    *temperature = ((*temperature * 8225) >> 13) - 500;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	4413      	add	r3, r2
 8007674:	015b      	lsls	r3, r3, #5
 8007676:	4413      	add	r3, r2
 8007678:	135b      	asrs	r3, r3, #13
 800767a:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
    *humidity = (*humidity * 8397) >> 13;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f242 02cd 	movw	r2, #8397	; 0x20cd
 800768a:	fb02 f303 	mul.w	r3, r2, r3
 800768e:	135a      	asrs	r2, r3, #13
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	601a      	str	r2, [r3, #0]
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <sensirion_calc_absolute_humidity>:
/**
 * Convert relative humidity [%RH*1000] and temperature [mC] to
 * absolute humidity [mg/m^3]
 */
static uint32_t sensirion_calc_absolute_humidity(const int32_t *temperature,
                                                 const int32_t *humidity) {
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
    uint32_t t, i, rem, ret;

    if (*humidity <= 0)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	dc01      	bgt.n	80076b6 <sensirion_calc_absolute_humidity+0x16>
        return 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	e04d      	b.n	8007752 <sensirion_calc_absolute_humidity+0xb2>

    if (*temperature < T_LO)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a29      	ldr	r2, [pc, #164]	; (8007760 <sensirion_calc_absolute_humidity+0xc0>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	da02      	bge.n	80076c6 <sensirion_calc_absolute_humidity+0x26>
        t = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e005      	b.n	80076d2 <sensirion_calc_absolute_humidity+0x32>
    else
        t = (uint32_t)(*temperature - T_LO);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80076ce:	3320      	adds	r3, #32
 80076d0:	617b      	str	r3, [r7, #20]

    i = t / T_STEP;
 80076d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
    rem = t % T_STEP;
 80076de:	f242 7210 	movw	r2, #10000	; 0x2710
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80076e8:	fb02 f201 	mul.w	r2, r2, r1
 80076ec:	1a9b      	subs	r3, r3, r2
 80076ee:	60bb      	str	r3, [r7, #8]

    if (i >= ARRAY_SIZE(AH_LUT_100RH) - 1) {
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d902      	bls.n	80076fc <sensirion_calc_absolute_humidity+0x5c>
        ret = AH_LUT_100RH[ARRAY_SIZE(AH_LUT_100RH) - 1];
 80076f6:	4b1b      	ldr	r3, [pc, #108]	; (8007764 <sensirion_calc_absolute_humidity+0xc4>)
 80076f8:	613b      	str	r3, [r7, #16]
 80076fa:	e01f      	b.n	800773c <sensirion_calc_absolute_humidity+0x9c>

    } else if (rem == 0) {
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d105      	bne.n	800770e <sensirion_calc_absolute_humidity+0x6e>
        ret = AH_LUT_100RH[i];
 8007702:	4a19      	ldr	r2, [pc, #100]	; (8007768 <sensirion_calc_absolute_humidity+0xc8>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	e016      	b.n	800773c <sensirion_calc_absolute_humidity+0x9c>

    } else {
        ret = (AH_LUT_100RH[i] +
 800770e:	4a16      	ldr	r2, [pc, #88]	; (8007768 <sensirion_calc_absolute_humidity+0xc8>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
               ((AH_LUT_100RH[i + 1] - AH_LUT_100RH[i]) * rem / T_STEP));
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	4913      	ldr	r1, [pc, #76]	; (8007768 <sensirion_calc_absolute_humidity+0xc8>)
 800771c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007720:	4811      	ldr	r0, [pc, #68]	; (8007768 <sensirion_calc_absolute_humidity+0xc8>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007728:	1acb      	subs	r3, r1, r3
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	fb01 f303 	mul.w	r3, r1, r3
 8007730:	f242 7110 	movw	r1, #10000	; 0x2710
 8007734:	fbb3 f3f1 	udiv	r3, r3, r1
        ret = (AH_LUT_100RH[i] +
 8007738:	4413      	add	r3, r2
 800773a:	613b      	str	r3, [r7, #16]
    // Multiplication might overflow with a maximum of 3 digits
    // Trick: ((ret >> 3) * (uint32_t)(*humidity)) does never overflow
    // Now we only need to divide by 12500, as the tripple righ shift
    // divides by 8

    return ((ret >> 3) * (uint32_t)(*humidity)) / 12500;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	08db      	lsrs	r3, r3, #3
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	089b      	lsrs	r3, r3, #2
 800774a:	4a08      	ldr	r2, [pc, #32]	; (800776c <sensirion_calc_absolute_humidity+0xcc>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	0a1b      	lsrs	r3, r3, #8
}
 8007752:	4618      	mov	r0, r3
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	ffffb1e0 	.word	0xffffb1e0
 8007764:	00030685 	.word	0x00030685
 8007768:	0802e9c0 	.word	0x0802e9c0
 800776c:	14f8b589 	.word	0x14f8b589

08007770 <svm_set_humidity>:

static int16_t svm_set_humidity(const int32_t *temperature,
                                const int32_t *humidity) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
    uint32_t absolute_humidity;

    absolute_humidity = sensirion_calc_absolute_humidity(temperature, humidity);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff8f 	bl	80076a0 <sensirion_calc_absolute_humidity>
 8007782:	60f8      	str	r0, [r7, #12]

    if (absolute_humidity == 0)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <svm_set_humidity+0x1e>
        absolute_humidity = 1; /* avoid disabling humidity compensation */
 800778a:	2301      	movs	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]

    return sgp30_set_absolute_humidity(absolute_humidity);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff f8fc 	bl	800698c <sgp30_set_absolute_humidity>
 8007794:	4603      	mov	r3, r0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <svm_measure_iaq_blocking_read>:
//const char *svm_get_driver_version() {
//    return SGP_DRV_VERSION_STR;
//}

int16_t svm_measure_iaq_blocking_read(uint16_t *tvoc_ppb, uint16_t *co2_eq_ppm,
                                      int32_t *temperature, int32_t *humidity) {
 800779e:	b580      	push	{r7, lr}
 80077a0:	b086      	sub	sp, #24
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	603b      	str	r3, [r7, #0]
    int16_t err;

    err = shtc1_measure_blocking_read(temperature, humidity);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff f928 	bl	8006a04 <shtc1_measure_blocking_read>
 80077b4:	4603      	mov	r3, r0
 80077b6:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 80077b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <svm_measure_iaq_blocking_read+0x28>
        return err;
 80077c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077c4:	e01e      	b.n	8007804 <svm_measure_iaq_blocking_read+0x66>

    err = svm_set_humidity(temperature, humidity);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ffd1 	bl	8007770 <svm_set_humidity>
 80077ce:	4603      	mov	r3, r0
 80077d0:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 80077d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <svm_measure_iaq_blocking_read+0x42>
        return err;
 80077da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077de:	e011      	b.n	8007804 <svm_measure_iaq_blocking_read+0x66>

    svm_compensate_rht(temperature, humidity);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff ff3c 	bl	8007660 <svm_compensate_rht>

    err = sgp30_measure_iaq_blocking_read(tvoc_ppb, co2_eq_ppm);
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff f8b1 	bl	8006952 <sgp30_measure_iaq_blocking_read>
 80077f0:	4603      	mov	r3, r0
 80077f2:	82fb      	strh	r3, [r7, #22]
    if (err != STATUS_OK)
 80077f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <svm_measure_iaq_blocking_read+0x64>
        return err;
 80077fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007800:	e000      	b.n	8007804 <svm_measure_iaq_blocking_read+0x66>

    return STATUS_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <_sbrk+0x50>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <_sbrk+0x16>
		heap_end = &end;
 800781c:	4b0f      	ldr	r3, [pc, #60]	; (800785c <_sbrk+0x50>)
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <_sbrk+0x54>)
 8007820:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007822:	4b0e      	ldr	r3, [pc, #56]	; (800785c <_sbrk+0x50>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <_sbrk+0x50>)
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	466a      	mov	r2, sp
 8007832:	4293      	cmp	r3, r2
 8007834:	d907      	bls.n	8007846 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007836:	f000 ff1d 	bl	8008674 <__errno>
 800783a:	4602      	mov	r2, r0
 800783c:	230c      	movs	r3, #12
 800783e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	e006      	b.n	8007854 <_sbrk+0x48>
	}

	heap_end += incr;
 8007846:	4b05      	ldr	r3, [pc, #20]	; (800785c <_sbrk+0x50>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	4a03      	ldr	r2, [pc, #12]	; (800785c <_sbrk+0x50>)
 8007850:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20000150 	.word	0x20000150
 8007860:	200008a0 	.word	0x200008a0

08007864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007868:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <SystemInit+0x60>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <SystemInit+0x60>)
 8007870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <SystemInit+0x64>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a12      	ldr	r2, [pc, #72]	; (80078c8 <SystemInit+0x64>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <SystemInit+0x64>)
 8007886:	2200      	movs	r2, #0
 8007888:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800788a:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <SystemInit+0x64>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a0e      	ldr	r2, [pc, #56]	; (80078c8 <SystemInit+0x64>)
 8007890:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007898:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <SystemInit+0x64>)
 800789c:	4a0b      	ldr	r2, [pc, #44]	; (80078cc <SystemInit+0x68>)
 800789e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80078a0:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <SystemInit+0x64>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <SystemInit+0x64>)
 80078a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <SystemInit+0x64>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <SystemInit+0x60>)
 80078b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078b8:	609a      	str	r2, [r3, #8]
#endif
}
 80078ba:	bf00      	nop
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	e000ed00 	.word	0xe000ed00
 80078c8:	40023800 	.word	0x40023800
 80078cc:	24003010 	.word	0x24003010

080078d0 <tft_init>:
/********************************************************************************************************************************/
/********************************************************************************************************************************/
/********************************************************************************************************************************/

void tft_init(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_SET);
 80078d4:	2201      	movs	r2, #1
 80078d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078da:	489a      	ldr	r0, [pc, #616]	; (8007b44 <tft_init+0x274>)
 80078dc:	f7f9 fb90 	bl	8001000 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80078e0:	2005      	movs	r0, #5
 80078e2:	f7f9 f8ab 	bl	8000a3c <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_RESET);
 80078e6:	2200      	movs	r2, #0
 80078e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078ec:	4895      	ldr	r0, [pc, #596]	; (8007b44 <tft_init+0x274>)
 80078ee:	f7f9 fb87 	bl	8001000 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80078f2:	2005      	movs	r0, #5
 80078f4:	f7f9 f8a2 	bl	8000a3c <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RESET_PORT,TFT_RESET_PIN,GPIO_PIN_SET);
 80078f8:	2201      	movs	r2, #1
 80078fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078fe:	4891      	ldr	r0, [pc, #580]	; (8007b44 <tft_init+0x274>)
 8007900:	f7f9 fb7e 	bl	8001000 <HAL_GPIO_WritePin>

	SPI_ENABLE;
 8007904:	2200      	movs	r2, #0
 8007906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800790a:	488e      	ldr	r0, [pc, #568]	; (8007b44 <tft_init+0x274>)
 800790c:	f7f9 fb78 	bl	8001000 <HAL_GPIO_WritePin>
 8007910:	2001      	movs	r0, #1
 8007912:	f7f9 f893 	bl	8000a3c <HAL_Delay>
	
		tft_write_register(0xCB);
 8007916:	f06f 0034 	mvn.w	r0, #52	; 0x34
 800791a:	f000 fbf7 	bl	800810c <tft_write_register>
		tft_write_data_8bit(0x39);
 800791e:	2039      	movs	r0, #57	; 0x39
 8007920:	f000 fbb6 	bl	8008090 <tft_write_data_8bit>
		tft_write_data_8bit(0x2C);
 8007924:	202c      	movs	r0, #44	; 0x2c
 8007926:	f000 fbb3 	bl	8008090 <tft_write_data_8bit>
		tft_write_data_8bit(0x00);
 800792a:	2000      	movs	r0, #0
 800792c:	f000 fbb0 	bl	8008090 <tft_write_data_8bit>
		tft_write_data_8bit(0x34);
 8007930:	2034      	movs	r0, #52	; 0x34
 8007932:	f000 fbad 	bl	8008090 <tft_write_data_8bit>
		tft_write_data_8bit(0x02);
 8007936:	2002      	movs	r0, #2
 8007938:	f000 fbaa 	bl	8008090 <tft_write_data_8bit>

        tft_write_register(0xCF);  
 800793c:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8007940:	f000 fbe4 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x00); 
 8007944:	2000      	movs	r0, #0
 8007946:	f000 fba3 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0XC1); 
 800794a:	20c1      	movs	r0, #193	; 0xc1
 800794c:	f000 fba0 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0X30); 
 8007950:	2030      	movs	r0, #48	; 0x30
 8007952:	f000 fb9d 	bl	8008090 <tft_write_data_8bit>
 //1
        tft_write_register(0xE8);  
 8007956:	f06f 0017 	mvn.w	r0, #23
 800795a:	f000 fbd7 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x85); 
 800795e:	2085      	movs	r0, #133	; 0x85
 8007960:	f000 fb96 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 8007964:	2000      	movs	r0, #0
 8007966:	f000 fb93 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x78); 
 800796a:	2078      	movs	r0, #120	; 0x78
 800796c:	f000 fb90 	bl	8008090 <tft_write_data_8bit>
 //2
        tft_write_register(0xEA);  
 8007970:	f06f 0015 	mvn.w	r0, #21
 8007974:	f000 fbca 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x00); 
 8007978:	2000      	movs	r0, #0
 800797a:	f000 fb89 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 800797e:	2000      	movs	r0, #0
 8007980:	f000 fb86 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0xED);  
 8007984:	f06f 0012 	mvn.w	r0, #18
 8007988:	f000 fbc0 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x64); 
 800798c:	2064      	movs	r0, #100	; 0x64
 800798e:	f000 fb7f 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 8007992:	2003      	movs	r0, #3
 8007994:	f000 fb7c 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0X12); 
 8007998:	2012      	movs	r0, #18
 800799a:	f000 fb79 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0X81); 
 800799e:	2081      	movs	r0, #129	; 0x81
 80079a0:	f000 fb76 	bl	8008090 <tft_write_data_8bit>

        tft_write_register(0xF7);  
 80079a4:	f06f 0008 	mvn.w	r0, #8
 80079a8:	f000 fbb0 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x20); 
 80079ac:	2020      	movs	r0, #32
 80079ae:	f000 fb6f 	bl	8008090 <tft_write_data_8bit>
  
        tft_write_register(0xC0);    
 80079b2:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 80079b6:	f000 fba9 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x23);   
 80079ba:	2023      	movs	r0, #35	; 0x23
 80079bc:	f000 fb68 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0xC1);   
 80079c0:	f06f 003e 	mvn.w	r0, #62	; 0x3e
 80079c4:	f000 fba2 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x10);   
 80079c8:	2010      	movs	r0, #16
 80079ca:	f000 fb61 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0xC5);    
 80079ce:	f06f 003a 	mvn.w	r0, #58	; 0x3a
 80079d2:	f000 fb9b 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x3e); 
 80079d6:	203e      	movs	r0, #62	; 0x3e
 80079d8:	f000 fb5a 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x28); 
 80079dc:	2028      	movs	r0, #40	; 0x28
 80079de:	f000 fb57 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0xC7);    
 80079e2:	f06f 0038 	mvn.w	r0, #56	; 0x38
 80079e6:	f000 fb91 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x86);  
 80079ea:	2086      	movs	r0, #134	; 0x86
 80079ec:	f000 fb50 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0x36);    
 80079f0:	2036      	movs	r0, #54	; 0x36
 80079f2:	f000 fb8b 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x48); 
 80079f6:	2048      	movs	r0, #72	; 0x48
 80079f8:	f000 fb4a 	bl	8008090 <tft_write_data_8bit>

        tft_write_register(0x3A);    
 80079fc:	203a      	movs	r0, #58	; 0x3a
 80079fe:	f000 fb85 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x55); 
 8007a02:	2055      	movs	r0, #85	; 0x55
 8007a04:	f000 fb44 	bl	8008090 <tft_write_data_8bit>

        tft_write_register(0xB1);    
 8007a08:	f06f 004e 	mvn.w	r0, #78	; 0x4e
 8007a0c:	f000 fb7e 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x00);  
 8007a10:	2000      	movs	r0, #0
 8007a12:	f000 fb3d 	bl	8008090 <tft_write_data_8bit>
        //tft_write_data_8bit(0x18);
        //tft_write_data_8bit(0x1B);
        tft_write_data_8bit(0x13);
 8007a16:	2013      	movs	r0, #19
 8007a18:	f000 fb3a 	bl	8008090 <tft_write_data_8bit>

        tft_write_register(0xB6);    
 8007a1c:	f06f 0049 	mvn.w	r0, #73	; 0x49
 8007a20:	f000 fb74 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x08); 
 8007a24:	2008      	movs	r0, #8
 8007a26:	f000 fb33 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x82);
 8007a2a:	2082      	movs	r0, #130	; 0x82
 8007a2c:	f000 fb30 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x27);  
 8007a30:	2027      	movs	r0, #39	; 0x27
 8007a32:	f000 fb2d 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0xF2);    
 8007a36:	f06f 000d 	mvn.w	r0, #13
 8007a3a:	f000 fb67 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x00); 
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f000 fb26 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0x26);    
 8007a44:	2026      	movs	r0, #38	; 0x26
 8007a46:	f000 fb61 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x01); 
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	f000 fb20 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0xE0);    
 8007a50:	f06f 001f 	mvn.w	r0, #31
 8007a54:	f000 fb5a 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x0F); 
 8007a58:	200f      	movs	r0, #15
 8007a5a:	f000 fb19 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 8007a5e:	2031      	movs	r0, #49	; 0x31
 8007a60:	f000 fb16 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x2B); 
 8007a64:	202b      	movs	r0, #43	; 0x2b
 8007a66:	f000 fb13 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0C); 
 8007a6a:	200c      	movs	r0, #12
 8007a6c:	f000 fb10 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 8007a70:	200e      	movs	r0, #14
 8007a72:	f000 fb0d 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x08); 
 8007a76:	2008      	movs	r0, #8
 8007a78:	f000 fb0a 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x4E); 
 8007a7c:	204e      	movs	r0, #78	; 0x4e
 8007a7e:	f000 fb07 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0xF1); 
 8007a82:	20f1      	movs	r0, #241	; 0xf1
 8007a84:	f000 fb04 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x37); 
 8007a88:	2037      	movs	r0, #55	; 0x37
 8007a8a:	f000 fb01 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x07); 
 8007a8e:	2007      	movs	r0, #7
 8007a90:	f000 fafe 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x10); 
 8007a94:	2010      	movs	r0, #16
 8007a96:	f000 fafb 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 8007a9a:	2003      	movs	r0, #3
 8007a9c:	f000 faf8 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 8007aa0:	200e      	movs	r0, #14
 8007aa2:	f000 faf5 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x09); 
 8007aa6:	2009      	movs	r0, #9
 8007aa8:	f000 faf2 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x00); 
 8007aac:	2000      	movs	r0, #0
 8007aae:	f000 faef 	bl	8008090 <tft_write_data_8bit>

        tft_write_register(0XE1);     
 8007ab2:	f06f 001e 	mvn.w	r0, #30
 8007ab6:	f000 fb29 	bl	800810c <tft_write_register>
        tft_write_data_8bit(0x00); 
 8007aba:	2000      	movs	r0, #0
 8007abc:	f000 fae8 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0E); 
 8007ac0:	200e      	movs	r0, #14
 8007ac2:	f000 fae5 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x14); 
 8007ac6:	2014      	movs	r0, #20
 8007ac8:	f000 fae2 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x03); 
 8007acc:	2003      	movs	r0, #3
 8007ace:	f000 fadf 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x11); 
 8007ad2:	2011      	movs	r0, #17
 8007ad4:	f000 fadc 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x07); 
 8007ad8:	2007      	movs	r0, #7
 8007ada:	f000 fad9 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 8007ade:	2031      	movs	r0, #49	; 0x31
 8007ae0:	f000 fad6 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0xC1); 
 8007ae4:	20c1      	movs	r0, #193	; 0xc1
 8007ae6:	f000 fad3 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x48); 
 8007aea:	2048      	movs	r0, #72	; 0x48
 8007aec:	f000 fad0 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x08); 
 8007af0:	2008      	movs	r0, #8
 8007af2:	f000 facd 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0F); 
 8007af6:	200f      	movs	r0, #15
 8007af8:	f000 faca 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0C); 
 8007afc:	200c      	movs	r0, #12
 8007afe:	f000 fac7 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x31); 
 8007b02:	2031      	movs	r0, #49	; 0x31
 8007b04:	f000 fac4 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x36); 
 8007b08:	2036      	movs	r0, #54	; 0x36
 8007b0a:	f000 fac1 	bl	8008090 <tft_write_data_8bit>
        tft_write_data_8bit(0x0F); 
 8007b0e:	200f      	movs	r0, #15
 8007b10:	f000 fabe 	bl	8008090 <tft_write_data_8bit>
 
        tft_write_register(0x11);    
 8007b14:	2011      	movs	r0, #17
 8007b16:	f000 faf9 	bl	800810c <tft_write_register>
        HAL_Delay(120); 
 8007b1a:	2078      	movs	r0, #120	; 0x78
 8007b1c:	f7f8 ff8e 	bl	8000a3c <HAL_Delay>
				
        tft_write_register(0x29);    
 8007b20:	2029      	movs	r0, #41	; 0x29
 8007b22:	f000 faf3 	bl	800810c <tft_write_register>
        tft_write_register(0x2c); 
 8007b26:	202c      	movs	r0, #44	; 0x2c
 8007b28:	f000 faf0 	bl	800810c <tft_write_register>
				
				
				SPI_DISABLE;
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b32:	4804      	ldr	r0, [pc, #16]	; (8007b44 <tft_init+0x274>)
 8007b34:	f7f9 fa64 	bl	8001000 <HAL_GPIO_WritePin>
 8007b38:	2001      	movs	r0, #1
 8007b3a:	f7f8 ff7f 	bl	8000a3c <HAL_Delay>
}
 8007b3e:	bf00      	nop
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40020800 	.word	0x40020800

08007b48 <tft_puts8x16>:

void tft_puts8x16(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60ba      	str	r2, [r7, #8]
 8007b50:	461a      	mov	r2, r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	81fb      	strh	r3, [r7, #14]
 8007b56:	460b      	mov	r3, r1
 8007b58:	81bb      	strh	r3, [r7, #12]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 8007b62:	2200      	movs	r2, #0
 8007b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b68:	481d      	ldr	r0, [pc, #116]	; (8007be0 <tft_puts8x16+0x98>)
 8007b6a:	f7f9 fa49 	bl	8001000 <HAL_GPIO_WritePin>
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f7f8 ff64 	bl	8000a3c <HAL_Delay>
	  while(*(string+i)!='\0')
 8007b74:	e020      	b.n	8007bb8 <tft_puts8x16+0x70>
    {       
        if(column>LCD_W-16){column=0;row+=16;}
 8007b76:	89bb      	ldrh	r3, [r7, #12]
 8007b78:	2be0      	cmp	r3, #224	; 0xe0
 8007b7a:	d904      	bls.n	8007b86 <tft_puts8x16+0x3e>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	81bb      	strh	r3, [r7, #12]
 8007b80:	89fb      	ldrh	r3, [r7, #14]
 8007b82:	3310      	adds	r3, #16
 8007b84:	81fb      	strh	r3, [r7, #14]
        if(row>LCD_H-16){row=column=0;}
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8007b8c:	d903      	bls.n	8007b96 <tft_puts8x16+0x4e>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	81bb      	strh	r3, [r7, #12]
 8007b92:	89bb      	ldrh	r3, [r7, #12]
 8007b94:	81fb      	strh	r3, [r7, #14]
        tft_putchar(column,row,*(string+i),TFT_STRING_MODE);
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	89f9      	ldrh	r1, [r7, #14]
 8007ba6:	89b8      	ldrh	r0, [r7, #12]
 8007ba8:	f000 fb16 	bl	80081d8 <tft_putchar>
        column+=8;
 8007bac:	89bb      	ldrh	r3, [r7, #12]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	81bb      	strh	r3, [r7, #12]
        i++;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1d7      	bne.n	8007b76 <tft_puts8x16+0x2e>
    }  
	SPI_DISABLE;
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bcc:	4804      	ldr	r0, [pc, #16]	; (8007be0 <tft_puts8x16+0x98>)
 8007bce:	f7f9 fa17 	bl	8001000 <HAL_GPIO_WritePin>
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	f7f8 ff32 	bl	8000a3c <HAL_Delay>
}
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40020800 	.word	0x40020800

08007be4 <tft_puts14x24>:

void tft_puts14x24(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60ba      	str	r2, [r7, #8]
 8007bec:	461a      	mov	r2, r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	81fb      	strh	r3, [r7, #14]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	81bb      	strh	r3, [r7, #12]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c04:	4815      	ldr	r0, [pc, #84]	; (8007c5c <tft_puts14x24+0x78>)
 8007c06:	f7f9 f9fb 	bl	8001000 <HAL_GPIO_WritePin>
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	f7f8 ff16 	bl	8000a3c <HAL_Delay>
	  while(*(string+i)!='\0')
 8007c10:	e010      	b.n	8007c34 <tft_puts14x24+0x50>
    {       
		tft_putchar14x24(column,row,*(string+i),TFT_STRING_MODE);
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	4413      	add	r3, r2
 8007c18:	f993 3000 	ldrsb.w	r3, [r3]
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	89f9      	ldrh	r1, [r7, #14]
 8007c22:	89b8      	ldrh	r0, [r7, #12]
 8007c24:	f000 fbf4 	bl	8008410 <tft_putchar14x24>
        column+=14;
 8007c28:	89bb      	ldrh	r3, [r7, #12]
 8007c2a:	330e      	adds	r3, #14
 8007c2c:	81bb      	strh	r3, [r7, #12]
        i++;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	3301      	adds	r3, #1
 8007c32:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f993 3000 	ldrsb.w	r3, [r3]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e7      	bne.n	8007c12 <tft_puts14x24+0x2e>
    }  
	SPI_DISABLE;
 8007c42:	2201      	movs	r2, #1
 8007c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c48:	4804      	ldr	r0, [pc, #16]	; (8007c5c <tft_puts14x24+0x78>)
 8007c4a:	f7f9 f9d9 	bl	8001000 <HAL_GPIO_WritePin>
 8007c4e:	2001      	movs	r0, #1
 8007c50:	f7f8 fef4 	bl	8000a3c <HAL_Delay>
}
 8007c54:	bf00      	nop
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40020800 	.word	0x40020800

08007c60 <tft_puts18x32>:


void tft_puts18x32(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60ba      	str	r2, [r7, #8]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	81fb      	strh	r3, [r7, #14]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	81bb      	strh	r3, [r7, #12]
 8007c72:	4613      	mov	r3, r2
 8007c74:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c80:	4815      	ldr	r0, [pc, #84]	; (8007cd8 <tft_puts18x32+0x78>)
 8007c82:	f7f9 f9bd 	bl	8001000 <HAL_GPIO_WritePin>
 8007c86:	2001      	movs	r0, #1
 8007c88:	f7f8 fed8 	bl	8000a3c <HAL_Delay>
	  while(*(string+i)!='\0')
 8007c8c:	e010      	b.n	8007cb0 <tft_puts18x32+0x50>
    {       
				tft_putchar18x32(column,row,*(string+i),TFT_STRING_MODE);
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4413      	add	r3, r2
 8007c94:	f993 3000 	ldrsb.w	r3, [r3]
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	89f9      	ldrh	r1, [r7, #14]
 8007c9e:	89b8      	ldrh	r0, [r7, #12]
 8007ca0:	f000 fc36 	bl	8008510 <tft_putchar18x32>
        column+=18;
 8007ca4:	89bb      	ldrh	r3, [r7, #12]
 8007ca6:	3312      	adds	r3, #18
 8007ca8:	81bb      	strh	r3, [r7, #12]
        i++;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	3301      	adds	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e7      	bne.n	8007c8e <tft_puts18x32+0x2e>
    }  
	SPI_DISABLE;
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cc4:	4804      	ldr	r0, [pc, #16]	; (8007cd8 <tft_puts18x32+0x78>)
 8007cc6:	f7f9 f99b 	bl	8001000 <HAL_GPIO_WritePin>
 8007cca:	2001      	movs	r0, #1
 8007ccc:	f7f8 feb6 	bl	8000a3c <HAL_Delay>
}
 8007cd0:	bf00      	nop
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40020800 	.word	0x40020800

08007cdc <tft_puts26x48>:
void tft_puts26x48(uint16_t row,uint16_t column,int8_t *string,uint8_t TFT_STRING_MODE)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60ba      	str	r2, [r7, #8]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	81fb      	strh	r3, [r7, #14]
 8007cea:	460b      	mov	r3, r1
 8007cec:	81bb      	strh	r3, [r7, #12]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
	SPI_ENABLE;
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cfc:	4815      	ldr	r0, [pc, #84]	; (8007d54 <tft_puts26x48+0x78>)
 8007cfe:	f7f9 f97f 	bl	8001000 <HAL_GPIO_WritePin>
 8007d02:	2001      	movs	r0, #1
 8007d04:	f7f8 fe9a 	bl	8000a3c <HAL_Delay>
	  while(*(string+i)!='\0')
 8007d08:	e010      	b.n	8007d2c <tft_puts26x48+0x50>
    {       
				tft_putchar26x48(column,row,*(string+i),TFT_STRING_MODE);
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f993 3000 	ldrsb.w	r3, [r3]
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	89f9      	ldrh	r1, [r7, #14]
 8007d1a:	89b8      	ldrh	r0, [r7, #12]
 8007d1c:	f000 faf0 	bl	8008300 <tft_putchar26x48>
        column+=26;
 8007d20:	89bb      	ldrh	r3, [r7, #12]
 8007d22:	331a      	adds	r3, #26
 8007d24:	81bb      	strh	r3, [r7, #12]
        i++;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
	  while(*(string+i)!='\0')
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	f993 3000 	ldrsb.w	r3, [r3]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e7      	bne.n	8007d0a <tft_puts26x48+0x2e>
    }  
	SPI_DISABLE;
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d40:	4804      	ldr	r0, [pc, #16]	; (8007d54 <tft_puts26x48+0x78>)
 8007d42:	f7f9 f95d 	bl	8001000 <HAL_GPIO_WritePin>
 8007d46:	2001      	movs	r0, #1
 8007d48:	f7f8 fe78 	bl	8000a3c <HAL_Delay>
}
 8007d4c:	bf00      	nop
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40020800 	.word	0x40020800

08007d58 <tft_draw_circle>:
	tft_draw_line(row2,column2,row1,column2);
	SPI_DISABLE;
}

void tft_draw_circle(uint16_t row,uint16_t column,uint8_t radian)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	80fb      	strh	r3, [r7, #6]
 8007d62:	460b      	mov	r3, r1
 8007d64:	80bb      	strh	r3, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=radian;	  
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	613b      	str	r3, [r7, #16]
	di=3-(radian<<1);
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	f1c3 0303 	rsb	r3, r3, #3
 8007d7a:	60fb      	str	r3, [r7, #12]
	SPI_ENABLE;
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d82:	4859      	ldr	r0, [pc, #356]	; (8007ee8 <tft_draw_circle+0x190>)
 8007d84:	f7f9 f93c 	bl	8001000 <HAL_GPIO_WritePin>
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7f8 fe57 	bl	8000a3c <HAL_Delay>
	while(a<=b)
 8007d8e:	e099      	b.n	8007ec4 <tft_draw_circle+0x16c>
	{
		tft_draw_point(column-b,row-a);                     
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	88ba      	ldrh	r2, [r7, #4]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	b298      	uxth	r0, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	88fa      	ldrh	r2, [r7, #6]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4619      	mov	r1, r3
 8007da6:	f000 f9fd 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column+b,row-a);                       
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	88bb      	ldrh	r3, [r7, #4]
 8007db0:	4413      	add	r3, r2
 8007db2:	b298      	uxth	r0, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	88fa      	ldrh	r2, [r7, #6]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	f000 f9f0 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column-a,row+b);                 
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	88ba      	ldrh	r2, [r7, #4]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	b298      	uxth	r0, r3
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f000 f9e3 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column-b,row-a);                    
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	88ba      	ldrh	r2, [r7, #4]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	b298      	uxth	r0, r3
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	88fa      	ldrh	r2, [r7, #6]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4619      	mov	r1, r3
 8007df4:	f000 f9d6 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column-a,row-b);                       
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	88ba      	ldrh	r2, [r7, #4]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	b298      	uxth	r0, r3
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	f000 f9c9 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column+b,row+a);                        
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	88bb      	ldrh	r3, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	b298      	uxth	r0, r3
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	4413      	add	r3, r2
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	f000 f9bc 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column+a,row-b);             
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	88bb      	ldrh	r3, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	b298      	uxth	r0, r3
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	f000 f9af 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column+a,row+b);             
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	88bb      	ldrh	r3, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	b298      	uxth	r0, r3
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	4413      	add	r3, r2
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f000 f9a2 	bl	80081a4 <tft_draw_point>
		tft_draw_point(column-b,row+a);             
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	88ba      	ldrh	r2, [r7, #4]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	b298      	uxth	r0, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	4413      	add	r3, r2
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	4619      	mov	r1, r3
 8007e76:	f000 f995 	bl	80081a4 <tft_draw_point>
		a++;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
		    
		if(di<0)di +=4*a+6;	  
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da06      	bge.n	8007e94 <tft_draw_circle+0x13c>
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	3306      	adds	r3, #6
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e00a      	b.n	8007eaa <tft_draw_circle+0x152>
		else
		{
			di+=10+4*(a-b);   
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	330a      	adds	r3, #10
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]
			b--;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	613b      	str	r3, [r7, #16]
		} 
		tft_draw_point(column+a,row+b);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	88bb      	ldrh	r3, [r7, #4]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	b298      	uxth	r0, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	4413      	add	r3, r2
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	f000 f970 	bl	80081a4 <tft_draw_point>
	while(a<=b)
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	f77f af61 	ble.w	8007d90 <tft_draw_circle+0x38>
	}
	SPI_DISABLE;
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ed4:	4804      	ldr	r0, [pc, #16]	; (8007ee8 <tft_draw_circle+0x190>)
 8007ed6:	f7f9 f893 	bl	8001000 <HAL_GPIO_WritePin>
 8007eda:	2001      	movs	r0, #1
 8007edc:	f7f8 fdae 	bl	8000a3c <HAL_Delay>
}
 8007ee0:	bf00      	nop
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40020800 	.word	0x40020800

08007eec <tft_fill>:

void tft_fill(uint16_t row1,uint16_t column1,uint16_t row2,uint16_t column2,uint16_t color)
{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4623      	mov	r3, r4
 8007efc:	80fb      	strh	r3, [r7, #6]
 8007efe:	4603      	mov	r3, r0
 8007f00:	80bb      	strh	r3, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	807b      	strh	r3, [r7, #2]
 8007f06:	4613      	mov	r3, r2
 8007f08:	803b      	strh	r3, [r7, #0]
	uint16_t i,j; 
	SPI_ENABLE;
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f10:	4818      	ldr	r0, [pc, #96]	; (8007f74 <tft_fill+0x88>)
 8007f12:	f7f9 f875 	bl	8001000 <HAL_GPIO_WritePin>
 8007f16:	2001      	movs	r0, #1
 8007f18:	f7f8 fd90 	bl	8000a3c <HAL_Delay>
	tft_add_set(column1,row1,column2,row2);   
 8007f1c:	887b      	ldrh	r3, [r7, #2]
 8007f1e:	883a      	ldrh	r2, [r7, #0]
 8007f20:	88f9      	ldrh	r1, [r7, #6]
 8007f22:	88b8      	ldrh	r0, [r7, #4]
 8007f24:	f000 f90e 	bl	8008144 <tft_add_set>
	for(i=row1;i<=row2;i++)
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	81fb      	strh	r3, [r7, #14]
 8007f2c:	e010      	b.n	8007f50 <tft_fill+0x64>
	{													   	 	
		for(j=column1;j<=column2;j++)
 8007f2e:	88bb      	ldrh	r3, [r7, #4]
 8007f30:	81bb      	strh	r3, [r7, #12]
 8007f32:	e006      	b.n	8007f42 <tft_fill+0x56>
		{
			tft_write_data(color);
 8007f34:	8c3b      	ldrh	r3, [r7, #32]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f8c6 	bl	80080c8 <tft_write_data>
		for(j=column1;j<=column2;j++)
 8007f3c:	89bb      	ldrh	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	81bb      	strh	r3, [r7, #12]
 8007f42:	89ba      	ldrh	r2, [r7, #12]
 8007f44:	883b      	ldrh	r3, [r7, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d9f4      	bls.n	8007f34 <tft_fill+0x48>
	for(i=row1;i<=row2;i++)
 8007f4a:	89fb      	ldrh	r3, [r7, #14]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	81fb      	strh	r3, [r7, #14]
 8007f50:	89fa      	ldrh	r2, [r7, #14]
 8007f52:	887b      	ldrh	r3, [r7, #2]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d9ea      	bls.n	8007f2e <tft_fill+0x42>
		}
	} 	
	SPI_DISABLE;
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f5e:	4805      	ldr	r0, [pc, #20]	; (8007f74 <tft_fill+0x88>)
 8007f60:	f7f9 f84e 	bl	8001000 <HAL_GPIO_WritePin>
 8007f64:	2001      	movs	r0, #1
 8007f66:	f7f8 fd69 	bl	8000a3c <HAL_Delay>
}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd90      	pop	{r4, r7, pc}
 8007f72:	bf00      	nop
 8007f74:	40020800 	.word	0x40020800

08007f78 <tft_fill2>:

void tft_fill2(uint16_t row1,uint16_t column1,uint16_t row2,uint16_t column2,uint16_t color)
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4623      	mov	r3, r4
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	80bb      	strh	r3, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	807b      	strh	r3, [r7, #2]
 8007f92:	4613      	mov	r3, r2
 8007f94:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	SPI_ENABLE;
 8007f96:	2200      	movs	r2, #0
 8007f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f9c:	4818      	ldr	r0, [pc, #96]	; (8008000 <tft_fill2+0x88>)
 8007f9e:	f7f9 f82f 	bl	8001000 <HAL_GPIO_WritePin>
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	f7f8 fd4a 	bl	8000a3c <HAL_Delay>
	tft_add_set(column1,row1,column2,row2);
 8007fa8:	887b      	ldrh	r3, [r7, #2]
 8007faa:	883a      	ldrh	r2, [r7, #0]
 8007fac:	88f9      	ldrh	r1, [r7, #6]
 8007fae:	88b8      	ldrh	r0, [r7, #4]
 8007fb0:	f000 f8c8 	bl	8008144 <tft_add_set>
	for(i=column2;i>=column1;i--)
 8007fb4:	883b      	ldrh	r3, [r7, #0]
 8007fb6:	81fb      	strh	r3, [r7, #14]
 8007fb8:	e010      	b.n	8007fdc <tft_fill2+0x64>
	{
		for(j=row2;j>=row1;j--)
 8007fba:	887b      	ldrh	r3, [r7, #2]
 8007fbc:	81bb      	strh	r3, [r7, #12]
 8007fbe:	e006      	b.n	8007fce <tft_fill2+0x56>
		{
			tft_write_data(color);
 8007fc0:	8c3b      	ldrh	r3, [r7, #32]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f880 	bl	80080c8 <tft_write_data>
		for(j=row2;j>=row1;j--)
 8007fc8:	89bb      	ldrh	r3, [r7, #12]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	81bb      	strh	r3, [r7, #12]
 8007fce:	89ba      	ldrh	r2, [r7, #12]
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d2f4      	bcs.n	8007fc0 <tft_fill2+0x48>
	for(i=column2;i>=column1;i--)
 8007fd6:	89fb      	ldrh	r3, [r7, #14]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	81fb      	strh	r3, [r7, #14]
 8007fdc:	89fa      	ldrh	r2, [r7, #14]
 8007fde:	88bb      	ldrh	r3, [r7, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d2ea      	bcs.n	8007fba <tft_fill2+0x42>
		}
	}
	SPI_DISABLE;
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fea:	4805      	ldr	r0, [pc, #20]	; (8008000 <tft_fill2+0x88>)
 8007fec:	f7f9 f808 	bl	8001000 <HAL_GPIO_WritePin>
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	f7f8 fd23 	bl	8000a3c <HAL_Delay>
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd90      	pop	{r4, r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40020800 	.word	0x40020800

08008004 <tft_puts_image>:

void tft_puts_image(const unsigned char* image_arr)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint16_t temp;
	uint8_t high_byte,low_byte;
	
	SPI_ENABLE;
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008012:	481e      	ldr	r0, [pc, #120]	; (800808c <tft_puts_image+0x88>)
 8008014:	f7f8 fff4 	bl	8001000 <HAL_GPIO_WritePin>
 8008018:	2001      	movs	r0, #1
 800801a:	f7f8 fd0f 	bl	8000a3c <HAL_Delay>
	tft_add_set(0,0,240-1,320-1);
 800801e:	f240 133f 	movw	r3, #319	; 0x13f
 8008022:	22ef      	movs	r2, #239	; 0xef
 8008024:	2100      	movs	r1, #0
 8008026:	2000      	movs	r0, #0
 8008028:	f000 f88c 	bl	8008144 <tft_add_set>

	for(i=0;i<(240*320);i++)
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e01b      	b.n	800806a <tft_puts_image+0x66>
	{ 
		low_byte=*(image_arr+i*2);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	4413      	add	r3, r2
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	72fb      	strb	r3, [r7, #11]
		high_byte=*(image_arr+i*2+1);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	005b      	lsls	r3, r3, #1
 8008042:	3301      	adds	r3, #1
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	72bb      	strb	r3, [r7, #10]
		temp=((high_byte)<<8|(low_byte));
 800804c:	7abb      	ldrb	r3, [r7, #10]
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	b21a      	sxth	r2, r3
 8008052:	7afb      	ldrb	r3, [r7, #11]
 8008054:	b21b      	sxth	r3, r3
 8008056:	4313      	orrs	r3, r2
 8008058:	b21b      	sxth	r3, r3
 800805a:	813b      	strh	r3, [r7, #8]
		tft_write_data(temp);
 800805c:	893b      	ldrh	r3, [r7, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 f832 	bl	80080c8 <tft_write_data>
	for(i=0;i<(240*320);i++)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8008070:	d3df      	bcc.n	8008032 <tft_puts_image+0x2e>
	}	
	
	SPI_DISABLE;
 8008072:	2201      	movs	r2, #1
 8008074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008078:	4804      	ldr	r0, [pc, #16]	; (800808c <tft_puts_image+0x88>)
 800807a:	f7f8 ffc1 	bl	8001000 <HAL_GPIO_WritePin>
 800807e:	2001      	movs	r0, #1
 8008080:	f7f8 fcdc 	bl	8000a3c <HAL_Delay>
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40020800 	.word	0x40020800

08008090 <tft_write_data_8bit>:
/********************************************************************************************************************************/
/********************************************************************************************************************************/
/********************************************************************************************************************************/

void tft_write_data_8bit(uint8_t data)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
	uint8_t send_data =data;
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_SET);
 800809e:	2201      	movs	r2, #1
 80080a0:	2180      	movs	r1, #128	; 0x80
 80080a2:	4807      	ldr	r0, [pc, #28]	; (80080c0 <tft_write_data_8bit+0x30>)
 80080a4:	f7f8 ffac 	bl	8001000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,&send_data,1,500);
 80080a8:	f107 010f 	add.w	r1, r7, #15
 80080ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80080b0:	2201      	movs	r2, #1
 80080b2:	4804      	ldr	r0, [pc, #16]	; (80080c4 <tft_write_data_8bit+0x34>)
 80080b4:	f7fa fb82 	bl	80027bc <HAL_SPI_Transmit>
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40020800 	.word	0x40020800
 80080c4:	2000016c 	.word	0x2000016c

080080c8 <tft_write_data>:

void tft_write_data(uint16_t data)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	80fb      	strh	r3, [r7, #6]
	uint8_t send_data[2];
	send_data[0]=data >> 8;
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	0a1b      	lsrs	r3, r3, #8
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	733b      	strb	r3, [r7, #12]
	send_data[1]=data & 0x00ff;
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_SET);
 80080e2:	2201      	movs	r2, #1
 80080e4:	2180      	movs	r1, #128	; 0x80
 80080e6:	4807      	ldr	r0, [pc, #28]	; (8008104 <tft_write_data+0x3c>)
 80080e8:	f7f8 ff8a 	bl	8001000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,send_data,2,500);
 80080ec:	f107 010c 	add.w	r1, r7, #12
 80080f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80080f4:	2202      	movs	r2, #2
 80080f6:	4804      	ldr	r0, [pc, #16]	; (8008108 <tft_write_data+0x40>)
 80080f8:	f7fa fb60 	bl	80027bc <HAL_SPI_Transmit>
}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40020800 	.word	0x40020800
 8008108:	2000016c 	.word	0x2000016c

0800810c <tft_write_register>:

void tft_write_register(int8_t data)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	71fb      	strb	r3, [r7, #7]
	uint8_t register_value=data;
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT,DC_PIN,GPIO_PIN_RESET);
 800811a:	2200      	movs	r2, #0
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	4807      	ldr	r0, [pc, #28]	; (800813c <tft_write_register+0x30>)
 8008120:	f7f8 ff6e 	bl	8001000 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_HANDLE_TYPE_DEF,&register_value,1,500);
 8008124:	f107 010f 	add.w	r1, r7, #15
 8008128:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800812c:	2201      	movs	r2, #1
 800812e:	4804      	ldr	r0, [pc, #16]	; (8008140 <tft_write_register+0x34>)
 8008130:	f7fa fb44 	bl	80027bc <HAL_SPI_Transmit>
}
 8008134:	bf00      	nop
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40020800 	.word	0x40020800
 8008140:	2000016c 	.word	0x2000016c

08008144 <tft_add_set>:


void tft_add_set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8008144:	b590      	push	{r4, r7, lr}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	4623      	mov	r3, r4
 8008154:	80fb      	strh	r3, [r7, #6]
 8008156:	4603      	mov	r3, r0
 8008158:	80bb      	strh	r3, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	807b      	strh	r3, [r7, #2]
 800815e:	4613      	mov	r3, r2
 8008160:	803b      	strh	r3, [r7, #0]
   tft_write_register(0x2a);
 8008162:	202a      	movs	r0, #42	; 0x2a
 8008164:	f7ff ffd2 	bl	800810c <tft_write_register>
   tft_write_data(x1);
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff ffac 	bl	80080c8 <tft_write_data>
   tft_write_data(x2);
 8008170:	887b      	ldrh	r3, [r7, #2]
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff ffa8 	bl	80080c8 <tft_write_data>
  
   tft_write_register(0x2b);
 8008178:	202b      	movs	r0, #43	; 0x2b
 800817a:	f7ff ffc7 	bl	800810c <tft_write_register>
   tft_write_data(y1);
 800817e:	88bb      	ldrh	r3, [r7, #4]
 8008180:	4618      	mov	r0, r3
 8008182:	f7ff ffa1 	bl	80080c8 <tft_write_data>
   tft_write_data(y2);
 8008186:	883b      	ldrh	r3, [r7, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff ff9d 	bl	80080c8 <tft_write_data>

   tft_write_register(0x2C);
 800818e:	202c      	movs	r0, #44	; 0x2c
 8008190:	f7ff ffbc 	bl	800810c <tft_write_register>
   tft_write_register(0X3C);
 8008194:	203c      	movs	r0, #60	; 0x3c
 8008196:	f7ff ffb9 	bl	800810c <tft_write_register>
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd90      	pop	{r4, r7, pc}
	...

080081a4 <tft_draw_point>:

void tft_draw_point(uint16_t x,uint16_t y)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	460a      	mov	r2, r1
 80081ae:	80fb      	strh	r3, [r7, #6]
 80081b0:	4613      	mov	r3, r2
 80081b2:	80bb      	strh	r3, [r7, #4]
	tft_add_set(x,y,x,y);
 80081b4:	88bb      	ldrh	r3, [r7, #4]
 80081b6:	88fa      	ldrh	r2, [r7, #6]
 80081b8:	88b9      	ldrh	r1, [r7, #4]
 80081ba:	88f8      	ldrh	r0, [r7, #6]
 80081bc:	f7ff ffc2 	bl	8008144 <tft_add_set>
	tft_write_data(POINT_COLOR); 	
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <tft_draw_point+0x30>)
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7ff ff7f 	bl	80080c8 <tft_write_data>
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	2000089a 	.word	0x2000089a

080081d8 <tft_putchar>:
		tft_fill(x-1,y-1,x+1,y+1,POINT_COLOR);
}


void tft_putchar(uint16_t x,uint16_t y,uint8_t num,uint8_t mode)
{
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	4623      	mov	r3, r4
 80081e8:	80fb      	strh	r3, [r7, #6]
 80081ea:	4603      	mov	r3, r0
 80081ec:	80bb      	strh	r3, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
 80081f2:	4613      	mov	r3, r2
 80081f4:	70bb      	strb	r3, [r7, #2]
	uint8_t temp;
  uint8_t pos,t;
	//uint16_t x0=x;
	uint16_t colortemp=POINT_COLOR;      
 80081f6:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <tft_putchar+0x11c>)
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	817b      	strh	r3, [r7, #10]
  if(x>LCD_W-16||y>LCD_H-16)return;	    		   
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	2be0      	cmp	r3, #224	; 0xe0
 8008200:	d874      	bhi.n	80082ec <tft_putchar+0x114>
 8008202:	88bb      	ldrh	r3, [r7, #4]
 8008204:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8008208:	d870      	bhi.n	80082ec <tft_putchar+0x114>
	num=num-' ';
 800820a:	78fb      	ldrb	r3, [r7, #3]
 800820c:	3b20      	subs	r3, #32
 800820e:	70fb      	strb	r3, [r7, #3]
	
	tft_add_set(x,y,x+8-1,y+16-1);      
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	3307      	adds	r3, #7
 8008214:	b29a      	uxth	r2, r3
 8008216:	88bb      	ldrh	r3, [r7, #4]
 8008218:	330f      	adds	r3, #15
 800821a:	b29b      	uxth	r3, r3
 800821c:	88b9      	ldrh	r1, [r7, #4]
 800821e:	88f8      	ldrh	r0, [r7, #6]
 8008220:	f7ff ff90 	bl	8008144 <tft_add_set>
	if(!mode) 
 8008224:	78bb      	ldrb	r3, [r7, #2]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d12e      	bne.n	8008288 <tft_putchar+0xb0>
	{
		for(pos=0;pos<16;pos++)
 800822a:	2300      	movs	r3, #0
 800822c:	73bb      	strb	r3, [r7, #14]
 800822e:	e027      	b.n	8008280 <tft_putchar+0xa8>
		{ 
			temp=asc2_1608[(uint16_t)num*16+pos];		 
 8008230:	78fb      	ldrb	r3, [r7, #3]
 8008232:	011a      	lsls	r2, r3, #4
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4413      	add	r3, r2
 8008238:	4a2f      	ldr	r2, [pc, #188]	; (80082f8 <tft_putchar+0x120>)
 800823a:	5cd3      	ldrb	r3, [r2, r3]
 800823c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<8;t++)
 800823e:	2300      	movs	r3, #0
 8008240:	737b      	strb	r3, [r7, #13]
 8008242:	e017      	b.n	8008274 <tft_putchar+0x9c>
		  {                 
		        if(temp&0x01)POINT_COLOR=colortemp;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <tft_putchar+0x7e>
 800824e:	4a29      	ldr	r2, [pc, #164]	; (80082f4 <tft_putchar+0x11c>)
 8008250:	897b      	ldrh	r3, [r7, #10]
 8008252:	8013      	strh	r3, [r2, #0]
 8008254:	e003      	b.n	800825e <tft_putchar+0x86>
						else POINT_COLOR=BACK_COLOR;
 8008256:	4b29      	ldr	r3, [pc, #164]	; (80082fc <tft_putchar+0x124>)
 8008258:	881a      	ldrh	r2, [r3, #0]
 800825a:	4b26      	ldr	r3, [pc, #152]	; (80082f4 <tft_putchar+0x11c>)
 800825c:	801a      	strh	r2, [r3, #0]
						tft_write_data(POINT_COLOR);	
 800825e:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <tft_putchar+0x11c>)
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f7ff ff30 	bl	80080c8 <tft_write_data>
						temp>>=1; 
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<8;t++)
 800826e:	7b7b      	ldrb	r3, [r7, #13]
 8008270:	3301      	adds	r3, #1
 8008272:	737b      	strb	r3, [r7, #13]
 8008274:	7b7b      	ldrb	r3, [r7, #13]
 8008276:	2b07      	cmp	r3, #7
 8008278:	d9e4      	bls.n	8008244 <tft_putchar+0x6c>
		for(pos=0;pos<16;pos++)
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	3301      	adds	r3, #1
 800827e:	73bb      	strb	r3, [r7, #14]
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b0f      	cmp	r3, #15
 8008284:	d9d4      	bls.n	8008230 <tft_putchar+0x58>
 8008286:	e02d      	b.n	80082e4 <tft_putchar+0x10c>
		  }
		}	
	}
	else
	{
		for(pos=0;pos<16;pos++)
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]
 800828c:	e027      	b.n	80082de <tft_putchar+0x106>
		{
		    temp=asc2_1608[(uint16_t)num*16+pos];		 
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	011a      	lsls	r2, r3, #4
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	4413      	add	r3, r2
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <tft_putchar+0x120>)
 8008298:	5cd3      	ldrb	r3, [r2, r3]
 800829a:	73fb      	strb	r3, [r7, #15]
				for(t=0;t<8;t++)
 800829c:	2300      	movs	r3, #0
 800829e:	737b      	strb	r3, [r7, #13]
 80082a0:	e017      	b.n	80082d2 <tft_putchar+0xfa>
		    {                 
		        if(temp&0x01)tft_draw_point(x+t,y+pos);
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00c      	beq.n	80082c6 <tft_putchar+0xee>
 80082ac:	7b7b      	ldrb	r3, [r7, #13]
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	88fb      	ldrh	r3, [r7, #6]
 80082b2:	4413      	add	r3, r2
 80082b4:	b298      	uxth	r0, r3
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	88bb      	ldrh	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7ff ff6f 	bl	80081a4 <tft_draw_point>
		        temp>>=1; 
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	085b      	lsrs	r3, r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
				for(t=0;t<8;t++)
 80082cc:	7b7b      	ldrb	r3, [r7, #13]
 80082ce:	3301      	adds	r3, #1
 80082d0:	737b      	strb	r3, [r7, #13]
 80082d2:	7b7b      	ldrb	r3, [r7, #13]
 80082d4:	2b07      	cmp	r3, #7
 80082d6:	d9e4      	bls.n	80082a2 <tft_putchar+0xca>
		for(pos=0;pos<16;pos++)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	3301      	adds	r3, #1
 80082dc:	73bb      	strb	r3, [r7, #14]
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b0f      	cmp	r3, #15
 80082e2:	d9d4      	bls.n	800828e <tft_putchar+0xb6>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 80082e4:	4a03      	ldr	r2, [pc, #12]	; (80082f4 <tft_putchar+0x11c>)
 80082e6:	897b      	ldrh	r3, [r7, #10]
 80082e8:	8013      	strh	r3, [r2, #0]
 80082ea:	e000      	b.n	80082ee <tft_putchar+0x116>
  if(x>LCD_W-16||y>LCD_H-16)return;	    		   
 80082ec:	bf00      	nop
}
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd90      	pop	{r4, r7, pc}
 80082f4:	2000089a 	.word	0x2000089a
 80082f8:	0802ea00 	.word	0x0802ea00
 80082fc:	20000898 	.word	0x20000898

08008300 <tft_putchar26x48>:

//x is column
//y is row
void tft_putchar26x48(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	461a      	mov	r2, r3
 800830e:	4623      	mov	r3, r4
 8008310:	80fb      	strh	r3, [r7, #6]
 8008312:	4603      	mov	r3, r0
 8008314:	80bb      	strh	r3, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
 800831a:	4613      	mov	r3, r2
 800831c:	70bb      	strb	r3, [r7, #2]
	if((x>LCD_H-48)||(y>LCD_W-26)) return;
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008324:	d86a      	bhi.n	80083fc <tft_putchar26x48+0xfc>
 8008326:	88bb      	ldrh	r3, [r7, #4]
 8008328:	2bd6      	cmp	r3, #214	; 0xd6
 800832a:	d867      	bhi.n	80083fc <tft_putchar26x48+0xfc>
	uint8_t i,j,k,temp;
	
	tft_add_set(x,y,x+26-1,y+48-1); 
 800832c:	88fb      	ldrh	r3, [r7, #6]
 800832e:	3319      	adds	r3, #25
 8008330:	b29a      	uxth	r2, r3
 8008332:	88bb      	ldrh	r3, [r7, #4]
 8008334:	332f      	adds	r3, #47	; 0x2f
 8008336:	b29b      	uxth	r3, r3
 8008338:	88b9      	ldrh	r1, [r7, #4]
 800833a:	88f8      	ldrh	r0, [r7, #6]
 800833c:	f7ff ff02 	bl	8008144 <tft_add_set>
	
	for(i=0;i<48/8;i++)
 8008340:	2300      	movs	r3, #0
 8008342:	73fb      	strb	r3, [r7, #15]
 8008344:	e056      	b.n	80083f4 <tft_putchar26x48+0xf4>
	{
		for(j=0;j<8;j++)
 8008346:	2300      	movs	r3, #0
 8008348:	73bb      	strb	r3, [r7, #14]
 800834a:	e04d      	b.n	80083e8 <tft_putchar26x48+0xe8>
		{
			for(k=0;k<26;k++)
 800834c:	2300      	movs	r3, #0
 800834e:	737b      	strb	r3, [r7, #13]
 8008350:	e044      	b.n	80083dc <tft_putchar26x48+0xdc>
			{
				temp=Consolas26x48[(data-' ')*(48/8)*26+k*(48/8)+i];
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	3b20      	subs	r3, #32
 8008356:	229c      	movs	r2, #156	; 0x9c
 8008358:	fb02 f103 	mul.w	r1, r2, r3
 800835c:	7b7a      	ldrb	r2, [r7, #13]
 800835e:	4613      	mov	r3, r2
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	4413      	add	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	18ca      	adds	r2, r1, r3
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	4413      	add	r3, r2
 800836c:	4a25      	ldr	r2, [pc, #148]	; (8008404 <tft_putchar26x48+0x104>)
 800836e:	5cd3      	ldrb	r3, [r2, r3]
 8008370:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 8008372:	78bb      	ldrb	r3, [r7, #2]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d113      	bne.n	80083a0 <tft_putchar26x48+0xa0>
				{
					if(temp&(0x01<<j))
 8008378:	7b3a      	ldrb	r2, [r7, #12]
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	fa42 f303 	asr.w	r3, r2, r3
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d005      	beq.n	8008394 <tft_putchar26x48+0x94>
					{
						tft_write_data(POINT_COLOR);
 8008388:	4b1f      	ldr	r3, [pc, #124]	; (8008408 <tft_putchar26x48+0x108>)
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff fe9b 	bl	80080c8 <tft_write_data>
 8008392:	e020      	b.n	80083d6 <tft_putchar26x48+0xd6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 8008394:	4b1d      	ldr	r3, [pc, #116]	; (800840c <tft_putchar26x48+0x10c>)
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fe95 	bl	80080c8 <tft_write_data>
 800839e:	e01a      	b.n	80083d6 <tft_putchar26x48+0xd6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 80083a0:	7b3a      	ldrb	r2, [r7, #12]
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	fa42 f303 	asr.w	r3, r2, r3
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d012      	beq.n	80083d6 <tft_putchar26x48+0xd6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 80083b0:	7b7b      	ldrb	r3, [r7, #13]
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	4413      	add	r3, r2
 80083b8:	b298      	uxth	r0, r3
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	4413      	add	r3, r2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	88bb      	ldrh	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	4619      	mov	r1, r3
 80083d2:	f7ff fee7 	bl	80081a4 <tft_draw_point>
			for(k=0;k<26;k++)
 80083d6:	7b7b      	ldrb	r3, [r7, #13]
 80083d8:	3301      	adds	r3, #1
 80083da:	737b      	strb	r3, [r7, #13]
 80083dc:	7b7b      	ldrb	r3, [r7, #13]
 80083de:	2b19      	cmp	r3, #25
 80083e0:	d9b7      	bls.n	8008352 <tft_putchar26x48+0x52>
		for(j=0;j<8;j++)
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	3301      	adds	r3, #1
 80083e6:	73bb      	strb	r3, [r7, #14]
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	2b07      	cmp	r3, #7
 80083ec:	d9ae      	bls.n	800834c <tft_putchar26x48+0x4c>
	for(i=0;i<48/8;i++)
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	3301      	adds	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d9a5      	bls.n	8008346 <tft_putchar26x48+0x46>
 80083fa:	e000      	b.n	80083fe <tft_putchar26x48+0xfe>
	if((x>LCD_H-48)||(y>LCD_W-26)) return;
 80083fc:	bf00      	nop
					}
				}
			}
		}
	}
}
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	bd90      	pop	{r4, r7, pc}
 8008404:	08031ab0 	.word	0x08031ab0
 8008408:	2000089a 	.word	0x2000089a
 800840c:	20000898 	.word	0x20000898

08008410 <tft_putchar14x24>:



void tft_putchar14x24(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	461a      	mov	r2, r3
 800841e:	4623      	mov	r3, r4
 8008420:	80fb      	strh	r3, [r7, #6]
 8008422:	4603      	mov	r3, r0
 8008424:	80bb      	strh	r3, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
 800842a:	4613      	mov	r3, r2
 800842c:	70bb      	strb	r3, [r7, #2]
	//if((x>LCD_H-24)||(y>LCD_W-14)) return;
	uint8_t i,j,k,temp;

	tft_add_set(x,y,x+14-1,y+24-1); 
 800842e:	88fb      	ldrh	r3, [r7, #6]
 8008430:	330d      	adds	r3, #13
 8008432:	b29a      	uxth	r2, r3
 8008434:	88bb      	ldrh	r3, [r7, #4]
 8008436:	3317      	adds	r3, #23
 8008438:	b29b      	uxth	r3, r3
 800843a:	88b9      	ldrh	r1, [r7, #4]
 800843c:	88f8      	ldrh	r0, [r7, #6]
 800843e:	f7ff fe81 	bl	8008144 <tft_add_set>
	
	for(i=0;i<24/8;i++)
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
 8008446:	e055      	b.n	80084f4 <tft_putchar14x24+0xe4>
	{
		for(j=0;j<8;j++)
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]
 800844c:	e04c      	b.n	80084e8 <tft_putchar14x24+0xd8>
		{
			for(k=0;k<14;k++)
 800844e:	2300      	movs	r3, #0
 8008450:	737b      	strb	r3, [r7, #13]
 8008452:	e043      	b.n	80084dc <tft_putchar14x24+0xcc>
			{
				temp=Consolas14x24[(data-' ')*(24/8)*14+k*(24/8)+i];
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	3b20      	subs	r3, #32
 8008458:	222a      	movs	r2, #42	; 0x2a
 800845a:	fb02 f103 	mul.w	r1, r2, r3
 800845e:	7b7a      	ldrb	r2, [r7, #13]
 8008460:	4613      	mov	r3, r2
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	4413      	add	r3, r2
 8008466:	18ca      	adds	r2, r1, r3
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	4413      	add	r3, r2
 800846c:	4a25      	ldr	r2, [pc, #148]	; (8008504 <tft_putchar14x24+0xf4>)
 800846e:	5cd3      	ldrb	r3, [r2, r3]
 8008470:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 8008472:	78bb      	ldrb	r3, [r7, #2]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <tft_putchar14x24+0x90>
				{
					if(temp&(0x01<<j))
 8008478:	7b3a      	ldrb	r2, [r7, #12]
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	fa42 f303 	asr.w	r3, r2, r3
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <tft_putchar14x24+0x84>
					{
						tft_write_data(POINT_COLOR);
 8008488:	4b1f      	ldr	r3, [pc, #124]	; (8008508 <tft_putchar14x24+0xf8>)
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff fe1b 	bl	80080c8 <tft_write_data>
 8008492:	e020      	b.n	80084d6 <tft_putchar14x24+0xc6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 8008494:	4b1d      	ldr	r3, [pc, #116]	; (800850c <tft_putchar14x24+0xfc>)
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff fe15 	bl	80080c8 <tft_write_data>
 800849e:	e01a      	b.n	80084d6 <tft_putchar14x24+0xc6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 80084a0:	7b3a      	ldrb	r2, [r7, #12]
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	fa42 f303 	asr.w	r3, r2, r3
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d012      	beq.n	80084d6 <tft_putchar14x24+0xc6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 80084b0:	7b7b      	ldrb	r3, [r7, #13]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	88fb      	ldrh	r3, [r7, #6]
 80084b6:	4413      	add	r3, r2
 80084b8:	b298      	uxth	r0, r3
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4413      	add	r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	88bb      	ldrh	r3, [r7, #4]
 80084cc:	4413      	add	r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	f7ff fe67 	bl	80081a4 <tft_draw_point>
			for(k=0;k<14;k++)
 80084d6:	7b7b      	ldrb	r3, [r7, #13]
 80084d8:	3301      	adds	r3, #1
 80084da:	737b      	strb	r3, [r7, #13]
 80084dc:	7b7b      	ldrb	r3, [r7, #13]
 80084de:	2b0d      	cmp	r3, #13
 80084e0:	d9b8      	bls.n	8008454 <tft_putchar14x24+0x44>
		for(j=0;j<8;j++)
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	3301      	adds	r3, #1
 80084e6:	73bb      	strb	r3, [r7, #14]
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b07      	cmp	r3, #7
 80084ec:	d9af      	bls.n	800844e <tft_putchar14x24+0x3e>
	for(i=0;i<24/8;i++)
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	3301      	adds	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d9a6      	bls.n	8008448 <tft_putchar14x24+0x38>
					}
				}
			}
		}
	}
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd90      	pop	{r4, r7, pc}
 8008502:	bf00      	nop
 8008504:	08030af0 	.word	0x08030af0
 8008508:	2000089a 	.word	0x2000089a
 800850c:	20000898 	.word	0x20000898

08008510 <tft_putchar18x32>:



void tft_putchar18x32(uint16_t x,uint16_t y,uint8_t data,uint8_t mode)
{
 8008510:	b590      	push	{r4, r7, lr}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	461a      	mov	r2, r3
 800851e:	4623      	mov	r3, r4
 8008520:	80fb      	strh	r3, [r7, #6]
 8008522:	4603      	mov	r3, r0
 8008524:	80bb      	strh	r3, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]
 800852a:	4613      	mov	r3, r2
 800852c:	70bb      	strb	r3, [r7, #2]
	if((x>LCD_H-32)||(y>LCD_W-18)) return;
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8008534:	d86a      	bhi.n	800860c <tft_putchar18x32+0xfc>
 8008536:	88bb      	ldrh	r3, [r7, #4]
 8008538:	2bde      	cmp	r3, #222	; 0xde
 800853a:	d867      	bhi.n	800860c <tft_putchar18x32+0xfc>
	uint8_t i,j,k,temp;

	tft_add_set(x,y,x+18-1,y+32-1); 
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	3311      	adds	r3, #17
 8008540:	b29a      	uxth	r2, r3
 8008542:	88bb      	ldrh	r3, [r7, #4]
 8008544:	331f      	adds	r3, #31
 8008546:	b29b      	uxth	r3, r3
 8008548:	88b9      	ldrh	r1, [r7, #4]
 800854a:	88f8      	ldrh	r0, [r7, #6]
 800854c:	f7ff fdfa 	bl	8008144 <tft_add_set>
	
	for(i=0;i<32/8;i++)
 8008550:	2300      	movs	r3, #0
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	e056      	b.n	8008604 <tft_putchar18x32+0xf4>
	{
		for(j=0;j<8;j++)
 8008556:	2300      	movs	r3, #0
 8008558:	73bb      	strb	r3, [r7, #14]
 800855a:	e04d      	b.n	80085f8 <tft_putchar18x32+0xe8>
		{
			for(k=0;k<18;k++)
 800855c:	2300      	movs	r3, #0
 800855e:	737b      	strb	r3, [r7, #13]
 8008560:	e044      	b.n	80085ec <tft_putchar18x32+0xdc>
			{
				temp=Consolas18x32[(data-' ')*(32/8)*18+k*(32/8)+i];
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	f1a3 0220 	sub.w	r2, r3, #32
 8008568:	4613      	mov	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	4413      	add	r3, r2
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	461a      	mov	r2, r3
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	4413      	add	r3, r2
 8008576:	009a      	lsls	r2, r3, #2
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4413      	add	r3, r2
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <tft_putchar18x32+0x104>)
 800857e:	5cd3      	ldrb	r3, [r2, r3]
 8008580:	733b      	strb	r3, [r7, #12]
				if(mode==TFT_STRING_MODE_BACKGROUND)
 8008582:	78bb      	ldrb	r3, [r7, #2]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d113      	bne.n	80085b0 <tft_putchar18x32+0xa0>
				{
					if(temp&(0x01<<j))
 8008588:	7b3a      	ldrb	r2, [r7, #12]
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	fa42 f303 	asr.w	r3, r2, r3
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d005      	beq.n	80085a4 <tft_putchar18x32+0x94>
					{
						tft_write_data(POINT_COLOR);
 8008598:	4b1f      	ldr	r3, [pc, #124]	; (8008618 <tft_putchar18x32+0x108>)
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff fd93 	bl	80080c8 <tft_write_data>
 80085a2:	e020      	b.n	80085e6 <tft_putchar18x32+0xd6>
					}
					else
					{
						tft_write_data(BACK_COLOR);
 80085a4:	4b1d      	ldr	r3, [pc, #116]	; (800861c <tft_putchar18x32+0x10c>)
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff fd8d 	bl	80080c8 <tft_write_data>
 80085ae:	e01a      	b.n	80085e6 <tft_putchar18x32+0xd6>
					}
				}
				else
				{
					if(temp&(0x01<<j))
 80085b0:	7b3a      	ldrb	r2, [r7, #12]
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	fa42 f303 	asr.w	r3, r2, r3
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d012      	beq.n	80085e6 <tft_putchar18x32+0xd6>
					{
						tft_draw_point(x+k,y+(8*i+j));
 80085c0:	7b7b      	ldrb	r3, [r7, #13]
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	4413      	add	r3, r2
 80085c8:	b298      	uxth	r0, r3
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	4413      	add	r3, r2
 80085d8:	b29a      	uxth	r2, r3
 80085da:	88bb      	ldrh	r3, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	b29b      	uxth	r3, r3
 80085e0:	4619      	mov	r1, r3
 80085e2:	f7ff fddf 	bl	80081a4 <tft_draw_point>
			for(k=0;k<18;k++)
 80085e6:	7b7b      	ldrb	r3, [r7, #13]
 80085e8:	3301      	adds	r3, #1
 80085ea:	737b      	strb	r3, [r7, #13]
 80085ec:	7b7b      	ldrb	r3, [r7, #13]
 80085ee:	2b11      	cmp	r3, #17
 80085f0:	d9b7      	bls.n	8008562 <tft_putchar18x32+0x52>
		for(j=0;j<8;j++)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	3301      	adds	r3, #1
 80085f6:	73bb      	strb	r3, [r7, #14]
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b07      	cmp	r3, #7
 80085fc:	d9ae      	bls.n	800855c <tft_putchar18x32+0x4c>
	for(i=0;i<32/8;i++)
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	3301      	adds	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d9a5      	bls.n	8008556 <tft_putchar18x32+0x46>
 800860a:	e000      	b.n	800860e <tft_putchar18x32+0xfe>
	if((x>LCD_H-32)||(y>LCD_W-18)) return;
 800860c:	bf00      	nop
					}
				}
			}
		}
	}
}
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	bd90      	pop	{r4, r7, pc}
 8008614:	0802eff0 	.word	0x0802eff0
 8008618:	2000089a 	.word	0x2000089a
 800861c:	20000898 	.word	0x20000898

08008620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008658 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008624:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008626:	e003      	b.n	8008630 <LoopCopyDataInit>

08008628 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008628:	4b0c      	ldr	r3, [pc, #48]	; (800865c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800862a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800862c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800862e:	3104      	adds	r1, #4

08008630 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008630:	480b      	ldr	r0, [pc, #44]	; (8008660 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008632:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008634:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008636:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008638:	d3f6      	bcc.n	8008628 <CopyDataInit>
  ldr  r2, =_sbss
 800863a:	4a0b      	ldr	r2, [pc, #44]	; (8008668 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800863c:	e002      	b.n	8008644 <LoopFillZerobss>

0800863e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800863e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008640:	f842 3b04 	str.w	r3, [r2], #4

08008644 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008644:	4b09      	ldr	r3, [pc, #36]	; (800866c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008646:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008648:	d3f9      	bcc.n	800863e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800864a:	f7ff f90b 	bl	8007864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800864e:	f000 f817 	bl	8008680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008652:	f7fc f90d 	bl	8004870 <main>
  bx  lr    
 8008656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008658:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800865c:	08035598 	.word	0x08035598
  ldr  r0, =_sdata
 8008660:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008664:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8008668:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800866c:	200008a0 	.word	0x200008a0

08008670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008670:	e7fe      	b.n	8008670 <ADC_IRQHandler>
	...

08008674 <__errno>:
 8008674:	4b01      	ldr	r3, [pc, #4]	; (800867c <__errno+0x8>)
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	2000001c 	.word	0x2000001c

08008680 <__libc_init_array>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4e0d      	ldr	r6, [pc, #52]	; (80086b8 <__libc_init_array+0x38>)
 8008684:	4c0d      	ldr	r4, [pc, #52]	; (80086bc <__libc_init_array+0x3c>)
 8008686:	1ba4      	subs	r4, r4, r6
 8008688:	10a4      	asrs	r4, r4, #2
 800868a:	2500      	movs	r5, #0
 800868c:	42a5      	cmp	r5, r4
 800868e:	d109      	bne.n	80086a4 <__libc_init_array+0x24>
 8008690:	4e0b      	ldr	r6, [pc, #44]	; (80086c0 <__libc_init_array+0x40>)
 8008692:	4c0c      	ldr	r4, [pc, #48]	; (80086c4 <__libc_init_array+0x44>)
 8008694:	f000 fcc8 	bl	8009028 <_init>
 8008698:	1ba4      	subs	r4, r4, r6
 800869a:	10a4      	asrs	r4, r4, #2
 800869c:	2500      	movs	r5, #0
 800869e:	42a5      	cmp	r5, r4
 80086a0:	d105      	bne.n	80086ae <__libc_init_array+0x2e>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086a8:	4798      	blx	r3
 80086aa:	3501      	adds	r5, #1
 80086ac:	e7ee      	b.n	800868c <__libc_init_array+0xc>
 80086ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086b2:	4798      	blx	r3
 80086b4:	3501      	adds	r5, #1
 80086b6:	e7f2      	b.n	800869e <__libc_init_array+0x1e>
 80086b8:	08035590 	.word	0x08035590
 80086bc:	08035590 	.word	0x08035590
 80086c0:	08035590 	.word	0x08035590
 80086c4:	08035594 	.word	0x08035594

080086c8 <__itoa>:
 80086c8:	1e93      	subs	r3, r2, #2
 80086ca:	2b22      	cmp	r3, #34	; 0x22
 80086cc:	b510      	push	{r4, lr}
 80086ce:	460c      	mov	r4, r1
 80086d0:	d904      	bls.n	80086dc <__itoa+0x14>
 80086d2:	2300      	movs	r3, #0
 80086d4:	700b      	strb	r3, [r1, #0]
 80086d6:	461c      	mov	r4, r3
 80086d8:	4620      	mov	r0, r4
 80086da:	bd10      	pop	{r4, pc}
 80086dc:	2a0a      	cmp	r2, #10
 80086de:	d109      	bne.n	80086f4 <__itoa+0x2c>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	da07      	bge.n	80086f4 <__itoa+0x2c>
 80086e4:	232d      	movs	r3, #45	; 0x2d
 80086e6:	700b      	strb	r3, [r1, #0]
 80086e8:	4240      	negs	r0, r0
 80086ea:	2101      	movs	r1, #1
 80086ec:	4421      	add	r1, r4
 80086ee:	f000 f83d 	bl	800876c <__utoa>
 80086f2:	e7f1      	b.n	80086d8 <__itoa+0x10>
 80086f4:	2100      	movs	r1, #0
 80086f6:	e7f9      	b.n	80086ec <__itoa+0x24>

080086f8 <itoa>:
 80086f8:	f7ff bfe6 	b.w	80086c8 <__itoa>

080086fc <memset>:
 80086fc:	4402      	add	r2, r0
 80086fe:	4603      	mov	r3, r0
 8008700:	4293      	cmp	r3, r2
 8008702:	d100      	bne.n	8008706 <memset+0xa>
 8008704:	4770      	bx	lr
 8008706:	f803 1b01 	strb.w	r1, [r3], #1
 800870a:	e7f9      	b.n	8008700 <memset+0x4>

0800870c <siprintf>:
 800870c:	b40e      	push	{r1, r2, r3}
 800870e:	b500      	push	{lr}
 8008710:	b09c      	sub	sp, #112	; 0x70
 8008712:	ab1d      	add	r3, sp, #116	; 0x74
 8008714:	9002      	str	r0, [sp, #8]
 8008716:	9006      	str	r0, [sp, #24]
 8008718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800871c:	4809      	ldr	r0, [pc, #36]	; (8008744 <siprintf+0x38>)
 800871e:	9107      	str	r1, [sp, #28]
 8008720:	9104      	str	r1, [sp, #16]
 8008722:	4909      	ldr	r1, [pc, #36]	; (8008748 <siprintf+0x3c>)
 8008724:	f853 2b04 	ldr.w	r2, [r3], #4
 8008728:	9105      	str	r1, [sp, #20]
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	a902      	add	r1, sp, #8
 8008730:	f000 f8b4 	bl	800889c <_svfiprintf_r>
 8008734:	9b02      	ldr	r3, [sp, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	b01c      	add	sp, #112	; 0x70
 800873c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008740:	b003      	add	sp, #12
 8008742:	4770      	bx	lr
 8008744:	2000001c 	.word	0x2000001c
 8008748:	ffff0208 	.word	0xffff0208

0800874c <strcat>:
 800874c:	b510      	push	{r4, lr}
 800874e:	4603      	mov	r3, r0
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	1c5c      	adds	r4, r3, #1
 8008754:	b93a      	cbnz	r2, 8008766 <strcat+0x1a>
 8008756:	3b01      	subs	r3, #1
 8008758:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008760:	2a00      	cmp	r2, #0
 8008762:	d1f9      	bne.n	8008758 <strcat+0xc>
 8008764:	bd10      	pop	{r4, pc}
 8008766:	4623      	mov	r3, r4
 8008768:	e7f2      	b.n	8008750 <strcat+0x4>
	...

0800876c <__utoa>:
 800876c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876e:	4b1d      	ldr	r3, [pc, #116]	; (80087e4 <__utoa+0x78>)
 8008770:	b08b      	sub	sp, #44	; 0x2c
 8008772:	4605      	mov	r5, r0
 8008774:	460c      	mov	r4, r1
 8008776:	466e      	mov	r6, sp
 8008778:	f103 0c20 	add.w	ip, r3, #32
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	6859      	ldr	r1, [r3, #4]
 8008780:	4637      	mov	r7, r6
 8008782:	c703      	stmia	r7!, {r0, r1}
 8008784:	3308      	adds	r3, #8
 8008786:	4563      	cmp	r3, ip
 8008788:	463e      	mov	r6, r7
 800878a:	d1f7      	bne.n	800877c <__utoa+0x10>
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	713b      	strb	r3, [r7, #4]
 8008792:	1e93      	subs	r3, r2, #2
 8008794:	2b22      	cmp	r3, #34	; 0x22
 8008796:	6038      	str	r0, [r7, #0]
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	d904      	bls.n	80087a8 <__utoa+0x3c>
 800879e:	7023      	strb	r3, [r4, #0]
 80087a0:	461c      	mov	r4, r3
 80087a2:	4620      	mov	r0, r4
 80087a4:	b00b      	add	sp, #44	; 0x2c
 80087a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a8:	1e66      	subs	r6, r4, #1
 80087aa:	fbb5 f0f2 	udiv	r0, r5, r2
 80087ae:	af0a      	add	r7, sp, #40	; 0x28
 80087b0:	fb02 5510 	mls	r5, r2, r0, r5
 80087b4:	443d      	add	r5, r7
 80087b6:	1c59      	adds	r1, r3, #1
 80087b8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80087bc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80087c0:	4605      	mov	r5, r0
 80087c2:	b968      	cbnz	r0, 80087e0 <__utoa+0x74>
 80087c4:	5460      	strb	r0, [r4, r1]
 80087c6:	4423      	add	r3, r4
 80087c8:	4622      	mov	r2, r4
 80087ca:	1b19      	subs	r1, r3, r4
 80087cc:	1b10      	subs	r0, r2, r4
 80087ce:	4281      	cmp	r1, r0
 80087d0:	dde7      	ble.n	80087a2 <__utoa+0x36>
 80087d2:	7811      	ldrb	r1, [r2, #0]
 80087d4:	7818      	ldrb	r0, [r3, #0]
 80087d6:	f802 0b01 	strb.w	r0, [r2], #1
 80087da:	f803 1901 	strb.w	r1, [r3], #-1
 80087de:	e7f4      	b.n	80087ca <__utoa+0x5e>
 80087e0:	460b      	mov	r3, r1
 80087e2:	e7e2      	b.n	80087aa <__utoa+0x3e>
 80087e4:	08035530 	.word	0x08035530

080087e8 <__ssputs_r>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	688e      	ldr	r6, [r1, #8]
 80087ee:	429e      	cmp	r6, r3
 80087f0:	4682      	mov	sl, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	4690      	mov	r8, r2
 80087f6:	4699      	mov	r9, r3
 80087f8:	d837      	bhi.n	800886a <__ssputs_r+0x82>
 80087fa:	898a      	ldrh	r2, [r1, #12]
 80087fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008800:	d031      	beq.n	8008866 <__ssputs_r+0x7e>
 8008802:	6825      	ldr	r5, [r4, #0]
 8008804:	6909      	ldr	r1, [r1, #16]
 8008806:	1a6f      	subs	r7, r5, r1
 8008808:	6965      	ldr	r5, [r4, #20]
 800880a:	2302      	movs	r3, #2
 800880c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008810:	fb95 f5f3 	sdiv	r5, r5, r3
 8008814:	f109 0301 	add.w	r3, r9, #1
 8008818:	443b      	add	r3, r7
 800881a:	429d      	cmp	r5, r3
 800881c:	bf38      	it	cc
 800881e:	461d      	movcc	r5, r3
 8008820:	0553      	lsls	r3, r2, #21
 8008822:	d530      	bpl.n	8008886 <__ssputs_r+0x9e>
 8008824:	4629      	mov	r1, r5
 8008826:	f000 fb2b 	bl	8008e80 <_malloc_r>
 800882a:	4606      	mov	r6, r0
 800882c:	b950      	cbnz	r0, 8008844 <__ssputs_r+0x5c>
 800882e:	230c      	movs	r3, #12
 8008830:	f8ca 3000 	str.w	r3, [sl]
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008844:	463a      	mov	r2, r7
 8008846:	6921      	ldr	r1, [r4, #16]
 8008848:	f000 faa8 	bl	8008d9c <memcpy>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	6126      	str	r6, [r4, #16]
 800885a:	6165      	str	r5, [r4, #20]
 800885c:	443e      	add	r6, r7
 800885e:	1bed      	subs	r5, r5, r7
 8008860:	6026      	str	r6, [r4, #0]
 8008862:	60a5      	str	r5, [r4, #8]
 8008864:	464e      	mov	r6, r9
 8008866:	454e      	cmp	r6, r9
 8008868:	d900      	bls.n	800886c <__ssputs_r+0x84>
 800886a:	464e      	mov	r6, r9
 800886c:	4632      	mov	r2, r6
 800886e:	4641      	mov	r1, r8
 8008870:	6820      	ldr	r0, [r4, #0]
 8008872:	f000 fa9e 	bl	8008db2 <memmove>
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	1b9b      	subs	r3, r3, r6
 800887a:	60a3      	str	r3, [r4, #8]
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	441e      	add	r6, r3
 8008880:	6026      	str	r6, [r4, #0]
 8008882:	2000      	movs	r0, #0
 8008884:	e7dc      	b.n	8008840 <__ssputs_r+0x58>
 8008886:	462a      	mov	r2, r5
 8008888:	f000 fb54 	bl	8008f34 <_realloc_r>
 800888c:	4606      	mov	r6, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d1e2      	bne.n	8008858 <__ssputs_r+0x70>
 8008892:	6921      	ldr	r1, [r4, #16]
 8008894:	4650      	mov	r0, sl
 8008896:	f000 faa5 	bl	8008de4 <_free_r>
 800889a:	e7c8      	b.n	800882e <__ssputs_r+0x46>

0800889c <_svfiprintf_r>:
 800889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	461d      	mov	r5, r3
 80088a2:	898b      	ldrh	r3, [r1, #12]
 80088a4:	061f      	lsls	r7, r3, #24
 80088a6:	b09d      	sub	sp, #116	; 0x74
 80088a8:	4680      	mov	r8, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	4616      	mov	r6, r2
 80088ae:	d50f      	bpl.n	80088d0 <_svfiprintf_r+0x34>
 80088b0:	690b      	ldr	r3, [r1, #16]
 80088b2:	b96b      	cbnz	r3, 80088d0 <_svfiprintf_r+0x34>
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	f000 fae3 	bl	8008e80 <_malloc_r>
 80088ba:	6020      	str	r0, [r4, #0]
 80088bc:	6120      	str	r0, [r4, #16]
 80088be:	b928      	cbnz	r0, 80088cc <_svfiprintf_r+0x30>
 80088c0:	230c      	movs	r3, #12
 80088c2:	f8c8 3000 	str.w	r3, [r8]
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	e0c8      	b.n	8008a5e <_svfiprintf_r+0x1c2>
 80088cc:	2340      	movs	r3, #64	; 0x40
 80088ce:	6163      	str	r3, [r4, #20]
 80088d0:	2300      	movs	r3, #0
 80088d2:	9309      	str	r3, [sp, #36]	; 0x24
 80088d4:	2320      	movs	r3, #32
 80088d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088da:	2330      	movs	r3, #48	; 0x30
 80088dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088e0:	9503      	str	r5, [sp, #12]
 80088e2:	f04f 0b01 	mov.w	fp, #1
 80088e6:	4637      	mov	r7, r6
 80088e8:	463d      	mov	r5, r7
 80088ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088ee:	b10b      	cbz	r3, 80088f4 <_svfiprintf_r+0x58>
 80088f0:	2b25      	cmp	r3, #37	; 0x25
 80088f2:	d13e      	bne.n	8008972 <_svfiprintf_r+0xd6>
 80088f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80088f8:	d00b      	beq.n	8008912 <_svfiprintf_r+0x76>
 80088fa:	4653      	mov	r3, sl
 80088fc:	4632      	mov	r2, r6
 80088fe:	4621      	mov	r1, r4
 8008900:	4640      	mov	r0, r8
 8008902:	f7ff ff71 	bl	80087e8 <__ssputs_r>
 8008906:	3001      	adds	r0, #1
 8008908:	f000 80a4 	beq.w	8008a54 <_svfiprintf_r+0x1b8>
 800890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890e:	4453      	add	r3, sl
 8008910:	9309      	str	r3, [sp, #36]	; 0x24
 8008912:	783b      	ldrb	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 809d 	beq.w	8008a54 <_svfiprintf_r+0x1b8>
 800891a:	2300      	movs	r3, #0
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	9307      	str	r3, [sp, #28]
 8008928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800892c:	931a      	str	r3, [sp, #104]	; 0x68
 800892e:	462f      	mov	r7, r5
 8008930:	2205      	movs	r2, #5
 8008932:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008936:	4850      	ldr	r0, [pc, #320]	; (8008a78 <_svfiprintf_r+0x1dc>)
 8008938:	f7f7 fc5a 	bl	80001f0 <memchr>
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	b9d0      	cbnz	r0, 8008976 <_svfiprintf_r+0xda>
 8008940:	06d9      	lsls	r1, r3, #27
 8008942:	bf44      	itt	mi
 8008944:	2220      	movmi	r2, #32
 8008946:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800894a:	071a      	lsls	r2, r3, #28
 800894c:	bf44      	itt	mi
 800894e:	222b      	movmi	r2, #43	; 0x2b
 8008950:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008954:	782a      	ldrb	r2, [r5, #0]
 8008956:	2a2a      	cmp	r2, #42	; 0x2a
 8008958:	d015      	beq.n	8008986 <_svfiprintf_r+0xea>
 800895a:	9a07      	ldr	r2, [sp, #28]
 800895c:	462f      	mov	r7, r5
 800895e:	2000      	movs	r0, #0
 8008960:	250a      	movs	r5, #10
 8008962:	4639      	mov	r1, r7
 8008964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008968:	3b30      	subs	r3, #48	; 0x30
 800896a:	2b09      	cmp	r3, #9
 800896c:	d94d      	bls.n	8008a0a <_svfiprintf_r+0x16e>
 800896e:	b1b8      	cbz	r0, 80089a0 <_svfiprintf_r+0x104>
 8008970:	e00f      	b.n	8008992 <_svfiprintf_r+0xf6>
 8008972:	462f      	mov	r7, r5
 8008974:	e7b8      	b.n	80088e8 <_svfiprintf_r+0x4c>
 8008976:	4a40      	ldr	r2, [pc, #256]	; (8008a78 <_svfiprintf_r+0x1dc>)
 8008978:	1a80      	subs	r0, r0, r2
 800897a:	fa0b f000 	lsl.w	r0, fp, r0
 800897e:	4318      	orrs	r0, r3
 8008980:	9004      	str	r0, [sp, #16]
 8008982:	463d      	mov	r5, r7
 8008984:	e7d3      	b.n	800892e <_svfiprintf_r+0x92>
 8008986:	9a03      	ldr	r2, [sp, #12]
 8008988:	1d11      	adds	r1, r2, #4
 800898a:	6812      	ldr	r2, [r2, #0]
 800898c:	9103      	str	r1, [sp, #12]
 800898e:	2a00      	cmp	r2, #0
 8008990:	db01      	blt.n	8008996 <_svfiprintf_r+0xfa>
 8008992:	9207      	str	r2, [sp, #28]
 8008994:	e004      	b.n	80089a0 <_svfiprintf_r+0x104>
 8008996:	4252      	negs	r2, r2
 8008998:	f043 0302 	orr.w	r3, r3, #2
 800899c:	9207      	str	r2, [sp, #28]
 800899e:	9304      	str	r3, [sp, #16]
 80089a0:	783b      	ldrb	r3, [r7, #0]
 80089a2:	2b2e      	cmp	r3, #46	; 0x2e
 80089a4:	d10c      	bne.n	80089c0 <_svfiprintf_r+0x124>
 80089a6:	787b      	ldrb	r3, [r7, #1]
 80089a8:	2b2a      	cmp	r3, #42	; 0x2a
 80089aa:	d133      	bne.n	8008a14 <_svfiprintf_r+0x178>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	9203      	str	r2, [sp, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bfb8      	it	lt
 80089b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80089bc:	3702      	adds	r7, #2
 80089be:	9305      	str	r3, [sp, #20]
 80089c0:	4d2e      	ldr	r5, [pc, #184]	; (8008a7c <_svfiprintf_r+0x1e0>)
 80089c2:	7839      	ldrb	r1, [r7, #0]
 80089c4:	2203      	movs	r2, #3
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7f7 fc12 	bl	80001f0 <memchr>
 80089cc:	b138      	cbz	r0, 80089de <_svfiprintf_r+0x142>
 80089ce:	2340      	movs	r3, #64	; 0x40
 80089d0:	1b40      	subs	r0, r0, r5
 80089d2:	fa03 f000 	lsl.w	r0, r3, r0
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	4303      	orrs	r3, r0
 80089da:	3701      	adds	r7, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	7839      	ldrb	r1, [r7, #0]
 80089e0:	4827      	ldr	r0, [pc, #156]	; (8008a80 <_svfiprintf_r+0x1e4>)
 80089e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089e6:	2206      	movs	r2, #6
 80089e8:	1c7e      	adds	r6, r7, #1
 80089ea:	f7f7 fc01 	bl	80001f0 <memchr>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d038      	beq.n	8008a64 <_svfiprintf_r+0x1c8>
 80089f2:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <_svfiprintf_r+0x1e8>)
 80089f4:	bb13      	cbnz	r3, 8008a3c <_svfiprintf_r+0x1a0>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	3307      	adds	r3, #7
 80089fa:	f023 0307 	bic.w	r3, r3, #7
 80089fe:	3308      	adds	r3, #8
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a04:	444b      	add	r3, r9
 8008a06:	9309      	str	r3, [sp, #36]	; 0x24
 8008a08:	e76d      	b.n	80088e6 <_svfiprintf_r+0x4a>
 8008a0a:	fb05 3202 	mla	r2, r5, r2, r3
 8008a0e:	2001      	movs	r0, #1
 8008a10:	460f      	mov	r7, r1
 8008a12:	e7a6      	b.n	8008962 <_svfiprintf_r+0xc6>
 8008a14:	2300      	movs	r3, #0
 8008a16:	3701      	adds	r7, #1
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	250a      	movs	r5, #10
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a24:	3a30      	subs	r2, #48	; 0x30
 8008a26:	2a09      	cmp	r2, #9
 8008a28:	d903      	bls.n	8008a32 <_svfiprintf_r+0x196>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0c8      	beq.n	80089c0 <_svfiprintf_r+0x124>
 8008a2e:	9105      	str	r1, [sp, #20]
 8008a30:	e7c6      	b.n	80089c0 <_svfiprintf_r+0x124>
 8008a32:	fb05 2101 	mla	r1, r5, r1, r2
 8008a36:	2301      	movs	r3, #1
 8008a38:	4607      	mov	r7, r0
 8008a3a:	e7f0      	b.n	8008a1e <_svfiprintf_r+0x182>
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	4622      	mov	r2, r4
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <_svfiprintf_r+0x1ec>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4640      	mov	r0, r8
 8008a48:	f3af 8000 	nop.w
 8008a4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a50:	4681      	mov	r9, r0
 8008a52:	d1d6      	bne.n	8008a02 <_svfiprintf_r+0x166>
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	065b      	lsls	r3, r3, #25
 8008a58:	f53f af35 	bmi.w	80088c6 <_svfiprintf_r+0x2a>
 8008a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a5e:	b01d      	add	sp, #116	; 0x74
 8008a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a64:	ab03      	add	r3, sp, #12
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <_svfiprintf_r+0x1ec>)
 8008a6c:	a904      	add	r1, sp, #16
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f000 f882 	bl	8008b78 <_printf_i>
 8008a74:	e7ea      	b.n	8008a4c <_svfiprintf_r+0x1b0>
 8008a76:	bf00      	nop
 8008a78:	08035555 	.word	0x08035555
 8008a7c:	0803555b 	.word	0x0803555b
 8008a80:	0803555f 	.word	0x0803555f
 8008a84:	00000000 	.word	0x00000000
 8008a88:	080087e9 	.word	0x080087e9

08008a8c <_printf_common>:
 8008a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	4691      	mov	r9, r2
 8008a92:	461f      	mov	r7, r3
 8008a94:	688a      	ldr	r2, [r1, #8]
 8008a96:	690b      	ldr	r3, [r1, #16]
 8008a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfb8      	it	lt
 8008aa0:	4613      	movlt	r3, r2
 8008aa2:	f8c9 3000 	str.w	r3, [r9]
 8008aa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aaa:	4606      	mov	r6, r0
 8008aac:	460c      	mov	r4, r1
 8008aae:	b112      	cbz	r2, 8008ab6 <_printf_common+0x2a>
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	f8c9 3000 	str.w	r3, [r9]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	0699      	lsls	r1, r3, #26
 8008aba:	bf42      	ittt	mi
 8008abc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ac0:	3302      	addmi	r3, #2
 8008ac2:	f8c9 3000 	strmi.w	r3, [r9]
 8008ac6:	6825      	ldr	r5, [r4, #0]
 8008ac8:	f015 0506 	ands.w	r5, r5, #6
 8008acc:	d107      	bne.n	8008ade <_printf_common+0x52>
 8008ace:	f104 0a19 	add.w	sl, r4, #25
 8008ad2:	68e3      	ldr	r3, [r4, #12]
 8008ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	42ab      	cmp	r3, r5
 8008adc:	dc28      	bgt.n	8008b30 <_printf_common+0xa4>
 8008ade:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	3300      	adds	r3, #0
 8008ae6:	bf18      	it	ne
 8008ae8:	2301      	movne	r3, #1
 8008aea:	0692      	lsls	r2, r2, #26
 8008aec:	d42d      	bmi.n	8008b4a <_printf_common+0xbe>
 8008aee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008af2:	4639      	mov	r1, r7
 8008af4:	4630      	mov	r0, r6
 8008af6:	47c0      	blx	r8
 8008af8:	3001      	adds	r0, #1
 8008afa:	d020      	beq.n	8008b3e <_printf_common+0xb2>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	68e5      	ldr	r5, [r4, #12]
 8008b00:	f8d9 2000 	ldr.w	r2, [r9]
 8008b04:	f003 0306 	and.w	r3, r3, #6
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	bf08      	it	eq
 8008b0c:	1aad      	subeq	r5, r5, r2
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	6922      	ldr	r2, [r4, #16]
 8008b12:	bf0c      	ite	eq
 8008b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b18:	2500      	movne	r5, #0
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	bfc4      	itt	gt
 8008b1e:	1a9b      	subgt	r3, r3, r2
 8008b20:	18ed      	addgt	r5, r5, r3
 8008b22:	f04f 0900 	mov.w	r9, #0
 8008b26:	341a      	adds	r4, #26
 8008b28:	454d      	cmp	r5, r9
 8008b2a:	d11a      	bne.n	8008b62 <_printf_common+0xd6>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e008      	b.n	8008b42 <_printf_common+0xb6>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4652      	mov	r2, sl
 8008b34:	4639      	mov	r1, r7
 8008b36:	4630      	mov	r0, r6
 8008b38:	47c0      	blx	r8
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d103      	bne.n	8008b46 <_printf_common+0xba>
 8008b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b46:	3501      	adds	r5, #1
 8008b48:	e7c3      	b.n	8008ad2 <_printf_common+0x46>
 8008b4a:	18e1      	adds	r1, r4, r3
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	2030      	movs	r0, #48	; 0x30
 8008b50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b54:	4422      	add	r2, r4
 8008b56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b5e:	3302      	adds	r3, #2
 8008b60:	e7c5      	b.n	8008aee <_printf_common+0x62>
 8008b62:	2301      	movs	r3, #1
 8008b64:	4622      	mov	r2, r4
 8008b66:	4639      	mov	r1, r7
 8008b68:	4630      	mov	r0, r6
 8008b6a:	47c0      	blx	r8
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d0e6      	beq.n	8008b3e <_printf_common+0xb2>
 8008b70:	f109 0901 	add.w	r9, r9, #1
 8008b74:	e7d8      	b.n	8008b28 <_printf_common+0x9c>
	...

08008b78 <_printf_i>:
 8008b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b80:	460c      	mov	r4, r1
 8008b82:	7e09      	ldrb	r1, [r1, #24]
 8008b84:	b085      	sub	sp, #20
 8008b86:	296e      	cmp	r1, #110	; 0x6e
 8008b88:	4617      	mov	r7, r2
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	4698      	mov	r8, r3
 8008b8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b90:	f000 80b3 	beq.w	8008cfa <_printf_i+0x182>
 8008b94:	d822      	bhi.n	8008bdc <_printf_i+0x64>
 8008b96:	2963      	cmp	r1, #99	; 0x63
 8008b98:	d036      	beq.n	8008c08 <_printf_i+0x90>
 8008b9a:	d80a      	bhi.n	8008bb2 <_printf_i+0x3a>
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	f000 80b9 	beq.w	8008d14 <_printf_i+0x19c>
 8008ba2:	2958      	cmp	r1, #88	; 0x58
 8008ba4:	f000 8083 	beq.w	8008cae <_printf_i+0x136>
 8008ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bb0:	e032      	b.n	8008c18 <_printf_i+0xa0>
 8008bb2:	2964      	cmp	r1, #100	; 0x64
 8008bb4:	d001      	beq.n	8008bba <_printf_i+0x42>
 8008bb6:	2969      	cmp	r1, #105	; 0x69
 8008bb8:	d1f6      	bne.n	8008ba8 <_printf_i+0x30>
 8008bba:	6820      	ldr	r0, [r4, #0]
 8008bbc:	6813      	ldr	r3, [r2, #0]
 8008bbe:	0605      	lsls	r5, r0, #24
 8008bc0:	f103 0104 	add.w	r1, r3, #4
 8008bc4:	d52a      	bpl.n	8008c1c <_printf_i+0xa4>
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6011      	str	r1, [r2, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da03      	bge.n	8008bd6 <_printf_i+0x5e>
 8008bce:	222d      	movs	r2, #45	; 0x2d
 8008bd0:	425b      	negs	r3, r3
 8008bd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008bd6:	486f      	ldr	r0, [pc, #444]	; (8008d94 <_printf_i+0x21c>)
 8008bd8:	220a      	movs	r2, #10
 8008bda:	e039      	b.n	8008c50 <_printf_i+0xd8>
 8008bdc:	2973      	cmp	r1, #115	; 0x73
 8008bde:	f000 809d 	beq.w	8008d1c <_printf_i+0x1a4>
 8008be2:	d808      	bhi.n	8008bf6 <_printf_i+0x7e>
 8008be4:	296f      	cmp	r1, #111	; 0x6f
 8008be6:	d020      	beq.n	8008c2a <_printf_i+0xb2>
 8008be8:	2970      	cmp	r1, #112	; 0x70
 8008bea:	d1dd      	bne.n	8008ba8 <_printf_i+0x30>
 8008bec:	6823      	ldr	r3, [r4, #0]
 8008bee:	f043 0320 	orr.w	r3, r3, #32
 8008bf2:	6023      	str	r3, [r4, #0]
 8008bf4:	e003      	b.n	8008bfe <_printf_i+0x86>
 8008bf6:	2975      	cmp	r1, #117	; 0x75
 8008bf8:	d017      	beq.n	8008c2a <_printf_i+0xb2>
 8008bfa:	2978      	cmp	r1, #120	; 0x78
 8008bfc:	d1d4      	bne.n	8008ba8 <_printf_i+0x30>
 8008bfe:	2378      	movs	r3, #120	; 0x78
 8008c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c04:	4864      	ldr	r0, [pc, #400]	; (8008d98 <_printf_i+0x220>)
 8008c06:	e055      	b.n	8008cb4 <_printf_i+0x13c>
 8008c08:	6813      	ldr	r3, [r2, #0]
 8008c0a:	1d19      	adds	r1, r3, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6011      	str	r1, [r2, #0]
 8008c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e08c      	b.n	8008d36 <_printf_i+0x1be>
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6011      	str	r1, [r2, #0]
 8008c20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c24:	bf18      	it	ne
 8008c26:	b21b      	sxthne	r3, r3
 8008c28:	e7cf      	b.n	8008bca <_printf_i+0x52>
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	6825      	ldr	r5, [r4, #0]
 8008c2e:	1d18      	adds	r0, r3, #4
 8008c30:	6010      	str	r0, [r2, #0]
 8008c32:	0628      	lsls	r0, r5, #24
 8008c34:	d501      	bpl.n	8008c3a <_printf_i+0xc2>
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	e002      	b.n	8008c40 <_printf_i+0xc8>
 8008c3a:	0668      	lsls	r0, r5, #25
 8008c3c:	d5fb      	bpl.n	8008c36 <_printf_i+0xbe>
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	4854      	ldr	r0, [pc, #336]	; (8008d94 <_printf_i+0x21c>)
 8008c42:	296f      	cmp	r1, #111	; 0x6f
 8008c44:	bf14      	ite	ne
 8008c46:	220a      	movne	r2, #10
 8008c48:	2208      	moveq	r2, #8
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c50:	6865      	ldr	r5, [r4, #4]
 8008c52:	60a5      	str	r5, [r4, #8]
 8008c54:	2d00      	cmp	r5, #0
 8008c56:	f2c0 8095 	blt.w	8008d84 <_printf_i+0x20c>
 8008c5a:	6821      	ldr	r1, [r4, #0]
 8008c5c:	f021 0104 	bic.w	r1, r1, #4
 8008c60:	6021      	str	r1, [r4, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d13d      	bne.n	8008ce2 <_printf_i+0x16a>
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	f040 808e 	bne.w	8008d88 <_printf_i+0x210>
 8008c6c:	4665      	mov	r5, ip
 8008c6e:	2a08      	cmp	r2, #8
 8008c70:	d10b      	bne.n	8008c8a <_printf_i+0x112>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	07db      	lsls	r3, r3, #31
 8008c76:	d508      	bpl.n	8008c8a <_printf_i+0x112>
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	6862      	ldr	r2, [r4, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	bfde      	ittt	le
 8008c80:	2330      	movle	r3, #48	; 0x30
 8008c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c8a:	ebac 0305 	sub.w	r3, ip, r5
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	f8cd 8000 	str.w	r8, [sp]
 8008c94:	463b      	mov	r3, r7
 8008c96:	aa03      	add	r2, sp, #12
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7ff fef6 	bl	8008a8c <_printf_common>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d14d      	bne.n	8008d40 <_printf_i+0x1c8>
 8008ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca8:	b005      	add	sp, #20
 8008caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cae:	4839      	ldr	r0, [pc, #228]	; (8008d94 <_printf_i+0x21c>)
 8008cb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cb4:	6813      	ldr	r3, [r2, #0]
 8008cb6:	6821      	ldr	r1, [r4, #0]
 8008cb8:	1d1d      	adds	r5, r3, #4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6015      	str	r5, [r2, #0]
 8008cbe:	060a      	lsls	r2, r1, #24
 8008cc0:	d50b      	bpl.n	8008cda <_printf_i+0x162>
 8008cc2:	07ca      	lsls	r2, r1, #31
 8008cc4:	bf44      	itt	mi
 8008cc6:	f041 0120 	orrmi.w	r1, r1, #32
 8008cca:	6021      	strmi	r1, [r4, #0]
 8008ccc:	b91b      	cbnz	r3, 8008cd6 <_printf_i+0x15e>
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	f022 0220 	bic.w	r2, r2, #32
 8008cd4:	6022      	str	r2, [r4, #0]
 8008cd6:	2210      	movs	r2, #16
 8008cd8:	e7b7      	b.n	8008c4a <_printf_i+0xd2>
 8008cda:	064d      	lsls	r5, r1, #25
 8008cdc:	bf48      	it	mi
 8008cde:	b29b      	uxthmi	r3, r3
 8008ce0:	e7ef      	b.n	8008cc2 <_printf_i+0x14a>
 8008ce2:	4665      	mov	r5, ip
 8008ce4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ce8:	fb02 3311 	mls	r3, r2, r1, r3
 8008cec:	5cc3      	ldrb	r3, [r0, r3]
 8008cee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	2900      	cmp	r1, #0
 8008cf6:	d1f5      	bne.n	8008ce4 <_printf_i+0x16c>
 8008cf8:	e7b9      	b.n	8008c6e <_printf_i+0xf6>
 8008cfa:	6813      	ldr	r3, [r2, #0]
 8008cfc:	6825      	ldr	r5, [r4, #0]
 8008cfe:	6961      	ldr	r1, [r4, #20]
 8008d00:	1d18      	adds	r0, r3, #4
 8008d02:	6010      	str	r0, [r2, #0]
 8008d04:	0628      	lsls	r0, r5, #24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	d501      	bpl.n	8008d0e <_printf_i+0x196>
 8008d0a:	6019      	str	r1, [r3, #0]
 8008d0c:	e002      	b.n	8008d14 <_printf_i+0x19c>
 8008d0e:	066a      	lsls	r2, r5, #25
 8008d10:	d5fb      	bpl.n	8008d0a <_printf_i+0x192>
 8008d12:	8019      	strh	r1, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	4665      	mov	r5, ip
 8008d1a:	e7b9      	b.n	8008c90 <_printf_i+0x118>
 8008d1c:	6813      	ldr	r3, [r2, #0]
 8008d1e:	1d19      	adds	r1, r3, #4
 8008d20:	6011      	str	r1, [r2, #0]
 8008d22:	681d      	ldr	r5, [r3, #0]
 8008d24:	6862      	ldr	r2, [r4, #4]
 8008d26:	2100      	movs	r1, #0
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f7f7 fa61 	bl	80001f0 <memchr>
 8008d2e:	b108      	cbz	r0, 8008d34 <_printf_i+0x1bc>
 8008d30:	1b40      	subs	r0, r0, r5
 8008d32:	6060      	str	r0, [r4, #4]
 8008d34:	6863      	ldr	r3, [r4, #4]
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3e:	e7a7      	b.n	8008c90 <_printf_i+0x118>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	462a      	mov	r2, r5
 8008d44:	4639      	mov	r1, r7
 8008d46:	4630      	mov	r0, r6
 8008d48:	47c0      	blx	r8
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d0aa      	beq.n	8008ca4 <_printf_i+0x12c>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	079b      	lsls	r3, r3, #30
 8008d52:	d413      	bmi.n	8008d7c <_printf_i+0x204>
 8008d54:	68e0      	ldr	r0, [r4, #12]
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	4298      	cmp	r0, r3
 8008d5a:	bfb8      	it	lt
 8008d5c:	4618      	movlt	r0, r3
 8008d5e:	e7a3      	b.n	8008ca8 <_printf_i+0x130>
 8008d60:	2301      	movs	r3, #1
 8008d62:	464a      	mov	r2, r9
 8008d64:	4639      	mov	r1, r7
 8008d66:	4630      	mov	r0, r6
 8008d68:	47c0      	blx	r8
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d09a      	beq.n	8008ca4 <_printf_i+0x12c>
 8008d6e:	3501      	adds	r5, #1
 8008d70:	68e3      	ldr	r3, [r4, #12]
 8008d72:	9a03      	ldr	r2, [sp, #12]
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	42ab      	cmp	r3, r5
 8008d78:	dcf2      	bgt.n	8008d60 <_printf_i+0x1e8>
 8008d7a:	e7eb      	b.n	8008d54 <_printf_i+0x1dc>
 8008d7c:	2500      	movs	r5, #0
 8008d7e:	f104 0919 	add.w	r9, r4, #25
 8008d82:	e7f5      	b.n	8008d70 <_printf_i+0x1f8>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1ac      	bne.n	8008ce2 <_printf_i+0x16a>
 8008d88:	7803      	ldrb	r3, [r0, #0]
 8008d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d92:	e76c      	b.n	8008c6e <_printf_i+0xf6>
 8008d94:	08035566 	.word	0x08035566
 8008d98:	08035577 	.word	0x08035577

08008d9c <memcpy>:
 8008d9c:	b510      	push	{r4, lr}
 8008d9e:	1e43      	subs	r3, r0, #1
 8008da0:	440a      	add	r2, r1
 8008da2:	4291      	cmp	r1, r2
 8008da4:	d100      	bne.n	8008da8 <memcpy+0xc>
 8008da6:	bd10      	pop	{r4, pc}
 8008da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008db0:	e7f7      	b.n	8008da2 <memcpy+0x6>

08008db2 <memmove>:
 8008db2:	4288      	cmp	r0, r1
 8008db4:	b510      	push	{r4, lr}
 8008db6:	eb01 0302 	add.w	r3, r1, r2
 8008dba:	d807      	bhi.n	8008dcc <memmove+0x1a>
 8008dbc:	1e42      	subs	r2, r0, #1
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	d00a      	beq.n	8008dd8 <memmove+0x26>
 8008dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008dca:	e7f8      	b.n	8008dbe <memmove+0xc>
 8008dcc:	4283      	cmp	r3, r0
 8008dce:	d9f5      	bls.n	8008dbc <memmove+0xa>
 8008dd0:	1881      	adds	r1, r0, r2
 8008dd2:	1ad2      	subs	r2, r2, r3
 8008dd4:	42d3      	cmn	r3, r2
 8008dd6:	d100      	bne.n	8008dda <memmove+0x28>
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dde:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008de2:	e7f7      	b.n	8008dd4 <memmove+0x22>

08008de4 <_free_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4605      	mov	r5, r0
 8008de8:	2900      	cmp	r1, #0
 8008dea:	d045      	beq.n	8008e78 <_free_r+0x94>
 8008dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df0:	1f0c      	subs	r4, r1, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	bfb8      	it	lt
 8008df6:	18e4      	addlt	r4, r4, r3
 8008df8:	f000 f8d2 	bl	8008fa0 <__malloc_lock>
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <_free_r+0x98>)
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	4610      	mov	r0, r2
 8008e02:	b933      	cbnz	r3, 8008e12 <_free_r+0x2e>
 8008e04:	6063      	str	r3, [r4, #4]
 8008e06:	6014      	str	r4, [r2, #0]
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e0e:	f000 b8c8 	b.w	8008fa2 <__malloc_unlock>
 8008e12:	42a3      	cmp	r3, r4
 8008e14:	d90c      	bls.n	8008e30 <_free_r+0x4c>
 8008e16:	6821      	ldr	r1, [r4, #0]
 8008e18:	1862      	adds	r2, r4, r1
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bf04      	itt	eq
 8008e1e:	681a      	ldreq	r2, [r3, #0]
 8008e20:	685b      	ldreq	r3, [r3, #4]
 8008e22:	6063      	str	r3, [r4, #4]
 8008e24:	bf04      	itt	eq
 8008e26:	1852      	addeq	r2, r2, r1
 8008e28:	6022      	streq	r2, [r4, #0]
 8008e2a:	6004      	str	r4, [r0, #0]
 8008e2c:	e7ec      	b.n	8008e08 <_free_r+0x24>
 8008e2e:	4613      	mov	r3, r2
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	b10a      	cbz	r2, 8008e38 <_free_r+0x54>
 8008e34:	42a2      	cmp	r2, r4
 8008e36:	d9fa      	bls.n	8008e2e <_free_r+0x4a>
 8008e38:	6819      	ldr	r1, [r3, #0]
 8008e3a:	1858      	adds	r0, r3, r1
 8008e3c:	42a0      	cmp	r0, r4
 8008e3e:	d10b      	bne.n	8008e58 <_free_r+0x74>
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	4401      	add	r1, r0
 8008e44:	1858      	adds	r0, r3, r1
 8008e46:	4282      	cmp	r2, r0
 8008e48:	6019      	str	r1, [r3, #0]
 8008e4a:	d1dd      	bne.n	8008e08 <_free_r+0x24>
 8008e4c:	6810      	ldr	r0, [r2, #0]
 8008e4e:	6852      	ldr	r2, [r2, #4]
 8008e50:	605a      	str	r2, [r3, #4]
 8008e52:	4401      	add	r1, r0
 8008e54:	6019      	str	r1, [r3, #0]
 8008e56:	e7d7      	b.n	8008e08 <_free_r+0x24>
 8008e58:	d902      	bls.n	8008e60 <_free_r+0x7c>
 8008e5a:	230c      	movs	r3, #12
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	e7d3      	b.n	8008e08 <_free_r+0x24>
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	1821      	adds	r1, r4, r0
 8008e64:	428a      	cmp	r2, r1
 8008e66:	bf04      	itt	eq
 8008e68:	6811      	ldreq	r1, [r2, #0]
 8008e6a:	6852      	ldreq	r2, [r2, #4]
 8008e6c:	6062      	str	r2, [r4, #4]
 8008e6e:	bf04      	itt	eq
 8008e70:	1809      	addeq	r1, r1, r0
 8008e72:	6021      	streq	r1, [r4, #0]
 8008e74:	605c      	str	r4, [r3, #4]
 8008e76:	e7c7      	b.n	8008e08 <_free_r+0x24>
 8008e78:	bd38      	pop	{r3, r4, r5, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000154 	.word	0x20000154

08008e80 <_malloc_r>:
 8008e80:	b570      	push	{r4, r5, r6, lr}
 8008e82:	1ccd      	adds	r5, r1, #3
 8008e84:	f025 0503 	bic.w	r5, r5, #3
 8008e88:	3508      	adds	r5, #8
 8008e8a:	2d0c      	cmp	r5, #12
 8008e8c:	bf38      	it	cc
 8008e8e:	250c      	movcc	r5, #12
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	4606      	mov	r6, r0
 8008e94:	db01      	blt.n	8008e9a <_malloc_r+0x1a>
 8008e96:	42a9      	cmp	r1, r5
 8008e98:	d903      	bls.n	8008ea2 <_malloc_r+0x22>
 8008e9a:	230c      	movs	r3, #12
 8008e9c:	6033      	str	r3, [r6, #0]
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
 8008ea2:	f000 f87d 	bl	8008fa0 <__malloc_lock>
 8008ea6:	4a21      	ldr	r2, [pc, #132]	; (8008f2c <_malloc_r+0xac>)
 8008ea8:	6814      	ldr	r4, [r2, #0]
 8008eaa:	4621      	mov	r1, r4
 8008eac:	b991      	cbnz	r1, 8008ed4 <_malloc_r+0x54>
 8008eae:	4c20      	ldr	r4, [pc, #128]	; (8008f30 <_malloc_r+0xb0>)
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	b91b      	cbnz	r3, 8008ebc <_malloc_r+0x3c>
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 f863 	bl	8008f80 <_sbrk_r>
 8008eba:	6020      	str	r0, [r4, #0]
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 f85e 	bl	8008f80 <_sbrk_r>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d124      	bne.n	8008f12 <_malloc_r+0x92>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	6033      	str	r3, [r6, #0]
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 f868 	bl	8008fa2 <__malloc_unlock>
 8008ed2:	e7e4      	b.n	8008e9e <_malloc_r+0x1e>
 8008ed4:	680b      	ldr	r3, [r1, #0]
 8008ed6:	1b5b      	subs	r3, r3, r5
 8008ed8:	d418      	bmi.n	8008f0c <_malloc_r+0x8c>
 8008eda:	2b0b      	cmp	r3, #11
 8008edc:	d90f      	bls.n	8008efe <_malloc_r+0x7e>
 8008ede:	600b      	str	r3, [r1, #0]
 8008ee0:	50cd      	str	r5, [r1, r3]
 8008ee2:	18cc      	adds	r4, r1, r3
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 f85c 	bl	8008fa2 <__malloc_unlock>
 8008eea:	f104 000b 	add.w	r0, r4, #11
 8008eee:	1d23      	adds	r3, r4, #4
 8008ef0:	f020 0007 	bic.w	r0, r0, #7
 8008ef4:	1ac3      	subs	r3, r0, r3
 8008ef6:	d0d3      	beq.n	8008ea0 <_malloc_r+0x20>
 8008ef8:	425a      	negs	r2, r3
 8008efa:	50e2      	str	r2, [r4, r3]
 8008efc:	e7d0      	b.n	8008ea0 <_malloc_r+0x20>
 8008efe:	428c      	cmp	r4, r1
 8008f00:	684b      	ldr	r3, [r1, #4]
 8008f02:	bf16      	itet	ne
 8008f04:	6063      	strne	r3, [r4, #4]
 8008f06:	6013      	streq	r3, [r2, #0]
 8008f08:	460c      	movne	r4, r1
 8008f0a:	e7eb      	b.n	8008ee4 <_malloc_r+0x64>
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	6849      	ldr	r1, [r1, #4]
 8008f10:	e7cc      	b.n	8008eac <_malloc_r+0x2c>
 8008f12:	1cc4      	adds	r4, r0, #3
 8008f14:	f024 0403 	bic.w	r4, r4, #3
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d005      	beq.n	8008f28 <_malloc_r+0xa8>
 8008f1c:	1a21      	subs	r1, r4, r0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f000 f82e 	bl	8008f80 <_sbrk_r>
 8008f24:	3001      	adds	r0, #1
 8008f26:	d0cf      	beq.n	8008ec8 <_malloc_r+0x48>
 8008f28:	6025      	str	r5, [r4, #0]
 8008f2a:	e7db      	b.n	8008ee4 <_malloc_r+0x64>
 8008f2c:	20000154 	.word	0x20000154
 8008f30:	20000158 	.word	0x20000158

08008f34 <_realloc_r>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	4607      	mov	r7, r0
 8008f38:	4614      	mov	r4, r2
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	b921      	cbnz	r1, 8008f48 <_realloc_r+0x14>
 8008f3e:	4611      	mov	r1, r2
 8008f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f44:	f7ff bf9c 	b.w	8008e80 <_malloc_r>
 8008f48:	b922      	cbnz	r2, 8008f54 <_realloc_r+0x20>
 8008f4a:	f7ff ff4b 	bl	8008de4 <_free_r>
 8008f4e:	4625      	mov	r5, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f54:	f000 f826 	bl	8008fa4 <_malloc_usable_size_r>
 8008f58:	42a0      	cmp	r0, r4
 8008f5a:	d20f      	bcs.n	8008f7c <_realloc_r+0x48>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4638      	mov	r0, r7
 8008f60:	f7ff ff8e 	bl	8008e80 <_malloc_r>
 8008f64:	4605      	mov	r5, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d0f2      	beq.n	8008f50 <_realloc_r+0x1c>
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	f7ff ff15 	bl	8008d9c <memcpy>
 8008f72:	4631      	mov	r1, r6
 8008f74:	4638      	mov	r0, r7
 8008f76:	f7ff ff35 	bl	8008de4 <_free_r>
 8008f7a:	e7e9      	b.n	8008f50 <_realloc_r+0x1c>
 8008f7c:	4635      	mov	r5, r6
 8008f7e:	e7e7      	b.n	8008f50 <_realloc_r+0x1c>

08008f80 <_sbrk_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4c06      	ldr	r4, [pc, #24]	; (8008f9c <_sbrk_r+0x1c>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4605      	mov	r5, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	f7fe fc3e 	bl	800780c <_sbrk>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_sbrk_r+0x1a>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_sbrk_r+0x1a>
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	2000089c 	.word	0x2000089c

08008fa0 <__malloc_lock>:
 8008fa0:	4770      	bx	lr

08008fa2 <__malloc_unlock>:
 8008fa2:	4770      	bx	lr

08008fa4 <_malloc_usable_size_r>:
 8008fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa8:	1f18      	subs	r0, r3, #4
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bfbc      	itt	lt
 8008fae:	580b      	ldrlt	r3, [r1, r0]
 8008fb0:	18c0      	addlt	r0, r0, r3
 8008fb2:	4770      	bx	lr

08008fb4 <trunc>:
 8008fb4:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8008fb8:	ec5c bb10 	vmov	fp, ip, d0
 8008fbc:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8008fc0:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8008fc4:	2913      	cmp	r1, #19
 8008fc6:	4664      	mov	r4, ip
 8008fc8:	dc11      	bgt.n	8008fee <trunc+0x3a>
 8008fca:	2900      	cmp	r1, #0
 8008fcc:	bfa7      	ittee	ge
 8008fce:	4b15      	ldrge	r3, [pc, #84]	; (8009024 <trunc+0x70>)
 8008fd0:	fa43 f101 	asrge.w	r1, r3, r1
 8008fd4:	2200      	movlt	r2, #0
 8008fd6:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8008fda:	bfa4      	itt	ge
 8008fdc:	2200      	movge	r2, #0
 8008fde:	ea2c 0301 	bicge.w	r3, ip, r1
 8008fe2:	4693      	mov	fp, r2
 8008fe4:	469c      	mov	ip, r3
 8008fe6:	ec4c bb10 	vmov	d0, fp, ip
 8008fea:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8008fee:	2933      	cmp	r1, #51	; 0x33
 8008ff0:	dd0d      	ble.n	800900e <trunc+0x5a>
 8008ff2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ff6:	d1f6      	bne.n	8008fe6 <trunc+0x32>
 8008ff8:	4663      	mov	r3, ip
 8008ffa:	ee10 2a10 	vmov	r2, s0
 8008ffe:	ee10 0a10 	vmov	r0, s0
 8009002:	4621      	mov	r1, r4
 8009004:	f7f7 f94a 	bl	800029c <__adddf3>
 8009008:	4683      	mov	fp, r0
 800900a:	468c      	mov	ip, r1
 800900c:	e7eb      	b.n	8008fe6 <trunc+0x32>
 800900e:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8009012:	f04f 33ff 	mov.w	r3, #4294967295
 8009016:	fa23 f000 	lsr.w	r0, r3, r0
 800901a:	ea2b 0600 	bic.w	r6, fp, r0
 800901e:	46b3      	mov	fp, r6
 8009020:	46a4      	mov	ip, r4
 8009022:	e7e0      	b.n	8008fe6 <trunc+0x32>
 8009024:	000fffff 	.word	0x000fffff

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
